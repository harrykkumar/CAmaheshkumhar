// let categoryId = -1
    // let childmostId = -1
    // for (let i = 0; i < this.allItems.length; i++) {
    //   const element = this.allItems[i]
    //   if (element.Id === this.ItemId) {
    //     categoryId = +element.CategoryId
    //     childmostId = +element.CategoryId
    //     break
    //   }
    // }
    // for (let i = 0; i < this.allCategories.length; i++) {
    //   const element = this.allCategories[i]
    //   if (element.Id === categoryId) {
    //     if (element.LevelNo > 1) {
    //       categoryId = element.ParentId
    //       i = 0
    //     } else {
    //       break
    //     }
    //   }
    // }
    // console.log('category id : ', categoryId)
    // if (+this.categoryId !== +childmostId) {
    //   this.categoryId = +childmostId
    //   // this.catSelect2.setElementValue(categoryId)
    //   let evt = { value: categoryId, data: [{ text: '' }] }
    //   this.onSelectCategory(evt, 1)
    // }




     onSelectCategory (evt, levelNo) {
    console.log('evt on change of category : ', evt, 'level : ', levelNo)
    if (+evt.value > 0) {
      if (levelNo > 1) {
        this.parentMostCategory = this.getParentMostCat(+evt.value, levelNo)
      }
      if (levelNo === this.catLevel) {
        if (this.categoryId !== +evt.value) {
          this.categoryId = +evt.value
          this.categoryName = evt.data[0].text
          console.log('categoryname : ', this.categoryName)
          console.log('category id : ', this.categoryId)
          this.checkForItems(+evt.value)
        }
      } else {
        if (levelNo < this.catLevel) {
          let categoryId = +evt.value
          let newData = []
          this.categories[levelNo].data = [{ id: '0', text: 'Select Category' }]
          this.allCategories.forEach(category => {
            if (category.LevelNo !== levelNo && category.LevelNo > levelNo) {
              if (category.ParentId === categoryId) {
                newData.push({
                  text: category.Name,
                  id: category.Id
                })
              }
            } else {
              this.categories[category.LevelNo - 1].data.push({
                text: category.Name,
                id: category.Id
              })
            }
          })
          this.categories[levelNo].data = Object.assign([], newData)
          console.log('dynamic categories : ', this.categories)
          this.loading = false
        }
      }
    } else if (+evt.value === 0) {
      this.getCatagoryDetail(this.allCategories)
    }
  }

  2 - retail shoes
  5 - medical
  3 - wood or stone
  6 - retail store
















































  old 


  /* File created by dolly */

import { Component,
  ViewChild,
  QueryList,
  ViewChildren,
  Renderer2,
  ElementRef
 } from '@angular/core'

import { Subscription } from 'rxjs/Subscription'
import { UIConstant } from 'src/app/shared/constants/ui-constant'
import { Select2OptionData, Select2Component } from 'ng2-select2'
import { PurchaseService } from '../purchase.service'
import { Subject } from 'rxjs'
import { PurchaseAttribute, AddCust, PurchaseAdd, PurchaseTransaction,
  PurchaseItem } from '../../../model/sales-tracker.model'
import { CommonService } from '../../../commonServices/commanmaster/common.services'
import { ToastrCustomService } from '../../../commonServices/toastr.service'
import { Settings } from '../../../shared/constants/settings.constant'
import { GlobalService } from '../../../commonServices/global.service'
import { SetUpIds } from 'src/app/shared/constants/setupIds.constant'
import { AdditionalCharges, ItemTaxTrans } from '../../../model/sales-tracker.model';
declare const flatpickr: any
declare const $: any
@Component({
  selector: 'app-purchase',
  templateUrl: './purchase-add.component.html',
  styleUrls: ['./purchase-add.component.css']
})
export class PurchaseAddComponent {
  modalSub: Subscription
  loading: boolean = true
  catLevel: number = 1
  categories: Array<{ placeholder: string, value: string, data: Array<Select2OptionData>, level: number }> = []
  attr$: Subscription
  item$: Subscription
  vendorData$: Subscription
  taxProcessesData$: Subscription
  paymentModesData$: Subscription
  organisationsData$: Subscription
  godownsData$: Subscription
  referralTypesData$: Subscription
  category$: Subscription

  referralsData$: Subscription
  taxSlabsData$: Subscription
  currencyData$: Subscription
  addressData$: Subscription

  attibutesData: Array<Select2OptionData>
  taxProcessesData: Array<Select2OptionData>
  paymentModesData: Array<Select2OptionData>
  organisationsData: Array<Select2OptionData>
  godownsData: Array<Select2OptionData>
  referralTypesData: Array<Select2OptionData>
  referralData: Array<Select2OptionData>
  paymentModeSelect2: Array<Select2OptionData>
  currenciesSelect2: Array<Select2OptionData>
  taxTypeData: Array<Select2OptionData>
  currencyData: Array<Select2OptionData>
  convertToCurrencyData: Array<Select2OptionData>
  vendorData: Array<Select2OptionData>
  AddressData: Array<Select2OptionData>
  subUnitsData: Array<Select2OptionData>
  itemData: Array<Select2OptionData>
  paymentLedgerselect2: Array<Select2OptionData>
  taxSlabsData: Array<Select2OptionData>
  chargesData: Array<Select2OptionData>

  subUnitsValue: number
  attributeValue: number
  itemValue: number
  vendorValue: number
  taxProcessValue: number
  paymentModeValue: number
  organisationValue: number
  godownValue: number
  referralTypesValue: number
  referralValue: number
  taxSlabValue: number
  currencyValue: number
  convertToCurrencyValue: number
  addressValue: number
  LedgerChargeValue: number
  LedgerNameValue: string
  AmountChargeValue: number
  TaxSlabChargeValue: number
  TaxAmountChargeValue: number
  TotalAmountChargeValue: number

  ledgerChargeValue: number
  taxSlabChargeValue: number

  clientDateFormat: string = ''
  currency: any
  defaultCurrency: string
  setupModules: any
  currencyValues: Array < { id: string, symbol: string } > = [{ id: '0', symbol: '%' }]
  freightData: Array<Select2OptionData>

  LedgerChargeId: number
  LedgerName: string
  AmountCharge: number
  TaxSlabChargeId: number
  TaxChargeName: string
  TaxAmountCharge: number
  TotalAmountCharge: number
  taxChargeSlabType: number
  taxChargeRates: Array<any> = []
  TaxTypeCharge: number = 0
  itemTaxTrans: Array<ItemTaxTrans> = []
  taxTypeChargeName: string

  Paymode: string
  PayModeId: number
  LedgerId: number
  Amount: number
  BankLedgerName: string
  ChequeNo: string
  PayDate: string
  paymode: number
  ledger: number

  ItemTransId: number
  AttributeId: number
  ParentTypeId: number
  name: string

  TaxTypeTax: number
  AmountTax: number
  ItemTransTaxId: number
  ParentTaxId: number
  ParentTypeTaxId: number
  ItemTransTypeTax: number
  TaxRateNameTax: string
  TaxRateId: number
  TaxRate: number
  ValueType: number
  TaxSlabName: string
  editChargeSno: number = 0

  ItemTaxTrans: Array<ItemTaxTrans>[] = []

  TransType: number
  TransId: number
  ChallanId: number = 0
  ItemId: number
  UnitId: number
  Length: number
  Height: number
  Width: number
  Quantity: number
  SaleRate: number
  MrpRate: number
  PurchaseRate: number
  TaxSlabId: number
  TaxType: number
  TaxAmount: number
  DiscountType: number
  Discount: number
  DiscountAmt: number
  ExpiryDate: string
  MfdDate: string
  BatchNo: string
  Remark: string
  itemName: string
  categoryName: string
  unitName: string
  taxSlabName: string
  taxTypeName: string
  SubTotal: number
  taxSlabType: number
  taxRates: Array<any> = []
  attributeKeys: any = []
  BillAmount: number
  BillDate: string
  PartyBillDate: string
  PartyBillNo: string
  BillNo: string
  ConvertedAmount: number
  CurrencyRate: number
  TotalDiscount: number
  Freight: number
  FreightMode: number
  Id: number
  PartyId: number
  ReferralId: number
  ReferralTypeId: number
  ReferralComission: number
  ReferralComissionTypeId: number
  ReverseCharge: number
  ReverseTax: number
  Cess: number
  CessAmount: number
  RoundOff: number
  SubTotalAmount: number
  TotalTaxAmount: number
  TotalChallan: number
  VehicleNo: string
  Drivername: string
  Transportation: string
  TotalQty: number
  OtherCharge: number
  GodownId: number
  CurrencyId: number
  OrgId: number
  InterestRate: number
  InterestAmount: number
  InterestType: number
  DueDate: string
  OrderId: number
  Advanceamount: number
  NetAmount: number
  LocationTo: string
  itemAttributeTrans: Array<PurchaseAttribute> = []
  ItemAttributeTrans: Array<PurchaseAttribute> = []
  PaymentDetail: Array<PurchaseTransaction> = []
  AdditionalCharges: Array<AdditionalCharges> = []
  Items: Array<PurchaseItem> = []
  categoryId: number
  AddressId: number
  editTransId: number = -1
  editItemId: number = -1
  editItemSno: number = 0
  editChargeId: number = -1
  validItem: boolean = true
  validTransaction: boolean = true
  validCharge: boolean = true
  clickItem = false
  clickTrans = false
  clickCharge = false

  CreditLimit: number
  CreditDays: number

  allItems: any = []
  ReferralCommissionTypeId: number
  ReferralCommission: number
  CommissionAmount: number

  categorySelected: any = []
  settingData: any = []
  clientStateId: number = 0
  allAddressData: Array<any> = []
  isOtherState: boolean = true
  editMode: boolean = false
  parentMostCategory: number = 0
  submitSave: boolean = false
  industryId: number = 0

  newVendAdd$: Subscription
  addressAdd$: Subscription
  itemAdd$: Subscription
  taxAdd$: Subscription
  unitAdd$: Subscription
  ledgerAdd$: Subscription
  settingData$: Subscription
  freightData$: Subscription
  chargestData$: Subscription
  subUnitsData$: Subscription
  formReadySub = new Subject<boolean>()
  fromReady$ = this.formReadySub.asObservable()
  form$: Subscription

  invalidObj: any = {}
  previousBillNo: string = ''
  keepOpen: boolean = false
  isAddNew: boolean = false
  constructor (private commonService: CommonService,
    private purchaseService: PurchaseService,
    private toastrService: ToastrCustomService,
    private settings: Settings,
    private renderer: Renderer2,
    private gs: GlobalService) {
    this.modalSub = this.commonService.getPurchaseStatus().subscribe(
      (status: AddCust) => {
        if (status.open) {
          if (status.editId !== '') {
            this.editMode = true
            this.Id = +status.editId
          } else {
            this.Id = UIConstant.ZERO
            this.editMode = false
          }
          this.openModal()
        } else {
          this.closeModal()
        }
      }
    )

    this.category$ = this.commonService.getCategoryStatus().subscribe(
      (data: AddCust) => {
        if (data.id && data.name) {
          let categoryId = data.id
          let categoryName = data.name
          this.isAddNew = true
          this.getAllCategories(categoryName, categoryId, this.isAddNew)
        }
      }
    )

    this.form$ = this.fromReady$.subscribe(
      (formReady) => {
        if (formReady) {
          this.loading = false
          if (this.editMode) {
            this.vendorSelect2.setElementValue(this.PartyId)
            this.organisationSelect2.setElementValue(this.OrgId)
            this.godownSelect2.setElementValue(this.GodownId)
            setTimeout(() => {
              this.addressSelect2.setElementValue(this.AddressId)
            }, 1000)
            this.currencySelect2.setElementValue(this.CurrencyId)
            this.convertToSelect2.setElementValue(this.ConvertToCurrencyId)
            this.referralSelect2.setElementValue(this.ReferralId)
            this.referraltypeSelect2.setElementValue(this.ReferralTypeId)
            this.setDueDate(this.CreditDays)
          }
        }
      }
    )

    this.vendorData$ = this.purchaseService.vendorData$.subscribe(
      data => {
        if (data.data) {
          this.vendorData = data.data
        }
      }
    )

    this.taxProcessesData$ = this.purchaseService.taxProcessesData$.subscribe(
      data => {
        if (data.data) {
          this.taxProcessesData = data.data
        }
      }
    )
    this.paymentModesData$ = this.purchaseService.paymentModesData$.subscribe(
      data => {
        if (data.data) {
          this.paymentModesData = data.data
        }
      }
    )
    this.organisationsData$ = this.purchaseService.organisationsData$.subscribe(
      data => {
        if (data.data) {
          this.organisationsData = data.data
          if (this.organisationsData.length >= 1) {
            this.OrgId = +this.organisationsData[0].id
            this.organisationValue = +this.organisationsData[0].id
            if (this.isBillNoManuall) {
              this.BillDate = this.gs.getDefaultDate(this.clientDateFormat)
              this.getNewBillNo()
            }
          }
          // console.log('organisationsData : ', this.organisationsData)
        }
      }
    )
    this.godownsData$ = this.purchaseService.godownsData$.subscribe(
      data => {
        if (data.data) {
          this.godownsData = data.data
          if (this.godownsData.length === 1) {
            this.GodownId = +this.godownsData[0].id
            this.godownValue = +this.godownsData[0].id
          }
          // console.log('godownsData : ', this.godownsData)
        }
      }
    )
    this.referralTypesData$ = this.purchaseService.referralTypesData$.subscribe(
      data => {
        if (data.data) {
          this.referralTypesData = data.data
          // console.log('referralTypesData : ', this.referralTypesData)
        }
      }
    )
    this.attr$ = this.purchaseService.attributesData$.subscribe(
      data => {
        if (data.attributeKeys && data.attributesData) {
          this.initAttribute()
          this.attributeKeys = data.attributeKeys
          this.attibutesData = data.attributesData
        }
      }
    )

    this.item$ = this.purchaseService.itemData$.subscribe(
      data => {
        if (data.itemData) {
          this.itemData = Object.assign([], data.itemData)
        }
      }
    )
    this.subUnitsData$ = this.purchaseService.subUnitsData$.subscribe(
      data => {
        if (data.data) {
          this.subUnitsData = data.data
          // console.log('subUnitsData : ', this.subUnitsData)
        }
      }
    )
    this.referralsData$ = this.purchaseService.referralData$.subscribe(
      data => {
        if (data.data) {
          this.referralData = data.data
          // console.log('referralData : ', this.referralData)
        }
      }
    )
    this.taxSlabsData$ = this.purchaseService.taxSlabsData$.subscribe(
      data => {
        if (data.data) {
          this.taxSlabsData = data.data
          // console.log('taxSlabsData : ', this.taxSlabsData)
        }
      }
    )

    this.currencyData$ = this.purchaseService.currencyData$.subscribe(
      data => {
        if (data.data) {
          this.currencyData = data.data
          this.defaultCurrency = this.currencyData[0].text
          this.currencyValues[0] = { id: '0', symbol: '%' }
          this.currencyValues[1] = { id: '1', symbol: this.defaultCurrency }
          // console.log('currencyValues : ', this.currencyValues)
          this.convertToCurrencyData = [ ...this.currencyData ]
          // console.log('currency data : ', this.convertToCurrencyData)
          if (this.currencyData.length >= 1) {
            this.CurrencyId = +this.currencyData[0].id
            this.currencyValue = +this.currencyData[0].id
            this.ConvertToCurrencyId = +this.convertToCurrencyData[0].id
            this.convertToCurrencyValue = +this.convertToCurrencyData[0].id
          }
        }
      }
    )

    this.freightData$ = this.purchaseService.freightData$.subscribe(
      data => {
        if (data.data) {
          this.freightData = data.data
        }
      }
    )

    this.chargestData$ = this.purchaseService.chargestData$.subscribe(
      data => {
        if (data.data) {
          this.chargesData = data.data
        }
      }
    )

    let _self = this
    this.addressData$ = this.purchaseService.addressData$.subscribe(
      data => {
        if (data.data) {
          _self.AddressData = Object.assign([], data.data)
          let id = 0
          if (_self.AddressData.length > 2) {
            id = +_self.AddressData[2].id
          }
          _self.AddressId = id
          _self.addressValue = id
          _self.addressSelect2.setElementValue(id)
        }
      }
    )

    this.settingData$ = this.purchaseService.settingData$.subscribe(
      data => {
        if (data.data) {
          this.settingData = data.data
          this.getSetUpModules(this.settingData)
        }
      }
    )

    this.newVendAdd$ = this.commonService.getVendStatus().subscribe(
      (data: AddCust) => {
        if (data.id && data.name) {
          let newData = Object.assign([], this.vendorData)
          newData.push({ id: data.id, text: data.name })
          this.vendorData = newData
          this.PartyId = +data.id
          this.vendorValue = data.id
          this.CreditLimit = 0
          this.CreditDays = 0
          this.setDueDate(this.CreditDays)
          setTimeout(() => {
            if (this.vendorSelect2) {
              const element = this.renderer.selectRootElement(this.vendorSelect2.selector.nativeElement, true)
              element.focus({ preventScroll: false })
            }
          }, 2000)
        }
      }
    )

    this.addressAdd$ = this.commonService.getAddressStatus().subscribe(
      (data: AddCust) => {
        if (data.id && data.name) {
          let newData = Object.assign([], this.AddressData)
          newData.push({ id: data.id, text: data.name })
          this.AddressData = newData
          this.AddressId = +data.id
          this.addressValue = data.id
          this.checkForGST()
          setTimeout(() => {
            if (this.addressSelect2) {
              const element = this.renderer.selectRootElement(this.addressSelect2.selector.nativeElement, true)
              element.focus({ preventScroll: false })
            }
          }, 2000)
        }
      }
    )

    this.unitAdd$ = this.commonService.getCompositeUnitStatus().subscribe(
      (data: AddCust) => {
        if (data.id && data.name) {
          let newData = Object.assign([], this.subUnitsData)
          newData.push({ id: +data.id, text: data.name })
          this.subUnitsData = newData
          this.UnitId = +data.id
          this.subUnitsValue = data.id
          setTimeout(() => {
            if (this.unitSelect2) {
              const element = this.renderer.selectRootElement(this.unitSelect2.selector.nativeElement, true)
              element.focus({ preventScroll: false })
            }
          }, 2000)
        }
      }
    )

    this.unitAdd$ = this.commonService.getUnitStatus().subscribe(
      (data: AddCust) => {
        if (data.id && data.name) {
          let newData = Object.assign([], this.subUnitsData)
          newData.push({ id: +data.id, text: data.name })
          this.subUnitsData = newData
          this.UnitId = +data.id
          this.subUnitsValue = data.id
          setTimeout(() => {
            if (this.unitSelect2) {
              const element = this.renderer.selectRootElement(this.unitSelect2.selector.nativeElement, true)
              element.focus({ preventScroll: false })
            }
          }, 2000)
        }
      }
    )

    this.itemAdd$ = this.commonService.getItemMasterStatus().subscribe(
      (data: AddCust) => {
        if (data.id && data.name) {
          let newData = Object.assign([], this.itemData)
          newData.push({ id: data.id, text: data.name })
          this.itemData = newData
          this.ItemId = +data.id
          this.itemValue = data.id
          setTimeout(() => {
            if (this.itemselect2) {
              const element = this.renderer.selectRootElement(this.itemselect2.selector.nativeElement, true)
              element.focus({ preventScroll: false })
            }
          }, 2000)
        }
      }
    )

    this.ledgerAdd$ = this.commonService.getLedgerStatus().subscribe(
      (data: AddCust) => {
        if (data.id && data.name) {
          let newData = Object.assign([], this.paymentLedgerselect2)
          newData.push({ id: data.id, text: data.name })
          this.paymentLedgerselect2 = newData
          this.LedgerId = +data.id
          this.ledger = data.id
          setTimeout(() => {
            if (this.ledgerSelect2) {
              const element = this.renderer.selectRootElement(this.ledgerSelect2.selector.nativeElement, true)
              element.focus({ preventScroll: false })
            }
          }, 2000)
        }
      }
    )

    this.taxAdd$ = this.commonService.getTaxStatus().subscribe(
      (data: AddCust) => {
        if (data.id && data.name) {
          let newData = Object.assign([], this.taxSlabsData)
          newData.push({ id: data.id, text: data.name })
          this.taxSlabsData = newData
          this.TaxSlabId = +data.id
          this.taxSlabValue = data.id
          setTimeout(() => {
            if (this.taxSlabSelect2) {
              const element = this.renderer.selectRootElement(this.taxSlabSelect2.selector.nativeElement, true)
              element.focus({ preventScroll: false })
            }
          }, 2000)
        }
      }
    )
  }

  getEditData () {
    console.log('edit id : ', this.Id)
    this.purchaseService.getPurchaseDetailById(this.Id).subscribe(
      data => {
        console.log('edit data : ', data)
        if (data.Code === UIConstant.THOUSAND && data.Data) {
          this.allAddressData = data.Data.AddressDetails
          this.purchaseService.createAddress(data.Data.AddressDetails)
          $('#purchase_modal').modal(UIConstant.MODEL_SHOW)
          this.createForm(data.Data)
        } else {
          this.toastrService.showError(data.Message, '')
        }
      }
    )
  }

  dataForEdit: any
  createForm (data) {
    this.dataForEdit = data
    this.createOther(data.PurchaseTransactions[0])
    this.createAttributes(data.ItemAttributesTrans)
    this.createItems(data.ItemTransactions)
    this.createTransaction(data.PaymentDetails)
  }

  itemAttributesOthers: any = []
  createAttributes (attributes) {
    attributes.forEach((element, index) => {
      this.itemAttributesOthers[index] = {
        ItemId: element.ItemId,
        ItemTransId: element.ItemTransId,
        AttributeId:  element.AttributeId,
        ParentTypeId: 7,
        name: element.AttributeName,
        Id: element.Id
      }
    })

    console.log('this.itemAttributesOthers : ', this.itemAttributesOthers)
  }

  createItems (ItemTransactions) {
    ItemTransactions.forEach(element => {
      let taxRates = []
      // taxRates = this.dataForEdit.ItemTaxTrans.filter((taxRate) => {
      //   if (taxRate.ItemTransId === element.Id) {
      //     return taxRate
      //   }
      // })
      let itemAttributeTrans = []
      itemAttributeTrans = this.itemAttributesOthers.filter((attr) => {
        if (attr.ItemTransId === element.Id) {
          return attr
        }
      })
      if (+element.TaxType === 0) {
        this.taxTypeName = 'Exclusive'
      } else {
        this.taxTypeName = 'Inclusive'
      }
      console.log('tax rate : ', taxRates)
      console.log('itemAttributeTrans : ', itemAttributeTrans)
      this.TransType = element.TransType
      this.TransId = element.TransId
      this.ChallanId = element.ChallanId
      this.categoryId = element.CategoryId
      this.ItemId = element.ItemId
      this.UnitId = element.UnitId
      this.Length = element.Length
      this.Height = element.Height
      this.Width = element.Width
      this.Quantity = element.Quantity
      this.SaleRate = element.SaleRate
      this.MrpRate = element.MrpRate
      this.PurchaseRate = element.PurchaseRate
      this.TaxSlabId = element.TaxSlabId
      this.TaxType = element.TaxType
      this.TaxAmount = element.TaxAmount
      this.DiscountType = element.DiscountType
      this.Discount = element.Discount
      this.DiscountAmt = element.DiscountAmt
      this.ExpiryDate = element.ExpiryDate
      this.MfdDate = element.MfdDate
      this.BatchNo = element.BatchNo
      this.Remark = element.Remark
      this.itemName = element.ItemName
      this.categoryName = element.CategoryName
      this.unitName = element.UnitName
      this.taxSlabName = element.TaxSlabName
      this.taxTypeName = this.taxTypeName
      this.SubTotal = element.SubTotal
      this.itemAttributeTrans = itemAttributeTrans
      this.taxRates = taxRates
      this.taxSlabType = element.TaxSlabType
      this.addItems()
      if (this.Items[this.Items.length - 1]) {
        this.Items[this.Items.length - 1].Id = element.Id
      } else {
        this.toastrService.showError('Not getting enough data for edit', '')
      }
    })
    console.log('items after edit : ', this.Items)
    this.updateRow()
  }

  updateRow () {
    this.Items.forEach(element => {
      this.purchaseService.getSlabData(element.TaxSlabId).subscribe(
        data => {
          console.log('tax slab data : ', data)
          if (data.Code === UIConstant.THOUSAND && data.Data) {
            let taxRates = data.Data.TaxRates
            element.taxRates = taxRates
            let total = +(isNaN(+element.PurchaseRate) ? 0 : +element.PurchaseRate)
              * (isNaN(+element.Quantity) || +element.Quantity === 0 ? 1 : +element.Quantity)
              * (isNaN(+element.Length) || +element.Length === 0 ? 1 : +element.Length)
              * (isNaN(+element.Width) || +element.Width === 0 ? 1 : +element.Width)
              * (isNaN(+element.Height) || +element.Height === 0 ? 1 : +element.Height)
            if (taxRates.length > 0 && total > 0) {
              let discountedAmount = total - element.DiscountAmt
              element.TaxAmount = +(this.purchaseService.taxCalculation(taxRates,
                element.taxSlabType,
                discountedAmount,
                this.isOtherState, 7, this.taxSlabName).taxAmount).toFixed(this.noOfDecimalPoint)
            } else {
              element.TaxAmount = 0
            }

            const totalAmount = +(((isNaN(+element.PurchaseRate) ? 0 : +element.PurchaseRate)
              * (isNaN(+element.Quantity) || +element.Quantity === 0 ? 1 : +element.Quantity)
              * (isNaN(+element.Length) || +element.Length === 0 ? 1 : +element.Length)
              * (isNaN(+element.Width) || +element.Width === 0 ? 1 : +element.Width)
              * (isNaN(+element.Height) || +element.Height === 0 ? 1 : +element.Height)
            )
            - (isNaN(+element.DiscountAmt) ? 0 : +element.DiscountAmt)
            + (isNaN(+element.TaxAmount) ? 0 : +element.TaxAmount))

            element.SubTotal = +(isNaN(totalAmount) ? 0 : totalAmount).toFixed(this.noOfDecimalPoint)
            this.calculateAllTotal()
          }
        }
      )
    })

    console.log('Items on update : ', this.Items)
  }

  createTransaction (paymentDetails) {
    paymentDetails.forEach(element => {
      this.Paymode = element.Paymode
      this.PayModeId = element.PayModeId
      this.LedgerId = element.LedgerId
      this.BankLedgerName = element.BankLedgerName
      this.Amount = element.Amount
      this.PayDate = this.gs.utcToClientDateFormat(element.PayDate, this.clientDateFormat)
      this.ChequeNo = element.ChequeNo
      this.addTransactions()
      if (this.PaymentDetail[this.PaymentDetail.length - 1]) {
        this.PaymentDetail[this.PaymentDetail.length - 1].Id = element.Id
      } else {
        this.toastrService.showError('Not getting enough data for edit', '')
      }
    })
    console.log('this.PaymentDetail : ', this.PaymentDetail)
  }

  other: any = {}
  createOther (others) {
    this.setBillDate()
    this.setPartyBillDate()
    this.setPayDate()
    this.setExpiryDate()
    this.setDueDate(0)
    this.setMfdDate()
    this.BillNo = others.BillNo
    this.ReferralCommissionTypeId = others.ReferralCommissionTypeId
    this.ReferralCommission = +others.ReferralCommission
    this.BillAmount = +others.BillAmount
    this.BillDate = this.gs.utcToClientDateFormat(others.BillDate, this.clientDateFormat)
    this.PartyBillDate = this.gs.utcToClientDateFormat(others.PartyBillDate, this.clientDateFormat)
    this.DueDate = this.gs.utcToClientDateFormat(others.DueDate, this.clientDateFormat)
    this.PartyBillNo = others.PartyBillNo
    this.ConvertedAmount = +others.ConvertedAmount
    this.CurrencyRate = +others.CurrencyRate
    this.TotalDiscount = 0
    this.Freight = +others.Freight
    this.FreightMode = +others.FreightMode
    this.PartyId = +others.LedgerId
    this.ReferralId = others.ReferralId
    this.ReferralTypeId = others.ReferralTypeId
    this.ReverseCharge = 0
    this.ReverseTax = 0
    this.CessAmount = 0
    this.RoundOff = others.RoundOff
    this.SubTotalAmount = 0
    this.TotalTaxAmount = 0
    this.TotalChallan = 0
    this.VehicleNo = others.VehicleNo
    this.Drivername = others.Drivername
    this.Transportation = others.Transportation
    this.TotalQty = +others.TotalQty
    this.OtherCharge = +others.OtherCharge
    this.GodownId = +others.GodownId
    this.CurrencyId = +others.CurrencyId
    this.OrgId = +others.OrgId
    this.InterestRate = others.InterestRate
    this.InterestAmount = others.InterestAmount
    this.InterestType = others.InterestType
    this.OrderId = 0
    this.Advanceamount = 0
    this.NetAmount = 0
    this.AddressId = +others.AddressId
    this.CreditDays = +others.CreditDays
    this.CreditLimit = +others.CreditLimit
    this.ConvertToCurrencyId = +others.ConvertedCurrencyId
    this.LocationTo = others.LocationTo
    this.isOtherState = others.IsOtherStatemain
    this.defaultCurrency = others.Currency
    console.log('currency values : ', this.currencyValues)
    this.other = others
    this.formReadySub.next(true)
  }

  getAllCategories (categoryName, categoryId, isAddNew) {
    this.commonService.getAllCategories().subscribe(
      data => {
        // console.log('all categories : ', data)
        let levelNo = 0
        if (data.Code === UIConstant.THOUSAND && data.Data && data.Data.length > 0) {
          this.getCatagoryDetail(data.Data)
          data.Data.forEach(category => {
            if (+category.Id === +categoryId) {
              levelNo = +category.LevelNo
              return
            }
          })
          this.categoryName = categoryName
          this.categoryId = categoryId
          this.catSelect2.forEach((item: Select2Component, index: number, array: Select2Component[]) => {
            if ((index + 1) === levelNo) {
              item.setElementValue(this.categoryId)
            }
          })
          // this.updateCategories(categoryId)
          // console.log('categoryname : ', this.categoryName)
          let evt = { value: categoryId, data: [{ text: categoryName }] }
          this.onSelectCategory(evt, levelNo)
        }
      }
    )
  }

  @ViewChild('convertTo_select2') convertToSelect2: Select2Component

  noOfDecimalPoint: number = 0
  backDateEntry: boolean = false
  isBillNoManuall: boolean = false
  freightAndOtherChangeCalc: string
  getSetUpModules (settings) {
    console.log('settings : ', settings)
    settings.forEach(element => {
      if (element.id === SetUpIds.catLevel) {
        this.catLevel = +element.val
      }
      if (element.id === SetUpIds.dateFormat) {
        this.clientDateFormat = element.val
      }
      if (element.id === SetUpIds.noOfDecimalPoint) {
        this.noOfDecimalPoint = +element.val
      }
      if (element.id === SetUpIds.unitType) {
        this.unitSettingType = +element.val
      }
      if (element.id === SetUpIds.gstCalculationOnFreightOrOtherChange) {
        this.freightAndOtherChangeCalc = 'Max'
      }
      if (element.id === SetUpIds.backDateEntry) {
        this.backDateEntry = element.val
      }
      if (element.id === SetUpIds.purchaseBillNoManually) {
        this.isBillNoManuall = element.val
      }
      // console.log('isBillNoManuall : ', this.isBillNoManuall)
    })
    this.createModels(this.catLevel)
  }

  @ViewChild('vendor_select2') vendorSelect2: Select2Component
  onVendorSelect (event) {
    console.log('vendor select : ', event)
    if (event.value && event.data.length > 0) {
      if (event.value === '-1' && event.data[0] && event.data[0].text === UIConstant.ADD_NEW_OPTION) {
        this.vendorSelect2.selector.nativeElement.value = ''
        this.commonService.openVend('', true)
      } else if (+event.value === 0) {
        this.allAddressData = []
        this.AddressData = Object.assign([], this.allAddressData)
      } else {
        if (event.value > 0 && event.data[0] && event.data[0].text) {
          this.PartyId = +event.value
          this.getAllAddresses(this.PartyId)
        }
      }
      this.checkForValidation()
    }
  }

  getAllAddresses (vendorId) {
    this.purchaseService.getAllAddresses(vendorId).subscribe(data => {
      // console.log('addresses : ', data)
      if (data.Code === UIConstant.THOUSAND && data.Data) {
        if (data.Data.AddressDetails && data.Data.AddressDetails) {
          this.allAddressData = data.Data.AddressDetails
          console.log(this.allAddressData)
          this.purchaseService.createAddress(data.Data.AddressDetails)
        }
        if (data.Data.LedgerDetails && data.Data.LedgerDetails.length > 0) {
          const LedgerDetails = data.Data.LedgerDetails[0]
          this.CreditLimit = LedgerDetails.CreditLimit
          this.CreditDays = LedgerDetails.CreditDays
          this.setDueDate(this.CreditDays)
        }
      }
    })
  }

  getNewBillNo () {
    if (this.BillDate) {
      this.setPayDate()
    }
    if (+this.OrgId > 0 && this.BillDate) {
      let newBillDate = this.gs.clientToSqlDateFormat(this.BillDate, this.clientDateFormat)
      let type = (this.isBillNoManuall) ? 2 : 1
      this.purchaseService.getNewBillNoPurchase(+this.OrgId, newBillDate, type).subscribe(
        data => {
          console.log('new bill no : ', data)
          if (data.Code === UIConstant.THOUSAND && data.Data) {
            if (data.Data.length > 0) {
              if (!this.isBillNoManuall) {
                this.BillNo = data.Data[0].BillNo
              } else {
                this.previousBillNo = data.Data[0].BillNo
              }
            } else {
              if (!this.isBillNoManuall) {
                this.BillNo = ''
              } else {
                this.previousBillNo = ''
              }
            }
          } else {
            this.toastrService.showError(data.Message, '')
          }
        }
      )
    }
  }

  getSPUtilityData () {
    let _self = this
    this.commonService.getSPUtilityData(UIConstant.PURCHASE_TYPE).subscribe(
      data => {
        console.log('sputility data : ', data)
        if (data.Code === UIConstant.THOUSAND && data.Data) {
          if (data.Data.AttributeValueResponses.length > 0) {
            _self.purchaseService.generateAttributes(data.Data)
          }
          if (data.Data.ItemCategorys.length > 0) {
            _self.getCatagoryDetail(data.Data.ItemCategorys)
          }
          this.allItems = [ ...data.Data.Items ]
          // console.log('allItems : ', this.allItems)
          _self.purchaseService.createItems(data.Data.Items)
          _self.purchaseService.createVendors(data.Data.Vendors)
          _self.purchaseService.createTaxProcess(data.Data.TaxProcesses)
          _self.purchaseService.createPaymentModes(data.Data.PaymentModes)
          _self.purchaseService.createOrganisations(data.Data.Organizations)
          _self.purchaseService.createGodowns(data.Data.Godowns)
          _self.purchaseService.createReferralTypes(data.Data.ReferalTypes)
          _self.purchaseService.createSubUnits(data.Data.SubUnits)
          _self.purchaseService.createTaxSlabs(data.Data.TaxSlabs)
          _self.purchaseService.createReferral(data.Data.Referals)
          _self.purchaseService.createCurrencies(data.Data.Currencies)
          _self.purchaseService.createFreightBy(data.Data.FreightModes)
          _self.purchaseService.createCharges(data.Data.LedgerCharges)
          _self.clientStateId = data.Data.ClientAddresses[0].StateId
          if (!this.editMode) {
            if (!this.isBillNoManuall) {
              _self.setBillNo(data.Data.TransactionNoSetups)
            }
            _self.setBillDate()
            _self.setPartyBillDate()
            _self.setPayDate()
            _self.setExpiryDate()
            _self.setDueDate(0)
            _self.setMfdDate()
            $('#purchase_modal').modal(UIConstant.MODEL_SHOW)
            setTimeout(() => {
              if (this.vendorSelect2) {
                this.vendorSelect2.selector.nativeElement.focus()
              }
              this.commonService.fixTableHF('cat-table')
            }, 1000)
          }
        }
      },
      (error) => {
        console.log(error)
      },
      () => {
        if (!this.editMode) {
          this.loading = false
        } else {
          if (this.editMode) {
            this.getEditData()
          }
        }
      }
    )
  }

  @ViewChild('currency_select2') currencySelect2: Select2Component
  openModal () {
    this.loading = true
    this.categories = []
    this.getPurchaseSetting()
    this.AddressData = []
    this.vendorData = []
    this.organisationsData = []
    this.currencyData = []
    this.godownsData = []
    this.allCategories = []
    this.allItems = []
    this.subUnitsData = []
    this.paymentModesData = []
    this. paymentLedgerselect2 = []
    this.referralData = []
    this.referralTypesData = []
    this.freightData = []
    this.attributeKeys = []
    this.itemAttributeTrans = []
    this.industryId = +this.settings.industryId
    this.taxTypeData = [
      { id: '0', text: 'Exclusive' },
      { id: '1', text: 'Inclusive' }
    ]
    this.convertToCurrencyData = []
    this.currencyValues = [{ id: '0', symbol: '%' }]
    this.initItem()
    this.initTransaction()
    this.initComp()
    this.initCharge()
  }

  checkForExistence: any = []
  getFormDependency () {
    this.commonService.getFormDependency(UIConstant.PURCHASE_TYPE).subscribe(
      data => {
        if (data.Code === UIConstant.THOUSAND && data.Data) {
          data.Data.forEach((element) => {
            if (element.IsIdentity) {
              element['FieldValue'] = this.Id
            }
          })
          this.checkForExistence = data.Data
          console.log('dependency : ', this.checkForExistence)
        }
      }
    )
  }

  closeModal () {
    if ($('#purchase_modal').length > 0) {
      $('#purchase_modal').modal(UIConstant.MODEL_HIDE)
    }
  }

  setBillNo (setups) {
    this.BillNo = setups[0].BillNo
  }

  getCatLevel () {
    let _self = this
    this.commonService.getSettingById(SetUpIds.catLevel).subscribe(
      (data) => {
        if (data.Code === UIConstant.THOUSAND) {
          const setUpSettings = data.Data.SetupClients
          _self.catLevel = +setUpSettings[0].Val
        }
      }
    )
  }

  unitSettingType: number = 1
  setPayDate () {
    let _self = this
    if (this.backDateEntry) {
      jQuery(function ($) {
        flatpickr('#pay-date', {
          dateFormat: _self.clientDateFormat,
          defaultDate: [_self.BillDate]
        })
      })
    } else {
      jQuery(function ($) {
        flatpickr('#pay-date', {
          minDate: 'today',
          dateFormat: _self.clientDateFormat,
          defaultDate: [_self.BillDate]
        })
      })
    }
    _self.PayDate = _self.BillDate
  }

  setBillDate () {
    let _self = this
    if (this.backDateEntry) {
      jQuery(function ($) {
        flatpickr('#bill-date1', {
          dateFormat: _self.clientDateFormat,
          defaultDate: [_self.gs.getDefaultDate(_self.clientDateFormat)]
        })
      })
    } else {
      jQuery(function ($) {
        flatpickr('#bill-date1', {
          minDate: 'today',
          dateFormat: _self.clientDateFormat,
          defaultDate: [_self.gs.getDefaultDate(_self.clientDateFormat)]
        })
      })
    }
    this.BillDate = _self.gs.getDefaultDate(_self.clientDateFormat)
  }

  setPartyBillDate () {
    let _self = this
    if (this.backDateEntry) {
      jQuery(function ($) {
        flatpickr('#party-bill-date1', {
          dateFormat: _self.clientDateFormat,
          defaultDate: [_self.gs.getDefaultDate(_self.clientDateFormat)]
        })
      })
    } else {
      jQuery(function ($) {
        flatpickr('#party-bill-date1', {
          minDate: 'today',
          dateFormat: _self.clientDateFormat,
          defaultDate: [_self.gs.getDefaultDate(_self.clientDateFormat)]
        })
      })
    }
    this.PartyBillDate = _self.gs.getDefaultDate(_self.clientDateFormat)
  }

  setDueDate (creditDays) {
    let _self = this
    const date = _self.gs.setDueDate(creditDays, _self.clientDateFormat)
    jQuery(function ($) {
      flatpickr('#due-date1', {
        dateFormat: _self.clientDateFormat,
        defaultDate: [date]
      })
    })
    this.DueDate = date
  }

  setExpiryDate () {
    let _self = this
    jQuery(function ($) {
      flatpickr('#expiry-date', {
        minDate: 'today',
        dateFormat: _self.clientDateFormat
      })
    })
  }

  setMfdDate () {
    let _self = this
    jQuery(function ($) {
      flatpickr('#mfd-date', {
        dateFormat: _self.clientDateFormat
      })
    })
  }

  createModels (levels) {
    // console.log('levels : ', levels)
    this.categories = []
    let obj = { placeholder: 'Select Category',
      value: 'category',
      data: [{ id: '0', text: 'Select Category' }],
      level: 1
    }
    this.categories.push({ ...obj })
    if (levels > 1) {
      for (let i = 0; i < levels - 1; i++) {
        obj['value'] = 'sub' + this.categories[this.categories.length - 1].value
        obj['level'] = this.categories[this.categories.length - 1].level + 1
        obj['data'] = [{ id: '0', text: 'Select Category' }]
        this.categories.push({ ...obj })
      }
    }
    // console.log('categories : ', this.categories)
  }

  allCategories: any = []
  getCatagoryDetail (data) {
    // console.log('category data : ', data)
    for (let i = 0; i < this.catLevel; i++) {
      if (this.categories[i]) {
        this.categories[i].data = [{ id: '0', text: 'Select Category' }]
      }
    }
    this.allCategories = [ ...data ]
    let _self = this
    data.forEach(category => {
      // console.log('category.LevelNo : ', category.LevelNo)
      if (_self.categories[category.LevelNo - 1]) {
        _self.categories[category.LevelNo - 1].data.push({
          text: category.Name,
          id: category.Id
        })
      }
    })
    for (let i = 0; i < this.catLevel; i++) {
      if (this.categories[i]) {
        this.categories[i].data = Object.assign([], this.categories[i].data)
      }
    }
    console.log('dynamic categories : ', this.categories)
    this.loading = false
  }

  onSelectCategory (evt, levelNo) {
    console.log('evt on change of category : ', evt, 'level : ', levelNo)
    if (this.catLevel > 1) {
      if (+evt.value > 0) {
        if (levelNo === this.catLevel) {
          if (this.categoryId !== +evt.value) {
            this.categoryId = +evt.value
            this.categoryName = evt.data[0].text
            console.log('categoryname : ', this.categoryName)
            console.log('category id : ', this.categoryId)
            this.checkForItems(+evt.value)
            this.validateItem()
            this.updateCategories(+evt.value)
          }
        } else {
          if (levelNo < this.catLevel) {
            let categoryId = +evt.value
            let newData = []
            this.categories[levelNo].data = [{ id: '0', text: 'Select Category' }]
            this.allCategories.forEach(category => {
              if (category.LevelNo !== levelNo && category.LevelNo > levelNo) {
                if (category.ParentId === categoryId) {
                  newData.push({
                    text: category.Name,
                    id: category.Id
                  })
                }
              } else {
                this.categories[category.LevelNo - 1].data.push({
                  text: category.Name,
                  id: category.Id
                })
              }
            })
            this.categories[levelNo].data = Object.assign([], newData)
            this.loading = false
          }
        }
      }
      if (+evt.value === 0) {
        this.getCatagoryDetail(this.allCategories)
      }
    } else {
      if (levelNo === this.catLevel) {
        if (this.categoryId !== +evt.value) {
          this.categoryId = +evt.value
          this.categoryName = evt.data[0].text
          console.log('categoryname : ', this.categoryName)
          console.log('category id : ', this.categoryId)
          this.checkForItems(+evt.value)
          this.validateItem()
          this.updateCategories(+evt.value)
        }
      }
    }
  }

  checkForItems (categoryId) {
    let newItemsList = []
    this.allItems.forEach(item => {
      if (item.CategoryId === categoryId) {
        newItemsList.push(item)
      }
    })
    this.purchaseService.createItems(newItemsList)
  }

  @ViewChild('item_select2') itemselect2: Select2Component
  onItemSelect (evt) {
    if (evt.value && evt.data.length > 0) {
      // console.log('evt on change of item : ', evt)
      if (+evt.value === 0) {
        this.ItemId = +evt.value
      }
      if (+evt.value === -1) {
        if (this.categoryId > 0) {
          this.commonService.openItemMaster('', this.categoryId)
          this.itemselect2.selector.nativeElement.value = ''
        } else {
          this.toastrService.showInfo('Please select a category', '')
        }
      } else {
        if (evt.value > 0 && evt.data[0] && evt.data[0].text) {
          this.ItemId = +evt.value
          this.itemName = evt.data[0].text
          this.getItemDetail(this.ItemId)
          this.updateAttributes()
        }
      }
      this.validateItem()
      this.calculate()
    }
  }

  getItemDetail (id) {
    this.purchaseService.getItemDetail(id).subscribe(data => {
      // console.log('item detail : ', data)
      if (data.Code === UIConstant.THOUSAND && data.Data.length > 0) {
        this.categoryName = data.Data[0].CategoryName
        this.updateCategories(data.Data[0].CategoryId)
        // console.log('categoryname : ', this.categoryName)
        this.TaxSlabId = data.Data[0].TaxId
        this.UnitId = data.Data[0].UnitId
        this.unitSelect2.setElementValue(data.Data[0].UnitId)
        this.unitName = data.Data[0].UnitName
        this.taxSlabSelect2.setElementValue(data.Data[0].TaxId)
        this.taxSlabName = data.Data[0].TaxSlab
        this.SaleRate = data.Data[0].SaleRate
        this.PurchaseRate = data.Data[0].PurchaseRate
        this.MrpRate = data.Data[0].Mrprate
        this.getTaxDetail(this.TaxSlabId)
      }
    })
  }

  onAttributeSelect (evt, index, attributeId) {
    console.log('evt on change of attribute : ', evt)
    if (+evt.value > 0 && evt.data.length > 0) {
      let Sno = 0
      if (this.Items.length === 0) {
        Sno = 1
      } else {
        Sno = this.Items[this.Items.length - 1].Sno + 1
      }
      if (this.itemAttributeTrans[index]) {
        this.itemAttributeTrans[index]['ItemId'] = this.ItemId
        this.itemAttributeTrans[index]['AttributeId'] = +evt.value
        this.itemAttributeTrans[index]['ParentTypeId'] = 7
        this.itemAttributeTrans[index]['name'] = evt.data[0].text
      } else {
        this.itemAttributeTrans[index] = {
          ItemId: this.ItemId,
          ItemTransId: Sno,
          AttributeId:  +evt.value,
          ParentTypeId: 7,
          name: evt.data[0].text,
          id: 0
        }
      }
    } else if (+evt.value === -1) {
      let data = {
        addNewId: attributeId,
        attrNameId: attributeId,
        attrValue: attributeId,
        disabledAddButton: true

      }
      let item = this.attrSelect2.find((attr: Select2Component, i: number, array: Select2Component[]) => {
        return i === index
      })
      item.selector.nativeElement.value = ''
      this.commonService.openAttribute(data, true)
    }

    this.attrSelect2.forEach((attr: Select2Component, index: number, array: Select2Component[]) => {
      if (this.itemAttributeTrans[index] && this.itemAttributeTrans[index].AttributeId > 0) {
        $('#' + $('.attr')[index].id).removeClass('errorSelecto')
      } else {
        $('#' + $('.attr')[index].id).addClass('errorSelecto')
      }
    })
    // console.log('this.itemAttributeTrans : ', this.itemAttributeTrans)
    this.validateItem()
  }

  updateAttributes () {
    for (let i = 0; i < this.itemAttributeTrans.length; i++) {
      this.itemAttributeTrans[i].ItemId = this.ItemId
    }
  }

  getParentMostCat (id, level) {
    // console.log('id : ', id)
    // console.log('level : ', level)
    let parentMostCategory = 0
    while (level !== 0) {
      this.allCategories.forEach(category => {
        if (id === category.Id) {
          parentMostCategory = category.Id
          id = category.ParentId
          level--
        }
      })
    }
    console.log('parentMostCategory : ', parentMostCategory)
    this.parentMostCategory = parentMostCategory
  }

  @ViewChildren('cat_select2') catSelect2: QueryList<Select2Component>
  updateCategories (childmostId) {
    let categoryId = childmostId
    this.getParentMostCat(childmostId, this.catLevel)
    categoryId = this.parentMostCategory
    // console.log('category id : ', categoryId)
    if (+this.categoryId !== +childmostId || this.editItemId !== -1) {
      this.categoryId = +childmostId
      this.catSelect2.forEach((item: Select2Component, index: number, array: Select2Component[]) => {
        if (index === 0) {
          item.setElementValue(categoryId)
        } else if (index === (this.catLevel - 1)) {
          item.setElementValue(+childmostId)
        }
      })
      let evt = { value: categoryId, data: [{ text: '' }] }
      this.onSelectCategory(evt, 1)
    }
  }

  appliedTaxRatesItem: any = []
  appliedTaxRatesCharge: any = []
  calculate () {
    let total = +(isNaN(+this.PurchaseRate) ? 0 : +this.PurchaseRate)
    * (isNaN(+this.Quantity) || +this.Quantity === 0 ? 1 : +this.Quantity)
    * (isNaN(+this.Length) || +this.Length === 0 ? 1 : +this.Length)
    * (isNaN(+this.Width) || +this.Width === 0 ? 1 : +this.Width)
    * (isNaN(+this.Height) || +this.Height === 0 ? 1 : +this.Height)
    if ('' + this.DiscountType === '0') {
      if (this.Discount) {
        this.DiscountAmt = +((+this.Discount / 100) * (total)).toFixed(this.noOfDecimalPoint)
      } else {
        this.DiscountAmt = 0
      }
    } else {
      this.DiscountAmt = isNaN(+this.Discount) ? 0 : +this.Discount
    }
    this.Freight = isNaN(+this.Freight) ? 0 : +this.Freight
    if (this.taxRates.length > 0 && total > 0) {
      let discountedAmount = total - this.DiscountAmt
      if (this.TaxType === 1) {
        let returnTax = this.purchaseService.taxCalCulationForInclusive(this.taxRates,
          this.taxSlabType,
          discountedAmount,
          this.isOtherState, 7, this.taxSlabName)
        this.TaxAmount = +(returnTax.taxAmount).toFixed(this.noOfDecimalPoint)
        this.appliedTaxRatesItem = returnTax.appliedTaxRates
      } else if (this.TaxType === 0) {
        let returnTax = this.purchaseService.taxCalculation(this.taxRates,
          this.taxSlabType,
          discountedAmount,
          this.isOtherState, 7, this.taxSlabName)
        this.TaxAmount = +(returnTax.taxAmount).toFixed(this.noOfDecimalPoint)
        this.appliedTaxRatesItem = returnTax.appliedTaxRates
      }
    } else {
      this.TaxAmount = 0
    }
    console.log('tax amount : ', this.TaxAmount)
    if (this.taxChargeRates.length > 0 && this.AmountCharge > 0) {
      if (this.TaxTypeCharge === 1) {
        let returnTax = this.purchaseService.taxCalCulationForInclusive(this.taxChargeRates,
          this.taxChargeSlabType,
          +this.AmountCharge,
          this.isOtherState, 22, this.TaxSlabName)
        this.TaxAmountCharge = +(returnTax.taxAmount).toFixed(this.noOfDecimalPoint)
        this.appliedTaxRatesCharge = returnTax.appliedTaxRates
      } else if (this.TaxTypeCharge === 0) {
        let returnTax = this.purchaseService.taxCalculation(this.taxChargeRates,
          this.taxChargeSlabType,
          +this.AmountCharge,
          this.isOtherState, 22, this.TaxSlabName)
        this.TaxAmountCharge = +(returnTax.taxAmount).toFixed(this.noOfDecimalPoint)
        this.appliedTaxRatesCharge = returnTax.appliedTaxRates
      }
    } else {
      this.TaxAmountCharge = 0
    }
    console.log('TaxAmountCharge : ', this.TaxAmountCharge)
    if (+this.AmountCharge > 0) {
      this.TotalAmountCharge = +this.AmountCharge + +this.TaxAmountCharge
    } else {
      this.TotalAmountCharge = 0
    }
    this.InterestAmount = 0
    this.SubTotal = +(this.calculateTotalOfRow()).toFixed(this.noOfDecimalPoint)
    this.TotalAmountCharge = +this.TotalAmountCharge.toFixed(this.noOfDecimalPoint)
    if (+this.ItemId > 0) {
      this.calculateAllTotal()
    } else {
      this.backtrackCalc()
    }
  }

  calculateTotalOfRow () {
    const totalAmount = ((isNaN(+this.PurchaseRate) ? 0 : +this.PurchaseRate)
      * (isNaN(+this.Quantity) || +this.Quantity === 0 ? 1 : +this.Quantity)
      * (isNaN(+this.Length) || +this.Length === 0 ? 1 : +this.Length)
      * (isNaN(+this.Width) || +this.Width === 0 ? 1 : +this.Width)
      * (isNaN(+this.Height) || +this.Height === 0 ? 1 : +this.Height)
    )
     - (isNaN(+this.DiscountAmt) ? 0 : +this.DiscountAmt)
    + ((this.TaxType === 0) ? (isNaN(+this.TaxAmount) ? 0 : +this.TaxAmount) : 0)
    return isNaN(totalAmount) ? 0 : totalAmount
  }

  calculateAllTotal () {
    let totalDiscount = 0
    let totalTax = 0
    let totalQuantity = 0
    let totalAmount = 0
    for (let i = 0; i < this.Items.length; i++) {
      totalDiscount = totalDiscount + +this.Items[i].DiscountAmt
      totalTax = totalTax + +this.Items[i].TaxAmount
      totalQuantity = totalQuantity + +this.Items[i].Quantity
      totalAmount = +totalAmount + +this.Items[i].SubTotal
    }
    if (!this.clickItem) {
      if (this.DiscountAmt) {
        totalDiscount += +this.DiscountAmt
      }
      if (this.TaxAmount) {
        totalTax += +this.TaxAmount
      }
      if (this.Quantity) {
        totalQuantity += +this.Quantity
      }
      if (this.SubTotal) {
        totalAmount += +this.SubTotal
      }
    }
    this.TotalDiscount = +totalDiscount.toFixed(this.noOfDecimalPoint)
    this.TotalTaxAmount = +totalTax.toFixed(this.noOfDecimalPoint)
    this.TotalQty = +totalQuantity.toFixed(this.noOfDecimalPoint)
    this.SubTotalAmount = +totalAmount.toFixed(this.noOfDecimalPoint)
    if (!isNaN(totalAmount)) {
      totalAmount = totalAmount + +this.OtherCharge
      if (this.FreightMode === 1) {
        totalAmount = totalAmount + +this.Freight
      }
      this.RoundOff = +(Math.round(totalAmount) - totalAmount).toFixed(this.noOfDecimalPoint)
      this.CessAmount = 0
      this.BillAmount = Math.round(totalAmount)
      this.calculatePaymentAmount()
    }
  }

  calculatePaymentAmount () {
    let paymentTotal = 0
    for (let i = 0; i <= this.PaymentDetail.length - 1; i++) {
      paymentTotal = paymentTotal + +this.PaymentDetail[i].Amount
    }
    if (this.BillAmount > 0 && paymentTotal >= 0 && paymentTotal < this.BillAmount) {
      this.Amount = this.BillAmount - paymentTotal
    } else if (paymentTotal > this.BillAmount) {
      this.Amount = 0
    }
    console.log('amount : ', this.Amount)
  }

  backtrackCalc () {
    let totalDiscount = 0
    let totalTax = 0
    let totalQuantity = 0
    let totalAmount = 0
    for (let i = 0; i < this.Items.length; i++) {
      totalDiscount = totalDiscount + +this.Items[i].DiscountAmt
      totalTax = totalTax + +this.Items[i].TaxAmount
      totalQuantity = totalQuantity + +this.Items[i].Quantity
      totalAmount = +totalAmount + +this.Items[i].SubTotal
    }
    this.TotalDiscount = +totalDiscount.toFixed(this.noOfDecimalPoint)
    this.TotalTaxAmount = +totalTax.toFixed(this.noOfDecimalPoint)
    this.TotalQty = +totalQuantity.toFixed(this.noOfDecimalPoint)
    this.SubTotalAmount = +totalAmount.toFixed(this.noOfDecimalPoint)
    if (!isNaN(totalAmount)) {
      totalAmount = totalAmount + +this.OtherCharge
      if (this.FreightMode === 1) {
        totalAmount = totalAmount + +this.Freight
      }
      this.RoundOff = +(Math.round(totalAmount) - totalAmount).toFixed(this.noOfDecimalPoint)
      this.CessAmount = 0
      this.BillAmount = Math.round(totalAmount)
      this.calculatePaymentAmount()
    }
  }

  @ViewChild('unit_select2') unitSelect2: Select2Component
  onUnitSelect (evt) {
    // console.log('on evt select : ', evt)
    if (evt.value && evt.data.length > 0) {
      if (+evt.value === -1) {
        this.unitSelect2.selector.nativeElement.value = ''
        // console.log(this.unitSettingType)
        if (+this.unitSettingType === 1) {
          this.commonService.openUnit('')
        }
        if (+this.unitSettingType === 2) {
          this.commonService.openCompositeUnit('')
        }
      } else {
        if (evt.value > 0 && evt.data[0] && evt.data[0].text) {
          this.UnitId = +evt.value
          this.unitName = evt.data[0].text
        }
      }
      this.validateItem()
    }
  }

  getPurchaseSetting () {
    let _self = this
    this.commonService.getModuleSettings('purchase').subscribe(
      (data) => {
        console.log('settings data : ', data)
        if (data.Code === UIConstant.THOUSAND && data.Data) {
          // console.log('purchase settings : ', data.Data)
          _self.purchaseService.getAllSettings(data.Data)
        }
      },
      (error) => {
        console.log(error)
      },
      () => {
        this.getSPUtilityData()
        this.getFormDependency()
      }
    )
  }

  @ViewChild('organisation_select2') organisationSelect2: Select2Component
  onChangeOrganisationId (evt) {
    // console.log('on org select : ', evt)
    if (evt.value && evt.data.length > 0) {
      if (evt.value > 0 && evt.data[0] && evt.data[0].text) {
        this.OrgId = +evt.value
        this.getNewBillNo()
      }
      this.checkForValidation()
    }
  }

  @ViewChild('godown_select2') godownSelect2: Select2Component
  onGodownSelect (evt) {
    console.log(evt)
    if (evt.value && evt.data.length > 0) {
      if (evt.value > 0 && evt.data[0] && evt.data[0].text) {
        this.GodownId = +evt.value
      }
      this.checkForValidation()
    }
  }

  @ViewChild('address_select2') addressSelect2: Select2Component
  onAddressSelect (evt) {
    console.log('onAddressSelect : ', evt)
    if (evt.value && evt.data.length > 0) {
      if (+evt.value === -1) {
        this.addressSelect2.selector.nativeElement.value = ''
        if (this.PartyId) {
          this.commonService.openAddress(this.PartyId)
        } else {
          this.toastrService.showError('Please select Vendor', '')
        }
      } else {
        if (evt.value > 0 && evt.data[0] && evt.data[0].text) {
          this.AddressId = +evt.value
          this.checkForGST()
        }
      }
      this.checkForValidation()
    }
  }

  checkForGST () {
    this.isOtherState = true
    this.allAddressData.forEach(element => {
      if (element.Id === this.AddressId && element.StateId === this.clientStateId) {
        this.isOtherState = false
      }
    })

    if (this.Items.length > 0) {
      this.Items.forEach(item => {
        let total = +(isNaN(+item.PurchaseRate) ? 0 : +item.PurchaseRate)
        * (isNaN(+item.Quantity) || +item.Quantity === 0 ? 1 : +item.Quantity)
        * (isNaN(+item.Length) || +item.Length === 0 ? 1 : +item.Length)
        * (isNaN(+item.Width) || +item.Width === 0 ? 1 : +item.Width)
        * (isNaN(+item.Height) || +item.Height === 0 ? 1 : +item.Height)
        if (item.taxRates.length > 0 && total > 0) {
          let discountedAmount = total - item.DiscountAmt
          item.TaxAmount = +(this.purchaseService.taxCalculation(item.taxRates, item.taxSlabType, 
            discountedAmount, this.isOtherState, 7, this.taxSlabName).taxAmount).toFixed(this.noOfDecimalPoint)
        } else {
          item.TaxAmount = 0
        }
      })
    }
    this.calculate()
  }

  onCurrencySelect (evt) {
    // console.log('selected currency : ', evt)
    if (evt.value > 0 && evt.data && evt.data.length > 0 && evt.data[0].text) {
      this.CurrencyId = +evt.value
      this.defaultCurrency = evt.data[0].text
      this.currencyValues[1] = { id: '1', symbol: evt.data[0].text }
      // console.log('currencyValues : ', this.currencyValues)
    }
    this.checkForValidation()
  }

  @ViewChild('referraltype_select2') referraltypeSelect2: Select2Component
  onReferralTypeSelect (evt) {
    // console.log(evt)
    if (evt.value > 0 && evt.data[0] && evt.data[0].text) {
      this.ReferralTypeId = +evt.value
    }
  }

  @ViewChild('taxSlab_select2') taxSlabSelect2: Select2Component
  onTaxSlabSelect (evt) {
    console.log('on change of tax slab : ', evt)
    if (+evt.value === -1) {
      this.commonService.openTax('')
      this.taxSlabSelect2.selector.nativeElement.value = ''
    } else {
      if (evt.value > 0 && evt.data[0] && evt.data[0].text) {
        this.TaxSlabId = +evt.value
        this.taxSlabName = evt.data[0].text
        this.getTaxDetail(this.TaxSlabId)
      }
    }
    this.validateItem()
  }

  getTaxDetail (TaxSlabId) {
    this.purchaseService.getSlabData(TaxSlabId).subscribe(
      data => {
        console.log('tax slab data : ', data)
        if (data.Code === UIConstant.THOUSAND && data.Data) {
          this.taxSlabType = (data.Data.TaxSlabs[0]) ? data.Data.TaxSlabs[0].Type : 0
          this.taxRates = data.Data.TaxRates
          this.calculate()
        }
      }
    )
  }

  @ViewChild('taxType_select2') taxTypeSelect2: Select2Component
  onTaxTypeSelect (evt) {
    console.log('on change of tax Type : ', evt)
    if (+evt.value >= 0 && evt.data[0] && evt.data[0].text) {
      this.TaxType = +evt.value
      this.taxTypeName = evt.data[0].text
      this.calculate()
    }
    this.validateItem()
  }

  ConvertToCurrencyId: number
  onConvertToCurrencySelect (evt) {
    // console.log(evt)
    if (evt.value > 0 && evt.data[0] && evt.data[0].text) {
      this.ConvertToCurrencyId = +evt.value
    }
  }

  @ViewChild('referral_select2') referralSelect2: Select2Component
  onRefferalPartnerSelect (evt) {
    // console.log(evt)
    if (evt.value > 0 && evt.data[0] && evt.data[0].text) {
      this.ReferralId = +evt.value
    }
  }

  @ViewChild('freight_By') freightBySelect2: Select2Component
  onFreightSelect (evt) {
    console.log(evt)
    if (evt.value > 0 && evt.data[0] && evt.data[0].text) {
      this.FreightMode = +evt.value
    }
  }

  @ViewChild('payment_select2') paymentSelect2: Select2Component
  onPaymentModeSelect (event) {
    // console.log('payment method select: ', event)
    if (+event.value > 0 && event.data[0] && event.data[0].text) {
      this.Paymode = event.data[0].text
      this.PayModeId = +event.value
      if (+event.value === 3) {
        this.BankLedgerName = ''
        this.LedgerId = 0
        this.setpaymentLedgerSelect2(0)
      } else if (+event.value === 1) {
        this.paymentLedgerselect2 = [{ id: '1', text: 'Cash' }]
        this.BankLedgerName = 'Cash'
        this.LedgerId = 1
        this.paymentSelect2.setElementValue(this.LedgerId)
      }
    }
    this.validateTransaction()
  }

  enterPressItem (e: KeyboardEvent) {
    this.addItems()
    setTimeout(() => {
      let item = this.catSelect2.find((item: Select2Component, index: number, array: Select2Component[]) => {
        return index === 0
      })
      item.selector.nativeElement.focus()
    }, 10)
  }

  @ViewChild('savebutton') savebutton: ElementRef
  enterPressTrans (e: KeyboardEvent) {
    let paymentTotal = this.getPaymentTotal()
    if (this.BillAmount === paymentTotal) {
      // const element = this.renderer.selectRootElement(this.savebutton.nativeElement, true)
      // setTimeout(() => element.focus({ preventScroll: false }), 0)
      e.preventDefault()
      this.manipulateData()
    } else {
      this.addTransactions()
      setTimeout(() => {
        this.paymentSelect2.selector.nativeElement.focus()
      }, 10)
    }
  }

  setpaymentLedgerSelect2 (i) {
    let _self = this
    let newData = [{ id: '0', text: 'Select Ledger' }, { id: '-1', text: UIConstant.ADD_NEW_OPTION }]
    this.commonService.getPaymentLedgerDetail(9).subscribe(data => {
      // console.log('PaymentModeData : ', data)
      if (data.Code === UIConstant.THOUSAND && data.Data) {
        data.Data.forEach(element => {
          newData.push({
            id: element.Id,
            text: element.Name
          })
        })
      }
      _self.paymentLedgerselect2 = newData
      this.validateTransaction()
    },
    (error) => console.log(error),
    () => {
      if (this.editTransId !== -1 && this.PaymentDetail[i]) {
        this.Paymode = this.PaymentDetail[i].Paymode
        this.PayModeId = this.PaymentDetail[i].PayModeId
        this.LedgerId = this.PaymentDetail[i].LedgerId
        this.BankLedgerName = this.PaymentDetail[i].BankLedgerName
        this.Amount = this.PaymentDetail[i].Amount
        this.PayDate = this.PaymentDetail[i].PayDate
        this.ChequeNo = this.PaymentDetail[i].ChequeNo
        this.paymentSelect2.setElementValue(this.PayModeId)
        this.ledgerSelect2.setElementValue(this.LedgerId)
        this.deleteItem(i, 'trans')
      }
    })
  }

  @ViewChild('ledger_select2') ledgerSelect2: Select2Component
  onPaymentLedgerSelect (event) {
    // console.log('payment ledger id : ', event)
    if (+event.value === -1) {
      this.commonService.openLedger('')
      this.ledgerSelect2.selector.nativeElement.value = ''
    } else {
      if (event.value > 0 && event.data[0] && event.data[0].text) {
        this.LedgerId = +event.value
        this.BankLedgerName = event.data[0].text
      }
    }
    this.validateTransaction()
  }

  getPaymentTotal (): number {
    let paymentTotal = 0
    for (let i = 0; i <= this.PaymentDetail.length - 1; i++) {
      paymentTotal = paymentTotal + +this.PaymentDetail[i].Amount
    }
    if (!this.clickTrans) {
      if (+this.Amount) {
        paymentTotal += +this.Amount
      }
    }
    return paymentTotal
  }
  isValidAmount = true
  checkValidationForAmount () {
    let paymentTotal = this.getPaymentTotal()
    paymentTotal = (isNaN(+paymentTotal)) ? 0 : +paymentTotal
    this.BillAmount = (isNaN(+this.BillAmount)) ? 0 : +this.BillAmount
    if (this.BillAmount !== 0) {
      if (paymentTotal > this.BillAmount) {
        this.toastrService.showError('Error', 'Payment can\'t be more than bill amount')
        this.isValidAmount = false
        return false
      } else {
        this.isValidAmount = true
        return true
      }
    } else {
      return true
    }
  }

  initialiseTransaction () {
    this.Paymode = ''
    this.PayModeId = 0
    this.LedgerId = 0
    this.Amount = 0
    this.PayDate = this.BillDate
    this.ChequeNo = ''
    this.Paymode = ''
    this.BankLedgerName = ''
    if (this.paymentSelect2 && this.paymentSelect2.selector.nativeElement.value) {
      this.paymentSelect2.setElementValue('')
    }
    if (this.ledgerSelect2 && this.ledgerSelect2.selector.nativeElement.value) {
      this.ledgerSelect2.setElementValue('')
    }
  }

  addTransactions () {
    if (this.Paymode && this.PayModeId && this.LedgerId && this.BankLedgerName && this.Amount && this.PayDate) {
      if ((+this.PayModeId === 3 && this.ChequeNo) || (+this.PayModeId === 1)) {
        if (this.checkValidationForAmount()) {
          this.addTransaction()
          this.clickTrans = true
          this.initialiseTransaction()
          // console.log('transactions : ', this.PaymentDetail)
          this.setPayDate()
          this.calculatePaymentAmount()
        }
      } else {
        this.clickTrans = false
        if (+this.PayModeId === 3) {
          if (this.ChequeNo) {
            this.invalidObj['ChequeNo'] = false
          } else {
            this.invalidObj['ChequeNo'] = true
          }
        } else {
          this.invalidObj['ChequeNo'] = false
        }
      }
    }
  }

  addTransaction () {
    if (this.PaymentDetail.length === 0) {
      this.PaymentDetail.push({
        Id: 0,
        Sno: 1,
        Paymode: this.Paymode,
        PayModeId: this.PayModeId,
        LedgerId: this.LedgerId,
        BankLedgerName: this.BankLedgerName,
        Amount: +this.Amount,
        PayDate: this.PayDate,
        ChequeNo: this.ChequeNo
      })
    } else {
      let index = +this.PaymentDetail[this.PaymentDetail.length - 1].Sno + 1
      this.PaymentDetail.push({
        Id: 0,
        Sno: index,
        Paymode: this.Paymode,
        PayModeId: this.PayModeId,
        LedgerId: this.LedgerId,
        BankLedgerName: this.BankLedgerName,
        Amount: this.Amount,
        PayDate: this.PayDate,
        ChequeNo: this.ChequeNo
      })
    }
    setTimeout(() => {
      this.commonService.fixTableHFL('trans-table')
    }, 1)
    if (this.editTransId !== -1) {
      this.PaymentDetail[this.PaymentDetail.length - 1].Id = this.editTransId
    }
  }

  addItems () {
    if (+this.ItemId > 0 && this.validateAttribute() && +this.UnitId > 0 && +this.TaxSlabId > 0 && this.PurchaseRate > 0) {
      if ((this.industryId === 5 && this.BatchNo && this.ExpiryDate && this.MfdDate)
       || (this.industryId === 3 && this.Length && this.Width && this.Height)
       || (this.industryId === 2 || this.industryId === 6)) {
        // if (this.editMode) {
        //   this.calculate()
        // }
        this.addItem()
        this.clickItem = true
        console.log('items : ', this.Items)
        if (!this.editMode) {
          this.calculateAllTotal()
        }
        this.initItem()
        if (this.industryId === 5) {
          this.setExpiryDate()
          this.setMfdDate()
        }
      } else {
        // this.toastrService.showError('Please fill the required fields', '')
      }
    } else {
      // this.clickItem = false
      // this.toastrService.showError('Please fill the required fields', '')
    }
  }

  addItem () {
    this.addItemBasedOnIndustry()
    this.ItemAttributeTrans = this.ItemAttributeTrans.concat(this.itemAttributeTrans)
    console.log('ItemAttributeTrans : ', this.ItemAttributeTrans)
    console.log('Items : ', this.Items)
  }

  addItemBasedOnIndustry () {
    if (this.Items.length === 0) {
      this.Items.push({
        Id: 0,
        Sno: 1,
        TransType: this.TransType,
        TransId: this.TransId,
        ChallanId: this.ChallanId,
        CategoryId: +this.categoryId,
        ItemId: +this.ItemId,
        UnitId: +this.UnitId,
        Length: +this.Length,
        Height: +this.Height,
        Width: +this.Width,
        Quantity: +this.Quantity,
        SaleRate: +this.SaleRate,
        MrpRate: +this.MrpRate,
        PurchaseRate: +this.PurchaseRate,
        TaxSlabId: +this.TaxSlabId,
        TaxType: +this.TaxType,
        TaxAmount: +this.TaxAmount,
        DiscountType: +this.DiscountType,
        Discount: +this.Discount,
        DiscountAmt: +this.DiscountAmt,
        ExpiryDate: this.ExpiryDate,
        MfdDate: this.MfdDate,
        BatchNo: this.BatchNo,
        Remark: this.Remark,
        itemName: this.itemName,
        categoryName: this.categoryName,
        unitName: this.unitName,
        taxSlabName: this.taxSlabName,
        taxTypeName: this.taxTypeName,
        SubTotal: this.SubTotal,
        itemAttributeTrans: this.itemAttributeTrans,
        taxRates: this.taxRates,
        taxSlabType: this.taxSlabType
      })
    } else {
      let index = +this.Items[this.Items.length - 1].Sno + 1
      this.Items.push({
        Id: 0,
        Sno: index,
        TransType: this.TransType,
        TransId: this.TransId,
        ChallanId: this.ChallanId,
        CategoryId: +this.categoryId,
        ItemId: +this.ItemId,
        UnitId: +this.UnitId,
        Length: +this.Length,
        Height: +this.Height,
        Width: +this.Width,
        Quantity: +this.Quantity,
        SaleRate: +this.SaleRate,
        MrpRate: +this.MrpRate,
        PurchaseRate: +this.PurchaseRate,
        TaxSlabId: +this.TaxSlabId,
        TaxType: +this.TaxType,
        TaxAmount: +this.TaxAmount,
        DiscountType: +this.DiscountType,
        Discount: +this.Discount,
        DiscountAmt: +this.DiscountAmt,
        ExpiryDate: this.ExpiryDate,
        MfdDate: this.MfdDate,
        BatchNo: this.BatchNo,
        Remark: this.Remark,
        itemName: this.itemName,
        categoryName: this.categoryName,
        unitName: this.unitName,
        taxSlabName: this.taxSlabName,
        taxTypeName: this.taxTypeName,
        SubTotal: this.SubTotal,
        itemAttributeTrans: this.itemAttributeTrans,
        taxRates: this.taxRates,
        taxSlabType: this.taxSlabType
      })
    }

    setTimeout(() => {
      this.commonService.fixTableHFL('item-table')
    }, 1)

    if (this.editItemId !== -1) {
      this.Items[this.Items.length - 1].Id = this.editItemId
    }
  }

  @ViewChildren('attr_select2') attrSelect2: QueryList<Select2Component>
  editItem (i, editId, type, sno) {
    console.log('editId : ', editId)
    if (type === 'charge' && this.editChargeId === -1) {
      this.editChargeId = editId
      this.editChargeSno = sno
      i = i - 1
      this.LedgerName = this.AdditionalCharges[i].LedgerName
      this.LedgerChargeId = this.AdditionalCharges[i].LedgerChargeId
      this.AmountCharge = this.AdditionalCharges[i].AmountCharge
      this.TaxSlabChargeId = this.AdditionalCharges[i].TaxSlabChargeId
      this.TaxChargeName = this.AdditionalCharges[i].TaxChargeName
      this.TaxAmountCharge = this.AdditionalCharges[i].TaxAmountCharge
      this.TotalAmountCharge = this.AdditionalCharges[i].TotalAmountCharge
      this.TaxTypeCharge = this.AdditionalCharges[i].TaxTypeCharge
      this.taxTypeChargeName = this.AdditionalCharges[i].taxTypeChargeName
      this.appliedTaxRatesCharge = this.AdditionalCharges[i].itemTaxTrans
      this.taxSlabChargeSelect2.setElementValue(this.TaxSlabChargeId)
      this.chargeSelect2.setElementValue(this.LedgerChargeId)
      this.taxTypeChargeSelect2.setElementValue(this.TaxTypeCharge)
      this.deleteItem(i, type)
    } else if (type === 'charge' && this.editChargeId !== -1) {
      this.toastrService.showInfo('', 'There is already one transaction to edit, please update it this first in order to edit others')
    }
    if (type === 'trans' && this.editTransId === -1) {
      this.editTransId = editId
      i = i - 1
      if (+this.PaymentDetail[i].PayModeId === 3) {
        this.paymentSelect2.setElementValue('')
        this.ledgerSelect2.setElementValue('')
        this.setpaymentLedgerSelect2(i)
      } else if (+this.PaymentDetail[i].PayModeId === 1) {
        this.paymentLedgerselect2 = [{ id: '1', text: 'Cash' }]
        this.Paymode = this.PaymentDetail[i].Paymode
        this.PayModeId = this.PaymentDetail[i].PayModeId
        this.LedgerId = this.PaymentDetail[i].LedgerId
        this.BankLedgerName = this.PaymentDetail[i].BankLedgerName
        this.Amount = this.PaymentDetail[i].Amount
        this.PayDate = this.PaymentDetail[i].PayDate
        this.ChequeNo = this.PaymentDetail[i].ChequeNo
        this.paymentSelect2.setElementValue(this.PayModeId)
        this.ledgerSelect2.setElementValue(this.LedgerId)
        this.deleteItem(i, type)
      }
    } else if (type === 'trans' && this.editTransId !== -1) {
      this.toastrService.showInfo('', 'There is already one transaction to edit, please update it this first in order to edit others')
    }
    if (type === 'items' && this.editItemId === -1) {
      this.editItemId = editId
      this.editItemSno = sno
      i = i - 1
      this.TransType = 0
      this.TransId = 0
      this.ChallanId = 0
      this.categoryName = this.Items[i].categoryName
      this.itemName = this.Items[i].itemName
      this.unitName = this.Items[i].unitName
      this.taxSlabName = this.Items[i].taxSlabName
      this.taxTypeName = this.Items[i].taxTypeName
      this.categoryId = this.Items[i].CategoryId
      this.ItemId = this.Items[i].ItemId
      this.UnitId = this.Items[i].UnitId
      this.Length = this.Items[i].Length
      this.Height = this.Items[i].Height
      this.Width = this.Items[i].Width
      this.Quantity = this.Items[i].Quantity
      this.SaleRate = this.Items[i].SaleRate
      this.MrpRate = this.Items[i].MrpRate
      this.PurchaseRate = this.Items[i].PurchaseRate
      this.TaxSlabId = this.Items[i].TaxSlabId
      this.TaxType = this.Items[i].TaxType
      this.TaxAmount = this.Items[i].TaxAmount
      this.DiscountType = this.Items[i].DiscountType
      this.Discount = this.Items[i].Discount
      this.DiscountAmt = this.Items[i].DiscountAmt
      this.ExpiryDate = this.Items[i].ExpiryDate
      this.MfdDate = this.Items[i].MfdDate
      this.BatchNo = this.Items[i].BatchNo
      this.Remark = this.Items[i].Remark
      this.SubTotal = this.Items[i].SubTotal
      this.taxRates = this.Items[i].taxRates
      this.taxSlabType = this.Items[i].taxSlabType
      this.itemAttributeTrans = this.Items[i].itemAttributeTrans
      this.unitSelect2.setElementValue(this.UnitId)
      this.itemselect2.setElementValue(this.ItemId)
      this.taxSlabSelect2.setElementValue(this.TaxSlabId)
      this.taxTypeSelect2.setElementValue(this.TaxType)
      console.log('attrSelect2 : ', this.attrSelect2)
      if (this.attrSelect2.length > 0) {
        this.attrSelect2.forEach((item: Select2Component, index: number, array: Select2Component[]) => {
          console.log('attr : ', item)
          item.setElementValue(this.itemAttributeTrans[index].AttributeId)
        })
      }
      this.updateCategories(this.categoryId)
      this.deleteItem(i, type)
    } else if (type === 'items' && this.editItemId !== -1) {
      this.toastrService.showInfo('', 'There is already one item to edit, please update it this first in order to edit others')
    }
  }

  deleteItem (i, forArr) {
    if (forArr === 'trans') {
      this.PaymentDetail.splice(i,1)
      this.checkValidationForAmount()
      this.editTransId = -1
    }
    if (forArr === 'items') {
      this.Items.splice(i,1)
      this.editItemId = -1
      this.ItemAttributeTrans = []
      this.appliedTaxRatesItem = []
      this.Items.forEach(item => {
        this.ItemAttributeTrans = this.ItemAttributeTrans.concat([], item.itemAttributeTrans)
      })
      // this.Items.forEach(item => {
      //   this.ItemTaxTrans = this.ItemTaxTrans.concat([], item.itemTaxTrans)
      // })
    }
    if (forArr === 'charge') {
      this.AdditionalCharges.splice(i,1)
      this.editChargeId = -1
      this.appliedTaxRatesCharge = []
      this.AdditionalCharges.forEach(charge => {
        this.ItemTaxTrans = this.ItemTaxTrans.concat([], charge.itemTaxTrans)
      })
    }
    this.calculate()
  }

  closePurchase () {
    this.commonService.closePurchase()
  }

  initItem () {
    this.TransType = 0
    this.TransId = 0
    this.ChallanId = 0
    this.ItemId = 0
    this.itemName = ''
    this.UnitId = 0
    this.unitName = ''
    this.categoryName = ''
    this.Length = 1
    this.Height = 1
    this.Width = 1
    this.Quantity = 1
    this.SaleRate = 0
    this.MrpRate = 0
    this.PurchaseRate = 0
    this.DiscountType = 0
    this.Discount = 0
    this.DiscountAmt = 0
    this.TaxSlabId = 0
    this.taxSlabName = ''
    this.TaxType = 0
    this.TaxAmount = 0
    this.ExpiryDate = ''
    this.MfdDate = ''
    this.BatchNo = ''
    this.Remark = ''
    this.categoryId = 0
    this.SubTotal = 0
    this.editItemId = -1
    this.clickItem = false
    console.log('categories : ', this.categories)
    if (this.allCategories && this.allCategories.length > 0) {
      this.getCatagoryDetail(this.allCategories)
    }
    if (this.allItems && this.allItems.length > 0) {
      this.purchaseService.createItems(this.allItems)
    }
    if (this.taxTypeSelect2) {
      this.taxTypeSelect2.setElementValue(this.TaxType)
    }
    if (this.unitSelect2) {
      this.unitSelect2.setElementValue(this.UnitId)
    }
    if (this.itemselect2) {
      this.itemselect2.setElementValue(this.ItemId)
    }
    if (this.taxSlabSelect2) {
      this.taxSlabSelect2.setElementValue(this.TaxSlabId)
    }
    this.taxTypeName = 'Exclusive'
    this.itemAttributeTrans = []
    // console.log('catSelect2 : ', this.catSelect2)
    this.taxRates = []
    this.taxSlabType = 0
    if (this.catSelect2.length > 0) {
      this.catSelect2.forEach((item: Select2Component, index: number, array: Select2Component[]) => {
        // console.log('catSelect2 : ', item)
        item.setElementValue(0)
        item.selector.nativeElement.value = ''
      })
    }
    this.initAttribute()
  }

  initAttribute () {
    this.ItemId = 0
    this.ItemTransId = 0
    this.AttributeId = 0
    this.ParentTypeId = 0
    this.name = ''
    // console.log('attrSelect2 : ', this.attrSelect2)
    if (this.attrSelect2.length > 0) {
      this.attrSelect2.forEach((item: Select2Component, index: number, array: Select2Component[]) => {
        // console.log('attr : ', item)
        if ($('.attr') && $('.attr')[index]) {
          $('#' + $('.attr')[index].id).removeClass('errorSelecto')
        }
        item.setElementValue(0)
      })
    }
  }

  @ViewChild('taxSlabCharge_select2') taxSlabChargeSelect2: Select2Component
  @ViewChild('charge_select2') chargeSelect2: Select2Component
  initCharge () {
    this.LedgerChargeId = 0
    this.LedgerName = ''
    this.AmountCharge = 0
    this.TaxSlabChargeId = 0
    this.TaxChargeName = ''
    this.TaxAmountCharge = 0
    this.TotalAmountCharge = 0
    this.editChargeSno = 0
    this.clickCharge = false
    this.editChargeId = -1
    if (this.taxSlabChargeSelect2) {
      this.taxSlabChargeSelect2.setElementValue('')
    }
    if (this.chargeSelect2) {
      this.chargeSelect2.setElementValue('')
    }
    this.taxTypeChargeName = 'Exclusive'
    this.appliedTaxRatesCharge = []
  }


  initTransaction () {
    this.Paymode = ''
    this.PayModeId = 0
    this.LedgerId = 0
    this.Amount = 0
    this.BankLedgerName = ''
    this.ChequeNo = ''
    this.PayDate = ''
    this.ledger = 0
    this.paymode = 0
    this.clickTrans = false
    this.editTransId = -1
    if (this.ledgerSelect2) {
      this.ledgerSelect2.setElementValue('')
    }
    if (this.paymentSelect2) {
      this.paymentSelect2.setElementValue('')
    }
  }

  initComp () {
    this.BillAmount = 0
    this.BillDate = ''
    this.PartyBillDate = ''
    this.PartyBillNo = ''
    this.BillNo = ''
    this.AddressId = 0
    this.ConvertedAmount = 0
    this.CurrencyRate = 0
    this.TotalDiscount = 0
    this.Freight = 0
    this.FreightMode = 1
    this.PartyId = 0
    this.ReferralId = 0
    this.ReferralTypeId = 0
    this.ReferralComission = 0
    this.ReferralComissionTypeId = 0
    this.ReverseCharge = 0
    this.ReverseTax = 0
    this.Cess = 0
    this.CessAmount = 0
    this.RoundOff = 0
    this.SubTotalAmount = 0
    this.TotalTaxAmount = 0
    this.TotalChallan = 0
    this.VehicleNo = ''
    this.LocationTo = ''
    this.Drivername = ''
    this.Transportation = ''
    this.TotalQty = 0
    this.OtherCharge = 0
    this.GodownId = 0
    this.CurrencyId = 0
    this.ConvertToCurrencyId = 0
    this.OrgId = 0
    this.InterestRate = 0
    this.InterestAmount = 0
    this.InterestType = 0
    this.DueDate = ''
    this.OrderId = 0
    this.Advanceamount = 0
    this.NetAmount = 0
    this.ReferralCommission = 0
    this.ReferralCommissionTypeId = 0
    this.CreditLimit = 0
    this.CreditDays = 0
    this.ItemAttributeTrans = []
    this.PaymentDetail = []
    this.Items = []
    this.clickTrans = false
    this.clickItem = false
    this.submitSave = false
    this.isValidAmount = true
    this.invalidObj = {}
    if (this.freightBySelect2) {
      this.freightBySelect2.setElementValue(1)
    }
    if (this.addressSelect2) {
      this.addressSelect2.setElementValue(0)
    }
    if (this.referraltypeSelect2) {
      this.referraltypeSelect2.setElementValue(0)
    }
    if (this.referralSelect2) {
      this.referralSelect2.setElementValue(0)
    }
    if (this.vendorSelect2) {
      this.vendorSelect2.setElementValue(0)
    }
    if (this.convertToSelect2) {
      this.convertToSelect2.setElementValue(0)
    }
    if (this.currencySelect2) {
      this.currencySelect2.setElementValue(0)
    }
  }

  initialiseExtras () {
    if (this.organisationsData.length > 0) {
      this.OrgId = +this.organisationsData[0].id
      this.organisationValue = +this.organisationsData[0].id
    }
    if (this.godownsData.length === 1) {
      this.GodownId = +this.godownsData[0].id
      this.godownValue = +this.godownsData[0].id
    }
    if (this.currencyData.length >= 1) {
      this.CurrencyId = +this.currencyData[0].id
      this.currencyValue = +this.currencyData[0].id
    }
    if (this.convertToCurrencyData.length >= 1) {
      this.ConvertToCurrencyId = +this.convertToCurrencyData[0].id
      this.convertToCurrencyValue = +this.convertToCurrencyData[0].id
    }
    this.setBillDate()
    this.setPartyBillDate()
    this.setPayDate()
    this.setExpiryDate()
    this.setDueDate(0)
    this.setMfdDate()
  }

  private purchaseAddParams (): PurchaseAdd {
    let BillDate = this.gs.clientToSqlDateFormat(this.BillDate, this.clientDateFormat)
    let PartyBillDate = this.gs.clientToSqlDateFormat(this.PartyBillDate, this.clientDateFormat)
    let DueDate = this.gs.clientToSqlDateFormat(this.DueDate, this.clientDateFormat)
    let Items = JSON.parse(JSON.stringify(this.Items))
    let PaymentDetail = JSON.parse(JSON.stringify(this.PaymentDetail))
    Items.forEach(item => {
      item.ExpiryDate = (item.ExpiryDate) ? this.gs.clientToSqlDateFormat(item.ExpiryDate, this.clientDateFormat) : ''
      item.MfdDate = (item.MfdDate) ? this.gs.clientToSqlDateFormat(item.MfdDate, this.clientDateFormat) : ''
    })
    PaymentDetail.forEach(transaction => {
      transaction.PayDate = this.gs.clientToSqlDateFormat(transaction.PayDate, this.clientDateFormat)
    })

    const purchaseAddParams = {
      obj: {
        Id: this.Id ? this.Id : UIConstant.ZERO,
        ReferralCommissionTypeId : +this.ReferralCommissionTypeId,
        ReferralCommission: +this.ReferralCommission,
        PaymentDetail: PaymentDetail,
        Items: Items,
        BillAmount: this.BillAmount,
        BillDate: BillDate,
        PartyBillDate: PartyBillDate,
        PartyBillNo: this.PartyBillNo,
        BillNo: this.BillNo,
        ConvertedAmount: 0,
        CurrencyRate: 0,
        TotalDiscount: +this.TotalDiscount,
        Freight: +this.Freight,
        FreightMode: +this.FreightMode,
        PartyId: +this.PartyId,
        ReferralId: this.ReferralId,
        ReferralTypeId: this.ReferralTypeId,
        ReferralComission: 0,
        ReferralComissionTypeId: 0,
        ReverseCharge: 0,
        ReverseTax: 0,
        CessAmount: +this.CessAmount,
        RoundOff: this.RoundOff,
        SubTotalAmount: +this.SubTotalAmount,
        TotalTaxAmount: +this.TotalTaxAmount,
        TotalChallan: 0,
        VehicleNo: this.VehicleNo,
        LocationTo: this.LocationTo,
        Drivername: this.Drivername,
        Transportation: this.Transportation,
        TotalQty: +this.TotalQty,
        OtherCharge: +this.OtherCharge,
        GodownId: +this.GodownId,
        CurrencyId: +this.CurrencyId,
        OrgId: +this.OrgId,
        InterestRate: this.InterestRate,
        InterestAmount: 0,
        InterestType: this.InterestType,
        DueDate: DueDate,
        OrderId: 0,
        Advanceamount: 0,
        NetAmount: 0,
        AddressId: this.AddressId,
        ConvertedCurrencyId: this.ConvertToCurrencyId,
        ItemAttributeTrans: this.ItemAttributeTrans
      } as PurchaseAdd
    }
    console.log('obj : ', JSON.stringify(purchaseAddParams.obj))
    return purchaseAddParams.obj
  }

  validateTransaction () {
    if (this.Paymode || +this.PayModeId > 0 || +this.LedgerId > 0 || this.BankLedgerName || +this.Amount > 0 || this.ChequeNo) {
      let isValid = 1
      if (+this.PayModeId > 0) {
        this.invalidObj['PayModeId'] = false
      } else {
        isValid = 0
        this.invalidObj['PayModeId'] = true
      }
      if (+this.LedgerId > 0) {
        this.invalidObj['LedgerId'] = false
      } else {
        isValid = 0
        this.invalidObj['LedgerId'] = true
      }
      if (this.BankLedgerName) {
        this.invalidObj['ledgerName'] = false
      } else {
        isValid = 0
        this.invalidObj['ledgerName'] = true
      }
      if (+this.Amount > 0) {
        this.invalidObj['Amount'] = false
      } else {
        isValid = 0
        this.invalidObj['Amount'] = true
      }
      if (this.PayDate) {
        this.invalidObj['PayDate'] = false
      } else {
        isValid = 0
        this.invalidObj['PayDate'] = true
      }
      if (+this.PayModeId === 3) {
        if (this.ChequeNo) {
          this.invalidObj['ChequeNo'] = false
        } else {
          isValid = 0
          this.invalidObj['ChequeNo'] = true
        }
      } else {
        this.invalidObj['ChequeNo'] = false
      }
      this.validTransaction = !!isValid
    } else {
      this.validTransaction = true
      this.invalidObj['PayModeId'] = false
      this.invalidObj['LedgerId'] = false
      this.invalidObj['ledgerName'] = false
      this.invalidObj['Amount'] = false
      this.invalidObj['PayDate'] = false
      this.invalidObj['ChequeNo'] = false
    }
    this.clickTrans = false
  }

  checkForValidation () {
    if (this.PartyId || this.OrgId || this.BillDate || this.BillNo
      || this.PartyBillDate || this.PartyBillNo || this.CurrencyId
      || this.GodownId || this.AddressId || this.FreightMode
      || this.ItemId || this.UnitId || this.TaxSlabId
      || this.PurchaseRate
      || this.BatchNo || this.ExpiryDate || this.MfdDate
      || this.Length || this.Width || this.Height
      ) {
      let isValid = 1
      if (+this.PartyId > 0) {
        this.invalidObj['PartyId'] = false
      } else {
        this.invalidObj['PartyId'] = true
        isValid = 0
      }
      if (+this.OrgId > 0) {
        this.invalidObj['OrgId'] = false
      } else {
        this.invalidObj['OrgId'] = true
        isValid = 0
      }
      if (this.BillDate) {
        this.invalidObj['BillDate'] = false
      } else {
        this.invalidObj['BillDate'] = true
        isValid = 0
      }
      if (this.BillNo) {
        this.invalidObj['BillNo'] = false
      } else {
        this.invalidObj['BillNo'] = true
        isValid = 0
      }
      if (this.PartyBillDate) {
        this.invalidObj['PartyBillDate'] = false
      } else {
        this.invalidObj['PartyBillDate'] = true
        isValid = 0
      }
      if (this.PartyBillNo) {
        this.invalidObj['PartyBillNo'] = false
      } else {
        this.invalidObj['PartyBillNo'] = true
        isValid = 0
      }
      if (this.CurrencyId) {
        this.invalidObj['CurrencyId'] = false
      } else {
        this.invalidObj['CurrencyId'] = true
        isValid = 0
      }
      if (this.GodownId) {
        this.invalidObj['GodownId'] = false
      } else {
        this.invalidObj['GodownId'] = true
        isValid = 0
      }
      if (this.AddressId) {
        this.invalidObj['AddressId'] = false
      } else {
        this.invalidObj['AddressId'] = true
        isValid = 0
      }
      if (+this.FreightMode > 0) {
        this.invalidObj['FreightMode'] = false
      } else {
        this.invalidObj['FreightMode'] = true
        isValid = 0
      }
      if (this.Items.length === 0 && this.submitSave) {
        isValid = 0
        if (+this.ItemId > 0) {
          this.invalidObj['ItemId'] = false
        } else {
          isValid = 0
          this.invalidObj['ItemId'] = true
        }
        if (+this.UnitId > 0) {
          this.invalidObj['UnitId'] = false
        } else {
          isValid = 0
          this.invalidObj['UnitId'] = true
        }
        if (+this.TaxSlabId > 0) {
          this.invalidObj['TaxSlabId'] = false
        } else {
          isValid = 0
          this.invalidObj['TaxSlabId'] = true
        }
        if (+this.PurchaseRate > 0) {
          this.invalidObj['PurchaseRate'] = false
        } else {
          isValid = 0
          this.invalidObj['PurchaseRate'] = true
        }
        if (+this.Quantity > 0) {
          this.invalidObj['Quantity'] = false
        } else {
          isValid = 0
          this.invalidObj['Quantity'] = true
        }
        if (this.industryId === 5) {
          if (this.BatchNo) {
            this.invalidObj['BatchNo'] = false
          } else {
            isValid = 0
            this.invalidObj['BatchNo'] = true
          }
          if (this.MfdDate) {
            this.invalidObj['MfdDate'] = false
          } else {
            isValid = 0
            this.invalidObj['MfdDate'] = true
          }
          if (this.ExpiryDate) {
            this.invalidObj['ExpiryDate'] = false
          } else {
            isValid = 0
            this.invalidObj['ExpiryDate'] = true
          }
        }
        if (this.industryId === 3) {
          if (+this.Length > 0) {
            this.invalidObj['Length'] = false
          } else {
            isValid = 0
            this.invalidObj['Length'] = true
          }
          if (+this.Height > 0) {
            this.invalidObj['Height'] = false
          } else {
            isValid = 0
            this.invalidObj['Height'] = true
          }
          if (+this.Width > 0) {
            this.invalidObj['Width'] = false
          } else {
            isValid = 0
            this.invalidObj['Width'] = true
          }
        }
        this.attrSelect2.forEach((attr: Select2Component, index: number, array: Select2Component[]) => {
          if (this.itemAttributeTrans[index] && this.itemAttributeTrans[index].AttributeId > 0) {
            $('#' + $('.attr')[index].id).removeClass('errorSelecto')
          } else {
            isValid = 0
            $('#' + $('.attr')[index].id).addClass('errorSelecto')
          }
        })
      }
      return !!isValid
    }
  }

  validateItem () {
    if (+this.ItemId > 0) {
      let isValid = 1
      if (+this.ItemId > 0) {
        this.invalidObj['ItemId'] = false
      } else {
        isValid = 0
        this.invalidObj['ItemId'] = true
      }
      if (+this.UnitId > 0) {
        this.invalidObj['UnitId'] = false
      } else {
        isValid = 0
        this.invalidObj['UnitId'] = true
      }
      if (+this.TaxSlabId > 0) {
        this.invalidObj['TaxSlabId'] = false
      } else {
        isValid = 0
        this.invalidObj['TaxSlabId'] = true
      }
      if (+this.PurchaseRate > 0) {
        this.invalidObj['PurchaseRate'] = false
      } else {
        isValid = 0
        this.invalidObj['PurchaseRate'] = true
      }
      if (+this.Quantity > 0) {
        this.invalidObj['Quantity'] = false
      } else {
        isValid = 0
        this.invalidObj['Quantity'] = true
      }
      if (this.industryId === 5) {
        if (this.BatchNo) {
          this.invalidObj['BatchNo'] = false
        } else {
          isValid = 0
          this.invalidObj['BatchNo'] = true
        }
        if (this.MfdDate) {
          this.invalidObj['MfdDate'] = false
        } else {
          isValid = 0
          this.invalidObj['MfdDate'] = true
        }
        if (this.ExpiryDate) {
          this.invalidObj['ExpiryDate'] = false
        } else {
          isValid = 0
          this.invalidObj['ExpiryDate'] = true
        }
      }
      if (this.industryId === 3) {
        if (+this.Length > 0) {
          this.invalidObj['Length'] = false
        } else {
          isValid = 0
          this.invalidObj['Length'] = true
        }
        if (+this.Height > 0) {
          this.invalidObj['Height'] = false
        } else {
          isValid = 0
          this.invalidObj['Height'] = true
        }
        if (+this.Width > 0) {
          this.invalidObj['Width'] = false
        } else {
          isValid = 0
          this.invalidObj['Width'] = true
        }
      }
      this.attrSelect2.forEach((attr: Select2Component, index: number, array: Select2Component[]) => {
        if (this.itemAttributeTrans[index] && this.itemAttributeTrans[index].AttributeId > 0) {
          $('#' + $('.attr')[index].id).removeClass('errorSelecto')
        } else {
          isValid = 0
          $('#' + $('.attr')[index].id).addClass('errorSelecto')
        }
      })
      this.validItem = !!isValid
    } else {
      this.validItem = true
      this.invalidObj['Height'] = false
      this.invalidObj['Width'] = false
      this.invalidObj['Length'] = false
      this.invalidObj['ExpiryDate'] = false
      this.invalidObj['MfdDate'] = false
      this.invalidObj['BatchNo'] = false
      this.invalidObj['Quantity'] = false
      this.invalidObj['PurchaseRate'] = false
      this.invalidObj['TaxSlabId'] = false
      this.invalidObj['UnitId'] = false
      this.invalidObj['ItemId'] = false
      this.attrSelect2.forEach((attr: Select2Component, index: number, array: Select2Component[]) => {
        if (this.itemAttributeTrans[index] && this.itemAttributeTrans[index].AttributeId > 0) {
          $('#' + $('.attr')[index].id).removeClass('errorSelecto')
        }
      })
    }
  }

  validateAttribute () {
    let isValid = true
    this.attrSelect2.forEach((attr: Select2Component, index: number, array: Select2Component[]) => {
      if (this.itemAttributeTrans[index] && this.itemAttributeTrans[index].AttributeId > 0) {
        //
      } else {
        isValid = false
      }
    })
    return isValid
  }

  manipulateData () {
    let _self = this
    this.submitSave = true
    let dataToSend = this.purchaseAddParams()
    let valid = 1
    this.commonService.checkForExistence(this.checkForExistence, dataToSend).subscribe(
      (data) => {
        console.log('existence : ', data)
        if (data.Code === UIConstant.THOUSAND && data.Data) {
          data.Data.forEach(element => {
            if (+element.Status === 1) {
              this.invalidObj[element.FormKeyName] = true
              valid = 0
            }
          })
        }
      },
      (error) => {
        console.log(error)
      },
      () => {
        this.addItems()
        this.addTransactions()
        this.calculateAllTotal()
        this.validateItem()
        this.validateTransaction()
        this.checkValidationForAmount()
        if (valid) {
          if (this.checkForValidation() && this.isValidAmount && this.validItem && this.validTransaction) {
            this.purchaseService.postPurchase(this.purchaseAddParams()).subscribe(
              data => {
                console.log('data : ', data)
                if (data.Code === UIConstant.THOUSAND && data.Data) {
                  _self.toastrService.showSuccess('Saved Successfully', '')
                  _self.commonService.newPurchaseAdd()
                  if (!this.keepOpen) {
                    _self.commonService.closePurchase()
                  } else {
                    _self.initItem()
                    _self.initTransaction()
                    _self.initComp()
                    _self.initialiseExtras()
                  }
                } else if (data.Code === UIConstant.THOUSANDONE) {
                  _self.toastrService.showError(data.Message, 'Please change Bill No.')
                } else {
                  _self.toastrService.showError(data.Message, '')
                }
              }
            )
          }
        } else {
          this.toastrService.showError('The following are not unique', '')
        }
      }
    )
  }

  ngOnDestroy () {
    this.unitAdd$.unsubscribe()
    this.attr$.unsubscribe()
    this.item$.unsubscribe()
    this.vendorData$.unsubscribe()
    this.taxProcessesData$.unsubscribe()
    this.paymentModesData$.unsubscribe()
    this.organisationsData$.unsubscribe()
    this.godownsData$.unsubscribe()
    this.referralTypesData$.unsubscribe()
    this.referralsData$.unsubscribe()
    this.taxSlabsData$.unsubscribe()
    this.currencyData$.unsubscribe()
    this.addressData$.unsubscribe()
    this.newVendAdd$.unsubscribe()
    this.addressAdd$.unsubscribe()
    this.itemAdd$.unsubscribe()
    this.taxAdd$.unsubscribe()
    this.unitAdd$.unsubscribe()
    this.ledgerAdd$.unsubscribe()
    this.settingData$.unsubscribe()
    this.freightData$.unsubscribe()
    this.subUnitsData$.unsubscribe()
  }

  @ViewChild('loc_ref') locRef: ElementRef
  moveToLoc () {
    this.locRef.nativeElement.focus({ preventScroll: false })
  }

  validateCharge () {
    if (this.LedgerName || +this.LedgerChargeId > 0 || +this.TaxSlabChargeId > 0 || +this.AmountCharge > 0) {
      let isValid = 1
      if (+this.LedgerChargeId > 0) {
        this.invalidObj['LedgerChargeId'] = false
      } else {
        isValid = 0
        this.invalidObj['LedgerChargeId'] = true
      }
      if (+this.TaxSlabChargeId > 0) {
        this.invalidObj['TaxSlabChargeId'] = false
      } else {
        isValid = 0
        this.invalidObj['TaxSlabChargeId'] = true
      }
      if (+this.AmountCharge > 0) {
        this.invalidObj['AmountCharge'] = false
      } else {
        isValid = 0
        this.invalidObj['AmountCharge'] = true
      }
      this.validCharge = !!isValid
    } else {
      this.validCharge = true
      this.invalidObj['LedgerChargeId'] = false
      this.invalidObj['TaxSlabChargeId'] = false
      this.invalidObj['AmountCharge'] = false
    }
    this.clickCharge = false
  }

  addCharge () {
    if (this.LedgerName && +this.LedgerChargeId > 0 && +this.TaxSlabChargeId > 0 && +this.AmountCharge > 0) {
      this.addCustomCharge()
      this.clickCharge = true
      this.initCharge()
      console.log('charge : ', this.AdditionalCharges)
    }
  }

  addCustomCharge () {
    let index = 0
    if (this.AdditionalCharges.length === 0) {
     index = 1
    } else {
      index = +this.AdditionalCharges[this.AdditionalCharges.length - 1].Sno + 1
    }
    this.AdditionalCharges.push({
      Id: 0,
      Sno: index,
      LedgerChargeId: this.LedgerChargeId,
      LedgerName: this.LedgerName,
      AmountCharge: this.AmountCharge,
      TaxSlabChargeId: this.TaxSlabChargeId,
      TaxChargeName: this.TaxChargeName,
      TaxAmountCharge: this.TaxAmountCharge,
      TotalAmountCharge: this.TotalAmountCharge,
      TaxTypeCharge: this.TaxTypeCharge,
      taxTypeChargeName: this.taxTypeChargeName,
      itemTaxTrans: this.appliedTaxRatesCharge
    })
    setTimeout(() => {
      this.commonService.fixTableHFL('charge-table')
    }, 1)
    if (this.editChargeId !== -1) {
      this.AdditionalCharges[this.AdditionalCharges.length - 1].Id = this.editChargeId
    }
  }

  onChargeSelect (evt) {
    console.log('on change of charge : ', evt)
    if (+evt.value === -1) {
      // this.commonService.openTax('')
      // this.taxSlabSelect2.selector.nativeElement.value = ''
    } else {
      if (evt.value > 0) {
        this.LedgerChargeId = +evt.value
        this.LedgerName = evt.data[0].text
        this.getTaxDetail(this.TaxSlabId)
      }
    }
    this.validateCharge()
    this.calculate()
  }

  onTaxSlabChargeSelect (evt) {
    console.log('on change of tax slab : ', evt)
    if (+evt.value === -1) {
      this.commonService.openTax('')
      this.taxSlabChargeSelect2.selector.nativeElement.value = ''
    } else {
      if (evt.value > 0 && evt.data[0] && evt.data[0].text) {
        this.TaxSlabChargeId = +evt.value
        this.TaxChargeName = evt.data[0].text
        this.TaxSlabName = evt.data[0].text
        this.getTaxChargeDetail(this.TaxSlabChargeId)
      }
    }
    this.validateCharge()
  }

  getTaxChargeDetail (TaxSlabId) {
    this.purchaseService.getSlabData(TaxSlabId).subscribe(
      data => {
        console.log('tax slab data : ', data)
        if (data.Code === UIConstant.THOUSAND && data.Data) {
          this.taxChargeSlabType = (data.Data.TaxSlabs[0]) ? data.Data.TaxSlabs[0].Type : 0
          this.taxChargeRates = data.Data.TaxRates
          this.calculate()
          this.createTaxes(data.Data, 22)
        }
      }
    )
  }

  createTaxes (tax, parentType) {
    // this.TaxTypeTax = (tax.TaxSlabs[0]) ? tax.TaxSlabs[0].Type : 0
    // let taxRates = tax.TaxRates
    // let Sno = 0
    // if (this.editChargeId !== -1) {
    //   Sno = this.editSno
    // } else {
    //   if (this.AdditionalCharges.length === 0) {
    //     Sno = 1
    //   } else {
    //     Sno = this.AdditionalCharges[this.AdditionalCharges.length - 1].Sno + 1
    //   }
    // }
    // let taxRatesToDelete
    // if (this.itemTaxTrans.length > 0) {
    //   taxRatesToDelete = this.itemTaxTrans.find(taxRate => taxRate.ItemTransTaxId === Sno && taxRate.ParentTypeTaxId === parentType)
    //   while (taxRatesToDelete) {
    //     this.itemTaxTrans = this.purchaseService.removeByAttr(this.itemTaxTrans, 'ItemTransTaxId', Sno)
    //     taxRatesToDelete = this.itemTaxTrans.find(taxRate => taxRate.ItemTransTaxId === Sno && taxRate.ParentTypeTaxId === parentType)
    //   }
    // }
    // this.itemTaxTrans = []
    // taxRates.forEach((element) => {
    //   let taxRate = []
    //   taxRate.push(element)
    //   console.log(this.itemTaxTrans)
    //   this.itemTaxTrans.push({
    //     TaxTypeTax: this.TaxTypeTax,
    //     AmountTax: (this.TaxTypeCharge === 1) ?
    //                 +(this.purchaseService.taxCalCulationForInclusive(this.taxChargeRates,
    //                 this.TaxTypeTax, +this.AmountCharge, this.isOtherState, 22)).toFixed(this.noOfDecimalPoint) :
    //                 +(this.purchaseService.taxCalculation(this.taxChargeRates, this.TaxTypeTax, +this.AmountCharge,
    //                 this.isOtherState, 22)).toFixed(this.noOfDecimalPoint),
    //     ItemTransTaxId: Sno,
    //     ParentTaxId: 0,
    //     ParentTypeTaxId: parentType,
    //     ItemTransTypeTax: 0,
    //     TaxRateId: element.Id,
    //     TaxRate: element.TaxRate,
    //     ValueType: element.ValueType,
    //     TaxSlabName: this.TaxSlabName,
    //     TaxRateNameTax: element.Name,
    //     id: 0
    //   })
    // });

    let Sno = 0
    if (parentType === 22) {
      if (this.editChargeId !== -1) {
        Sno = this.editChargeSno
      } else {
        if (this.AdditionalCharges.length === 0) {
          Sno = 1
        } else {
          Sno = this.AdditionalCharges[this.AdditionalCharges.length - 1].Sno + 1
        }
      }
      if (this.appliedTaxRatesCharge.length > 0) {
        this.appliedTaxRatesCharge.forEach((taxRate) => {
          taxRate['ItemTransTaxId'] = Sno
        })
      }
      let charge = this.AdditionalCharges.find((charge) => charge.Sno === Sno)
      if (charge) {
        charge.itemTaxTrans = this.appliedTaxRatesCharge
      }
      console.log('tax rates applied : ', this.appliedTaxRatesCharge)
    } else if (parentType === 7) {
      if (this.editItemId !== -1) {
        Sno = this.editItemSno
      } else {
        if (this.Items.length === 0) {
          Sno = 1
        } else {
          Sno = this.Items[this.Items.length - 1].Sno + 1
        }
      }
      if (this.appliedTaxRatesItem.length > 0) {
        this.appliedTaxRatesItem.forEach((taxRate) => {
          taxRate['ItemTransTaxId'] = Sno
        })
      }
      let item = this.Items.find((item) => item.Sno === Sno)
      if (item) {
        item['itemTaxTrans'] = this.appliedTaxRatesItem
      }
      console.log('tax rates applied : ', this.appliedTaxRatesItem)
    }
  }

  // updateTaxes (parentType) {
  //   if (parentType === 22) {
  //     for (let i = 0; i < this.appliedTaxRatesCharge.length; i++) {
  //       this.appliedTaxRatesCharge[i].ItemId = this.ItemId
  //     }
  //   } else if (parentType === 7) {
  //     for (let i = 0; i < this.appliedTaxRatesItem.length; i++) {
  //       this.appliedTaxRatesItem[i].ItemId = this.ItemId
  //     }
  //   }
  // }

  @ViewChild('taxTypecharge_select2') taxTypeChargeSelect2: Select2Component
  onTaxTypeChargeSelect (evt) {
    console.log('on change of tax Type charge : ', evt)
    if (+evt.value >= 0 && evt.data[0] && evt.data[0].text) {
      this.TaxTypeCharge = +evt.value
      this.taxTypeChargeName = evt.data[0].text
      this.calculate()
    }
  }
}



    // if (this.Items.length > 0) {
    //   this.Items.forEach(item => {
    //     let total = +(isNaN(+item.PurchaseRate) ? 0 : +item.PurchaseRate)
    //     * (isNaN(+item.Quantity) || +item.Quantity === 0 ? 1 : +item.Quantity)
    //     * (isNaN(+item.Length) || +item.Length === 0 ? 1 : +item.Length)
    //     * (isNaN(+item.Width) || +item.Width === 0 ? 1 : +item.Width)
    //     * (isNaN(+item.Height) || +item.Height === 0 ? 1 : +item.Height)
    //     if (item.taxRates.length > 0 && total > 0) {
    //       let discountedAmount = total - item.DiscountAmt
    //       item.TaxAmount = +(this.purchaseService.taxCalculation(item.taxRates, item.taxSlabType, 
    //         discountedAmount, this.isOtherState, 7, this.taxSlabName).taxAmount).toFixed(this.noOfDecimalPoint)
    //     } else {
    //       item.TaxAmount = 0
    //     }
    //   })
    // }


    <html><head><title>' + title + '</title><style>
    @media print {.hidden-print {display: none !important;}}
    @import url("https://fonts.googleapis.com/css?family=Open+Sans&display=swap");
    .clearfix:after{content:"";display:table;clear:both}a{color:#0087c3;text-decoration:none}body{position:relative;width:21cm;height:29.7cm;margin:0 auto;color:#000;background:#fff;font-family:Open Sans;font-size:11px}.row{display:-ms-flexbox;display:flex;-ms-flex-wrap:wrap;flex-direction:row}.col{-ms-flex-preferred-size:0;-ms-flex-positive:1;padding-left:10px;max-width:100%}.row1{display:-ms-flexbox;display:flex;-ms-flex-wrap:wrap;flex-direction:row;flex-wrap:wrap;margin-right:1px;margin-left:0}.col1{-ms-flex-preferred-size:0;flex-basis:0;-ms-flex-positive:1;flex-grow:1;max-width:100%}header{padding:10px 0}.header1{padding:1px 0;border-top:1px solid #333;border-bottom:1px solid #333}#logo{float:left;margin-top:8px}#logo img{height:70px}#company{float:right;text-align:right}#client{padding-left:6px;float:left}#client .to{color:#333}h2.name{font-size:1.4em;font-weight:600;margin:0}#invoice{float:right;text-align:right}#invoice h1{color:#0087c3;font-size:2.4em;line-height:1em;font-weight:400;margin:0 0 10px 0}#invoice .date{font-size:1.1em;color:#000}table{width:100%;border-collapse:collapse;border-spacing:0;margin-bottom:5px}table td,table th{padding:1px;vertical-align:bottom;text-align:center;font-size:11px;word-break:break-all}table th{white-space:nowrap;font-weight:700}table td{text-align:left}table td h3{color:#000;font-size:1em;font-weight:600;margin:0 0 .2em 0}table .no{color:#000}table .desc{text-align:left}table .total{color:#000;text-align:right}table td.qty,table td.total,table td.unit{font-size:1em}table tfoot td{background:#fff;border-bottom:none;font-weight:600;text-align:right;white-space:nowrap;margin-top:100px}table tfoot tr:first-child td{border-top:none}table tfoot tr:last-child td{border-top:1px solid #333}.table1 tbody tr td,.table1 thead tr th{border:1px solid #333;word-break:break-all}#thanks{font-size:2em;margin-bottom:50px}#notices{padding-left:6px;border-left:6px solid #0087c3}#notices .notice{font-size:1.2em}footer{color:#000;width:100%;height:30px;position:absolute;bottom:60px;border-top:1px solid #aaa;padding:8px 0;text-align:center}.name-footer{text-align:left;margin:0;font-size:12px;padding-left:10px}.tbl_footer tr td{text-align:right}.tbl_footer tr td.total{text-align:right;font-weight:700;width:120px}.total_word{padding:4px;border-top:1px solid #333}.terms_section { color: #000;width: 100%; position: absolute;bottom: 115px; border-top: 1px solid #aaa;padding:0;}.tbl_fix_height { min-height: 320px;border-bottom:1px solid #333;}</style></head><body>













































    <main class="main-content bgc-grey">
  <div id="mainContent">
    <div class="page-header p-0">
      <div class="container-fluid">
        <div class="row">
          <div class="col-md-4 left_side_head">
            <p class="heading_lead c-grey-900 mb-0"><i class="fas fa-shopping-cart" aria-hidden="true"></i>{{title}}</p>
          </div>
          <div class="col-md-8 right_saerch_side p-0">
            <div class="mr-2">
              <form [formGroup]="searchForm">
                <div id="custom-search-input" class="btn_header1">
                  <div class="input-group col-md-12">
                    <input type="text" class="form-control input-lg" placeholder="Search"
                    formControlName="searchKey"
                    #searchData
                    />
                    <span class="input-group-btn">
                      <a>
                        <i class="fas fa-search"></i>
                      </a>
                    </span>
                  </div>
                </div>
              </form>
            </div>
            <div class="btn_header">
              <a>
                <img src="assets/img/printer.png">
              </a>
              <a>
                <img src="assets/img/pdf.png"></a>
              <a>
                <img src="assets/img/excel.png"></a>
              <button type="button" class="btn btn-primary waves-effect waves-light" (click)="openPurchase()" >New {{title}}</button>
              <a (click)="toggleSearch()" class="btn btn-info" data-toggle="collapse"><i class="fas fa-search"></i>Search</a>
            </div>
          </div>
        </div>
      </div>
    </div>
    <app-purchase-search [toShow]="toShowSearch" ></app-purchase-search>
    <app-purchase-list></app-purchase-list>
  </div>
</main>

<app-purchase #purchase_add ></app-purchase>

<div class="modal" id="purchase_print_id">
  <div id="page-wrap" *ngFor="let printData of printData1;let i = index;let last = last;" >
    <div style="width:100%; border: 1px solid #000; overflow: auto;">
      <div style="width:39%; padding: 20px 0 6px 10px; float:left">
        <img src="{{orgImage}}" style="width: 58%;max-height: 120px;">
      </div>
      <div style="width:59%;float:left">
        <h4 align="center" style="margin-bottom:3px;text-align:right;" *ngIf="printData && printData.ClientInfos">
          {{printData.ClientInfos[0]?.OfficeName}}
        </h4>
        <h1 align="center" style="font-size:14px; margin:0px;text-align:right;" *ngIf="printData && printData.AddressDetailsOrg" >
          {{printData.AddressDetailsOrg}}&nbsp;
        </h1>
        <h1 align="center" style="font-size:14px; margin:0px;text-align:right;" *ngFor="let mob of printData.ContactInfosOrg;" >
          {{mob.ContactNo}},&nbsp;</h1>
        <h1 align="center" style="font-size:14px; margin:0px;text-align:right;" *ngFor="let email of printData.EmailsOrg;last as isLast" >
          {{email.EmailAddress}}<span *ngIf="!isLast" >,&nbsp;</span>
        </h1>
        <br>
        <h1 align="center" style="font-size:14px; margin:0px;text-align:right;" *ngIf="printData && printData.ClientInfos" >{{printData.ClientInfos[0]?.GstinNo}}</h1>
      </div>
    </div>
    <div style="clear:both"></div>
    <div class="invoice" style="margin:0px;">
      <div id="header">INVOICE</div>
      <div id="identity">
        <div class="invoiveN">
          <table class="invoice_table" width="100%">
            <tbody>
              <tr>
                <td style="max-width:25%;text-align:left;" >Invoice No</td>
                <td style="max-width:25%;text-align:left;" *ngIf="printData && printData.PurchaseTransactions">{{printData.PurchaseTransactions[0].BillNo}}</td>
                <td style="max-width:25%;text-align:left;" >Location</td>
                <td style="max-width:25%;text-align:left;" *ngIf="printData && printData.PurchaseTransactions" >{{printData.PurchaseTransactions[0]?.LocationTo }}</td>
              </tr>
              <tr>
                <td style="max-width:25%;text-align:left;" >Party Invoice No</td>
                <td style="max-width:25%;text-align:left;" *ngIf="printData && printData.PurchaseTransactions">{{printData.PurchaseTransactions[0].PartyBillNo}}</td>
                <td style="max-width:25%;text-align:left;" >Transportation</td>
                <td style="max-width:25%;text-align:left;" *ngIf="printData && printData.PurchaseTransactions">{{printData.PurchaseTransactions[0]?.Transportation }}</td>
              </tr>
              <tr>
                <td style="max-width:25%;text-align:left;" >Invoice Date</td>
                <td style="max-width:25%;text-align:left;" *ngIf="printData && printData.PurchaseTransactions">{{printData.PurchaseTransactions[0].BillDate | dateFormat: clientDateFormat}}</td>
                <td style="max-width:25%;text-align:left;" >Driver Name</td>
                <td style="max-width:25%;text-align:left;" *ngIf="printData && printData.PurchaseTransactions" >{{printData.PurchaseTransactions[0]?.Drivername }}</td>
              </tr>
              <tr>
                <td style="max-width:25%;text-align:left;" >Party Invoice Date</td>
                <td style="max-width:25%;text-align:left;" *ngIf="printData && printData.PurchaseTransactions" >{{printData.PurchaseTransactions[0].PartyBillDate | dateFormat: clientDateFormat}}</td>
                <td style="max-width:25%;text-align:left;" >Vehicle No</td>
                <td style="max-width:25%;text-align:left;" *ngIf="printData && printData.PurchaseTransactions">{{printData.PurchaseTransactions[0]?.VehicleNo }}</td>
              </tr>
            </tbody>
          </table>
        </div>
        <div class="logo">
          <table class="invoice_table" width="100%">
          </table>
        </div>
      </div>
      <div style="clear:both"></div>
      <div class="bill">
        <div id="header12">Details of Sender</div>
        <table class="billT" width="100%">
          <tbody>
            <tr>
              <td>
                <table class="invoice_table" width="100%">
                  <tbody>
                    <tr *ngIf="printData && printData.PurchaseTransactions" >
                      <td>Name</td>
                      <td colspan="2">
                        <b *ngIf="printData.PurchaseTransactions" >
                          {{printData.PurchaseTransactions[0]?.LedgerName}}&nbsp;
                          <span *ngIf="printData.ClientInfos.length > 0 && printData.Emails.length > 0" >(</span>
                          <span *ngFor="let mob of printData.ClientInfos;first as isFirst" >
                            <span *ngIf="mob.ContactNo" >
                              {{mob.ContactNo}},&nbsp;
                            </span>
                          </span>
                          <span *ngFor="let email of printData.Emails;last as isLast" >
                            {{email.EmailAddress}}
                            <span *ngIf="!isLast" >,&nbsp;</span>
                          </span>
                          <span *ngIf="printData.Emails.length > 0" >)</span>
                        </b>
                      </td>
                    </tr>
                    <tr *ngIf="printData && printData.AddressDetails" >
                      <td>Address</td>
                      <td colspan="2">
                        {{printData.AddressDetails}}
                      </td>
                    </tr>
                    <tr *ngIf="printData && printData.ClientInfos" >
                      <td>GSTin</td>
                      <td colspan="2">{{printData.PurchaseTransactions[0]?.PartyGstinNo}}</td>
                    </tr>
                  </tbody>
                </table>
              </td>
            </tr>
          </tbody>
        </table>
      </div>
    </div>
    <div style="clear:both"></div>
    <div class="invoice" style="margin:0px;">
      <div style="clear:both"></div><!-- style="max-height:500px;min-height: 500px"-->
      <div class="mainT">
        <table class="record" width="100%" cellspacing="0" cellpadding="3" style="border-bottom: 1px solid #000;">
          <tbody id="main-con" >
            <tr>
              <th style="width:5%;">S.N.</th>
              <th style="width:20%;">Category</th>
              <th style="width:10%;">Item</th>
              <th>HSN</th>
              <th *ngFor="let key of attributeKeys;" >{{key.AttributeValueName}}</th>
              <th style="text-align:right;">Qty</th>
              <ng-container *ngIf="industryId === 3" >
                <th style="text-align:right;">Length</th>
                <th style="text-align:right;">Width</th>
                <th style="text-align:right;">Height</th>
              </ng-container>
              <th style="text-align:right;">Rate</th>
              <th style="text-align:right;">Mrp</th>
              <ng-container *ngIf="industryId === 5" >
                <th>Batch No</th>
                <th>Mfd Date</th>
                <th>Expiry Date</th>
              </ng-container>
              <th style="text-align:right">Total</th>
            </tr>
            <tr *ngFor="let item of printData.ItemTransactions.data; let j=index; let jLast = last;">
              <td>{{(j+1) + (printData.ItemTransactions.page * i)}}</td>
              <td class="cat-con" >{{ item.CategoryName}}</td>
              <td class="cat-con" >{{item.ItemName}}</td>
              <td>{{item.HsnNo}}</td>
              <td *ngFor="let attr of item.itemAttributes" >{{attr.AttributeName}}</td>
              <td style="text-align:right;">{{item.Quantity}}</td>
              <ng-container *ngIf="industryId === 3" >
                <td style="text-align:right;">{{item.Length}}</td>
                <td style="text-align:right;">{{item.Width}}</td>
                <td style="text-align:right;">{{item.Height}}</td>
              </ng-container>
              <td style="text-align:right;">{{item.PurchaseRate}}</td>
              <td style="text-align:right;">{{item.MrpRate}}</td>
              <ng-container *ngIf="industryId === 5" >
                <td>{{item.BatchNo}}</td>
                <td >{{item.MfdDate | dateFormat : clientDateFormat}}</td>
                <td>{{item.ExpiryDate | dateFormat : clientDateFormat}}</td>
              </ng-container>
              <td style="text-align:right;">{{item.SubTotalAmount}}</td>
            </tr>
          </tbody>
        </table>
      </div>
      <div style="clear:both"></div>
    </div>
    <div style="clear:both"></div>
    <!-- <div *ngIf="!last" style="max-width: 250px;min-width: 250px;margin:0px; position: relative;width:100%;" ></div> -->
    <div [hidden]="!last" class="invoice" style="margin:0px; position: relative;min-height: 250px;max-height: 250px; width:100%;">
      <div class="amount" style="width:50%; float:left; bottom: 0px; position: absolute;">
      </div>
      <div class="logo" style="bottom: 0px; position: absolute; right: 0px;">
        <table width="100%" class="payment">
          <tbody>
            <tr style="background:#e9e9ea">
              <th>Sub Total Amount</th>
              <th style="text-align:right" *ngIf="printData && printData.PurchaseTransactions" >{{printData && printData.PurchaseTransactions[0]?.SubTotalAmount}}</th>
            </tr>
            <tr style="background:#e9e9ea; font-weight:bold;">
              <th>Discount</th>
              <th style="text-align:right" *ngIf="printData && printData.PurchaseTransactions" >{{printData && printData.PurchaseTransactions[0]?.Discount}}</th>
            </tr>
            <tr *ngFor="let charge of printData.AdditionalChargeDetails;" >
              <th>Charge @ {{charge.LedgerName}}</th>
              <th style="text-align:right" *ngIf="charge.AmountCharge" >{{charge.AmountCharge}}</th>
            </tr>
            <!-- <tr style="background:#e9e9ea" *ngFor="let tax of printData.ItemTaxTransDetails">
              <th>Tax @ {{tax.Name}}</th>
              <th style="text-align:right" *ngIf="tax.Amount" >{{tax.Amount}}</th>
            </tr> -->
            <tr style="background:#e9e9ea">
              <th>Tax Amount </th>
              <th style="text-align:right" *ngIf="printData && printData.PurchaseTransactions">{{printData.PurchaseTransactions[0]?.TaxAmount}}</th>
            </tr>
          </tbody>
        </table>
      </div>
      <div style="clear:both"></div>
    </div>
    <div class="amount" *ngIf="last" style="border-bottom: 1px solid #000; border-left:1px solid #000; border-right:1px solid #000; min-height: 125px; max-height: 125px; width:100%;">
      <div class="invoiveN"></div>
      <div class="logo">
        <table class="payment" style="width: 100%;">
          <tbody>
            <tr style="background:#e9e9ea; font-weight:bold;">
              <th>BillAmount</th>
              <th style="text-align:right" *ngIf="printData && printData.PurchaseTransactions" >{{printData.PurchaseTransactions[0]?.BillAmount}}</th>
            </tr>
            <tr>
              <td colspan="2"><b>Total Invoice Amount in Words</b> </td>
            </tr>
            <tr>
              <td style="font-weight: bold;" colspan="2">{{word}}-Only </td>
            </tr>
          </tbody>
        </table>
      </div>
      <div style="display:inline-flex; width:100%;">
        <div class="invoiveN" style="width: 56.5%;
          float: left; font-size: 14px;
          padding: 13px;">
          <h3 style="margin: 0px;">Term and Condition:</h3>
          There is various terms & Condition according to rule of GOVT.
        </div>
        <div class="invoiveN" style="width: 40%;
          float: right; text-align:right; font-size: 14px;
          padding: 13px;">
          <h3 style="margin: 0px;" >For, {{printData.ClientInfos[0]?.OfficeName}}</h3>
          Authorised Signatory
        </div>
      </div>
      <div style="clear:both"></div>
    </div>
    <div style="clear:both"></div>
    <div class="invoice" style="margin:0px;">
      <div style="clear:both"></div><!-- style="max-height:500px;min-height: 500px"-->
      <div class="mainT">
        <table class="record" width="100%" cellspacing="0" cellpadding="3" style="border-bottom: 1px solid #000;">
          <tbody id="main-con">
            <tr>
              <th style="width:10%;">HSN</th>
              <th style="width:10%;">Taxable Value</th>
              <th style="width:10%;">Rate</th>
              <th *ngFor="let key of headerKeys;" >{{key}}</th>
              <th style="text-align:right;">Total</th>
            </tr>
            <tr *ngFor="let item of hsnToSHow;">
              <td>{{item.HsnNo}}</td>
              <td class="cat-con" >{{item.TaxableAmount}}</td>
              <td class="cat-con" >{{item.totalTaxRate}}</td>
              <ng-container *ngFor="let col of headerKeys" >
                <td>
                  <ng-container *ngIf="item.AppliedTaxes[col]"  >
                    {{item.AppliedTaxes[col]}}
                  </ng-container>
                  <ng-container *ngIf="!item.AppliedTaxes[col]"  >
                    -
                  </ng-container>
                </td>
              </ng-container>
              <td style="text-align:right;">{{item.TotalAmount}}</td>
            </tr>
          </tbody>
        </table>
      </div>
      <div style="clear:both"></div>
    </div>
    <div style="clear:both"></div>
    <div *ngIf="last" style="float:left;text-align:right;overflow:auto;min-height:20px; margin-top:5px;">
      <span>Page No {{i+1}} of {{printData1.length}}</span>
    </div>
  </div>
</div>










((this.taxCalInclusiveType === 1) ? +(this.purchaseService.calcTaxableAmountType1(this.taxRates,
        this.taxSlabType, this.calcTotal(), this.isOtherState)).toFixed(4) : +(this.purchaseService.calcTaxableAmountType2(this.taxRates,
        this.taxSlabType, total, this.isOtherState)).toFixed(4))
      if (this.taxCalInclusiveType === 2) {
        if ('' + this.DiscountType === '0') {
          if (+this.Discount < 100 && +this.Discount > 0) {
            this.DiscountAmt = +((+this.Discount / 100) * (this.AmountItem)).toFixed(this.noOfDecimalPoint)
          } else if (+this.Discount === 100 || +this.Discount === 0 ) {
            this.DiscountAmt = 0
          }
        }
        this.AmountItem = this.AmountItem - this.DiscountAmt















<div class="modal fade" id="purchase_modal" role="dialog" aria-labelledby="exampleModalLabel"
  aria-hidden="true" data-backdrop="static" data-keyboard="false" >
  <div class="modal-dialog large_form modal-full-height modal-top" role="document">
    <div class="modal-content bgcH-grey-100">
      <div class="modal-header primary-bg">
        <div class="container-fluid">
          <div class="row">
            <div class="col-md-3 left_side_head">
              <p class="heading_lead">
                <i class="fas fa-shopping-cart" aria-hidden="true"></i>Purchase</p>
            </div>
            <div class="col-md-9">
              <div class="btn_header">
                <a class="btn btn-default waves-effect" #savebutton (click)="keepOpen=false;manipulateData()">Save </a>
                <a class="btn btn-info waves-effect" (click)="keepOpen=true;manipulateData()">Save and New</a>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                  <span aria-hidden="true" class="white-text" (click)="closePurchase()" >×</span>
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>
      <div *ngIf="loading" class="modal-content" >
        <div class="modal-body" style="height:inherit;" >
          <img src="assets/img/spinner-blue-circle.gif" alt="loading screen" style="width: 50px;height: 50px;position: absolute;left: 46%;top:46%;" />
        </div>
      </div>
      <div class="modal-body" *ngIf="!loading" >
        <form>
          <div class="form-row">
            <div class="form-group col-md-3 col-lg-2 col-xl-2">
              <label>Vendor</label>
              <div class="input-group adw_select">
                <div class="input-group adw_select">
                  <select2 [disabled]="Items.length > 0 || editMode" #vendor_select2 id="vendor" 
                    [data]="vendorData" class="control_select"
                    (valueChanged)="onVendorSelect($event)"
                    autocomplete="true"
                    [options]="{placeholder: 'Select Vendor'}"
                    [ngClass]="{'errorSelecto': submitSave && invalidObj?.PartyId }"
                    [value]="vendorValue">
                  </select2>
                </div>
              </div>
            </div>
            <div class="form-group col-md-3 col-lg-2 col-xl-2">
              <label>Organisation Name</label>
              <div class="input-group adw_select">
                <div class="input-group adw_select">
                  <select2 #organisation_select2  id="organisation"
                    [data]="organisationsData"
                    [disabled]="editMode"
                    class="control_select"
                    (valueChanged)="onChangeOrganisationId($event)"
                    autocomplete="true" 
                    [options]="{placeholder: 'Select Organisation'}"
                    [ngClass]="{'errorSelecto': submitSave && invalidObj?.OrgId }"
                    [value]="organisationValue">
                  </select2>
                </div>
              </div>
            </div>
            <div class="form-group col-md-3 col-lg-2 col-xl-2">
              <label class="fw-500">Voucher Date</label>
              <div class="timepicker-input input-icon">
                <div class="input-group">
                  <div class="input-group-addon bgc-white bd bdwR-0"><i class="fas fa-calendar-alt"></i></div>
                  <input readonly="true" type="text"
                    class="form-control start-date flatpickr"
                    id="bill-date1"
                    placeholder="Bill Date"
                    [disabled]="editMode"
                    (input)="getNewBillNo();checkForValidation()"
                    data-provide="datepicker" [(ngModel)]="BillDate"
                    [ngClass]="{'errorSelecto': submitSave && invalidObj?.BillDate}"
                    name="BillDate">
                </div>
              </div>
            </div>
            <div class="form-group col-md-3 col-lg-2 col-xl-2">
              <label>P.V.No</label>
              <a *ngIf="isBillNoManuall && previousBillNo && !editMode" class="tooltip1 info_tooltip"><i class="fas fa-info"></i>
                <span class="tooltiptext">Last Bill No. used is - {{previousBillNo}}</span>
              </a>
              <input type="text" placeholder="Bill Number"
              class="form-control" name="BillNo"
              [readonly]="!isBillNoManuall"
              [disabled]="editMode"
              (input)="checkForValidation()"
              [ngClass]="{'errorSelecto': submitSave && invalidObj?.BillNo }"
              [(ngModel)]="BillNo">
              <!-- <p *ngIf="isBillNoManuall && previousBillNo && !editMode" id="previous-bill-container" >Previous BillNo. used is - {{previousBillNo}}</p> -->
            </div>
            <div class="form-group col-md-3 col-lg-2 col-xl-2">
              <label>Party Bill No.</label>
              <input type="text" placeholder="Party Bill Number"
               class="form-control" name="PartyBillNo"
               (input)="checkForValidation()"
               [disabled]="editMode"
               [ngClass]="{'errorSelecto': submitSave && invalidObj?.PartyBillNo }"
              [(ngModel)]="PartyBillNo">
            </div>
            <div class="form-group col-md-3 col-lg-2 col-xl-2">
              <label class="fw-500">Party Bill Date</label>
              <div class="timepicker-input input-icon">
                <div class="input-group">
                  <div class="input-group-addon bgc-white bd bdwR-0"><i class="fas fa-calendar-alt"></i></div>
                  <input readonly="true" type="text"
                    class="form-control start-date flatpickr"
                    id="party-bill-date1" placeholder="Party Bill Date"
                    data-provide="datepicker" [(ngModel)]="PartyBillDate"
                    (input)="checkForValidation()"
                    [disabled]="editMode"
                    [ngClass]="{'errorSelecto': submitSave && invalidObj?.PartyBillDate }"
                    name="PartyBillDate">
                </div>
              </div>
            </div>
            <div class="form-group col-md-3 col-lg-2 col-xl-2">
              <label>Godam/Location</label>
              <div class="input-group adw_select">
                <div class="input-group adw_select">
                  <select2 #godown_select2 id="godown"
                   [data]="godownsData" class="control_select"
                  (valueChanged)="onGodownSelect($event)"
                   autocomplete="true" [options]="{ placeholder: 'Select Godown' }"
                  [ngClass]="{'errorSelecto': submitSave && invalidObj?.GodownId }"
                  [value]="godownValue" ></select2>
                </div>
              </div>
            </div>
            <div class="form-group col-md-3 col-lg-3 col-xl-3">
              <label>Address</label>
              <div class="input-group adw_select">
                <div class="input-group adw_select">
                  <select2 [disabled]="Items.length > 0" #address_select2 id="address"
                    [data]="AddressData" class="control_select"
                    (valueChanged)="onAddressSelect($event)"
                      autocomplete="true" [options]="{ placeholder: 'Select Address' }"
                      [ngClass]="{'errorSelecto': submitSave && invalidObj?.AddressId }"
                    [value]="addressValue" ></select2>
                </div>
              </div>
            </div>
            <div class="form-group col-md-3 col-lg-2 col-xl-2">
              <label>Billing Currency</label>
              <div class="input-group adw_select">
                <div class="input-group adw_select">
                  <select2 #currency_select2 id="currency"
                    [data]="currencyData" class="control_select"
                    (valueChanged)="onCurrencySelect($event)" 
                    autocomplete="true" 
                    [options]="{ placeholder: 'Select Currency' }"
                    [ngClass]="{'errorSelecto': submitSave && invalidObj?.CurrencyId }"
                    [value]="currencyValue" ></select2>
                </div>
              </div>
            </div>
            <div class="form-group col-md-3 col-lg-2 col-xl-2">
              <label>Convert To Currency</label>
              <div class="input-group adw_select">
                <div class="input-group adw_select">
                  <select2 #convertTo_select2 id="convertToCurrency" 
                  [data]="convertToCurrencyData" class="control_select"
                  (valueChanged)="onConvertToCurrencySelect($event)"
                  autocomplete="true" 
                  [options]="{ placeholder: 'Select Convert In Currency' }"
                  [value]="convertToCurrencyValue" ></select2>
                </div>
              </div>
            </div>
            <div class="form-group col-md-3 col-lg-2 col-xl-2">
              <label for="currency-rate">Currency Rate</label>
              <input type="text" class="form-control" id="currency-rate"
                placeholder="Currency Rate" class="form-control"
                appIncludeDeciaml
                name="currencyRate" [(ngModel)]="CurrencyRate">
            </div>
            <div class="form-group col-md-3 col-lg-2 col-xl-2">
              <label for="due-date">Due Date</label>
              <div class="timepicker-input input-icon">
                <div class="input-group">
                  <div class="input-group-addon bgc-white bd bdwR-0"><i class="fas fa-calendar-alt"></i></div>
                  <input type="text" readonly="true"
                    class="form-control start-date flatpickr"
                    id="due-date1" placeholder="Due Date"
                    data-provide="datepicker" [(ngModel)]="Duedate"
                    name="DueDate">
                </div>
              </div>
            </div>
            <div class="form-group col-md-3 col-lg-2 col-xl-2">
              <label>Outstanding Balance</label>
              <input type="text" readonly="true" class="form-control" class="form-control"
              tabindex="-1"
              appIncludeDecimal
                name="CreditLimit" [(ngModel)]="CreditLimit">
            </div>
          </div>
          <div class="card p-3">
            <div class="table-responsive parent">
              <table class="table fixTable1 editable_tbl item-table table-hover" id="table">
                <thead>
                  <tr class="default_row table">
                    <th >#</th>
                    <!-- <th>S.No.</th> -->
                    <th *ngFor="let level of categories" >Category</th>
                    <th>Item</th>
                    <th *ngFor="let column of attributeKeys ; ">
                      {{column}}
                    </th>
                    <th>Unit</th>
                    <th>Quantity</th>
                    <ng-container *ngIf="industryId === 3" >
                      <th>Length</th>
                      <th>Width</th>
                      <th>Height</th>
                    </ng-container>
                    <ng-container *ngIf="industryId === 5" >
                      <th>Batch No</th>
                      <th>Mfd Date</th>
                      <th>Expiry Date</th>
                    </ng-container>
                    <th>Sale Rate</th>
                    <th>Purchase Rate</th>
                    <th>Mrp Rate</th>
                    <th>Discount</th>
                    <th>Discount Amount</th>
                    <th>TaxSlab</th>
                    <th>Tax Type</th>
                    <th>Tax Amount</th>
                    <th>Remark</th>
                    <th>Sub Amount</th>
                  </tr>
                </thead>
                <tbody>
                  <tr class="default_row" *ngFor="let item of Items; let i = index;">
                    <td class="profile-pic1" >
                      <div class="edit1">
                        <a *ngIf="Items.length > 0" (click)="deleteItem(i, 'items', item.Sno)" ><i class="fa fa-trash fa-1x" aria-hidden="true"></i></a>
                        <a *ngIf="Items.length > 0" (click)="editItem(i+1, item.Id, 'items', item.Sno)" ><i class="fas fa-pen fa-1x"></i></a>
                      </div>
                    </td>
                    <!-- <td>{{item.Sno}}</td> -->
                    <td [colSpan]="categories.length">{{item.categoryName}}</td>
                    <td>{{item.itemName}}</td>
                    <td *ngFor="let attribute of item.itemAttributeTrans;">
                      {{attribute.name}}
                    </td>
                    <td>{{item.unitName}}</td>
                    <td>{{item.Quantity}}</td>
                    <ng-container *ngIf="industryId === 3" >
                      <td>{{item.Length}}</td>
                      <td>{{item.Width}}</td>
                      <td>{{item.Height}}</td>
                    </ng-container>
                    <ng-container *ngIf="industryId === 5" >
                      <td>{{item.BatchNo}}</td>
                      <td>{{item.MfdDate}}</td>
                      <td>{{item.ExpiryDate}}</td>
                    </ng-container>
                    <td>{{item.SaleRate}}</td>
                    <td>{{item.PurchaseRate}}</td>
                    <td>{{item.MrpRate}}</td>
                    <td>{{item.Discount}}&nbsp;{{item.DiscountType === 0 && item.Discount != 0 ? '%' : defaultCurrency}}
                    <td>{{item.DiscountAmt}}</td>
                    <td>{{item.taxSlabName}}</td>
                    <td>{{item.taxTypeName}}</td>
                    <td>{{item.TaxAmount}}</td>
                    <td>{{item.Remark}}</td>
                    <td>{{item.SubTotal}}</td>
                  </tr>
                </tbody>
                <tfoot>
                  <tr class="selected_row active">
                    <td >
                      <div class="action_btn">
                        <button type="submit" class="btn btn-primary redAlert btn_add_more" (click)="validateItem();addItems()">+</button>
                      </div>
                    </td>
                    <!-- <td></td> -->
                    <ng-container *ngIf="!loading" >
                      <td *ngFor="let category of categories">
                        <div class="input-group adw_select" >
                          <select2 [data]="category.data" #cat_select2 class="control_select cat-cont" 
                            (valueChanged)="onSelectCategory($event, category.level)"
                            (keydown.esc)="moveToCharge()"
                            autocomplete="true" [options]="{ placeholder: 'Select Category' }" [value]="category.value"
                          ></select2>
                        </div>
                      </td>
                    </ng-container>
                    <td>
                      <div class="input-group adw_select min_width_350">
                        <select2 [disabled]="AddressId <= 0" #item_select2 [data]="itemData" class="control_select " 
                        (valueChanged)="onItemSelect($event)" autocomplete="true"
                        [ngClass]="{'errorSelecto': (submitSave || !clickItem) && invalidObj?.ItemId }"
                          [options]="{placeholder: 'Select Item'}" [value]="itemValue" >
                        </select2>
                      </div>
                    </td>
                    <td *ngFor="let attribute of attributesData; let i= index">
                      <div class="input-group adw_select">
                        <select2 #attr_select2 [disabled]="ItemId <= 0" id="attr{{i}}" [data]="attribute.data" class="control_select attr"
                        (valueChanged)="onAttributeSelect($event,i, attribute.attributeId)"
                        autocomplete="true" [options]="{ placeholder: 'Select Attribute' }" 
                        [value]="attributeValue" ></select2>
                      </div>
                    </td>
                    <td>
                      <div class="input-group adw_select">
                        <select2 #unit_select2 [data]="subUnitsData" class="control_select"
                        (valueChanged)="onUnitSelect($event)" autocomplete="true"
                        [ngClass]="{'errorSelecto': (submitSave || !clickItem) && invalidObj?.UnitId }"
                        [options]="{ placeholder: 'Select Unit' }" [value]="subUnitsValue" ></select2>
                      </div>
                    </td>
                    <td>
                      <input type="text" class="form-control" appIncludeDecimal placeholder="Quantity"
                      (input)="validateItem();calculate();"
                      [ngClass]="{'errorSelecto': (submitSave || !clickItem) && invalidObj?.Quantity }"
                        name="quantity" [(ngModel)]="Quantity">
                    </td>
                    <ng-container *ngIf="industryId === 3" >
                      <td>
                        <input type="text" class="form-control" 
                        placeholder="Length" appIncludeDecimal name="length"
                        (input)="validateItem();calculate();"
                        [ngClass]="{'errorSelecto': (submitSave || !clickItem) && invalidObj?.Length }"
                          [(ngModel)]="Length">
                      </td>
                      <td>
                        <input type="text" class="form-control" placeholder="Width"
                        (input)="validateItem();calculate();"
                        [ngClass]="{'errorSelecto': (submitSave || !clickItem) && invalidObj?.Width }"
                          appIncludeDecimal name="Width" [(ngModel)]="Width">
                      </td>
                      <td>
                        <input type="text" class="form-control" placeholder="Height"
                        (input)="validateItem();calculate();"
                        [ngClass]="{'errorSelecto': (submitSave || !clickItem) && invalidObj?.Height }"
                          appIncludeDecimal name="Height" [(ngModel)]="Height">
                      </td>
                    </ng-container>
                    <ng-container *ngIf="industryId === 5" >
                      <td>
                        <input type="text" class="form-control" placeholder="Batch No"
                        (input)="validateItem();"
                        [ngClass]="{'errorSelecto': (submitSave || !clickItem) && invalidObj?.BatchNo }"
                          name="BatchNo" [(ngModel)]="BatchNo">
                      </td>
                      <td>
                        <input type="text" readonly="true" class="form-control start-date flatpickr"
                          id="mfd-date" placeholder="Mfd Date" data-provide="datepicker" 
                          (input)="validateItem()"
                          [ngClass]="{'errorSelecto': (submitSave || !clickItem) && invalidObj?.MfdDate }"
                          [(ngModel)]="MfdDate" name="MfdDate">
                      </td>
                      <td>
                        <input type="text" readonly="true" class="form-control start-date flatpickr"
                          id="expiry-date" placeholder="Expiry Date" data-provide="datepicker" 
                          (input)="validateItem()"
                          [ngClass]="{'errorSelecto': (submitSave || !clickItem) && invalidObj?.ExpiryDate }"
                          [(ngModel)]="ExpiryDate" name="ExpiryDate">
                      </td>
                    </ng-container>
                    <td>
                      <input type="text" class="form-control" placeholder="Sale Rate"
                        appIncludeDecimal
                        name="saleRate" [(ngModel)]="SaleRate">
                    </td>
                    <td>
                      <input type="text" class="form-control" placeholder="Purchase Rate" name="PurchaseRate"
                      (input)="validateItem();calculate()"
                      appIncludeDecimal
                      [ngClass]="{'errorSelecto': (submitSave || !clickItem) && invalidObj?.PurchaseRate }"
                        [(ngModel)]="PurchaseRate" >
                    </td>
                    <td>
                      <input type="text" class="form-control" placeholder="MrpRate"
                      appIncludeDecimal
                        name="MrpRate" [(ngModel)]="MrpRate">
                    </td>
                    <td>
                      <div class="discount">
                        <input type="text" class="form-control" placeholder="Discount"
                          appIncludeDecimal name="Discount" [(ngModel)]="Discount"
                          (input)="validateItem();calculate()"
                        [ngClass]="{'errorSelecto': invalidObj?.Discount }"
                        >
                        <select class="form-control discount_type" id="DiscountType"
                          [(ngModel)]="DiscountType"
                          (ngModelChange)="validateItem();calculate()"
                          name="discountType" >
                          <option *ngFor="let value of currencyValues;" [value]="value.id" >{{value.symbol}}</option>
                        </select>
                      </div>
                    </td>
                    <td>
                      <input type="text" readonly="true" class="form-control" placeholder="Discount Amount"
                      appIncludeDecimal tabindex="-1"
                        name="DiscountAmt" [(ngModel)]="DiscountAmt">
                    </td>
                    <td>
                      <div class="discount">
                        <select2 #taxSlab_select2 [data]="taxSlabsData" class="control_select"
                          (valueChanged)="onTaxSlabSelect($event)" autocomplete="true"
                          [ngClass]="{'errorSelecto': (submitSave || !clickItem) && invalidObj?.TaxSlabId }"
                          [options]="{ placeholder: 'Select Tax Slab' }" [value]="taxSlabValue" ></select2>
                      </div>
                    </td>
                    <td>
                      <div class="discount">
                        <select2 #taxType_select2 [data]="taxTypeData" class="control_select"
                          (valueChanged)="onTaxTypeSelect($event)" autocomplete="true"
                          [options]="{ placeholder: 'Select Tax Type' }" 
                          [value]="taxTypeValue" ></select2>
                      </div>
                    </td>
                    <td>
                      <input type="text" readonly="true" class="form-control" placeholder="Tax Amount"
                      tabindex="-1"
                        appIncludeDecimal name="TaxAmount" [(ngModel)]="TaxAmount">
                    </td>
                    <td>
                      <input type="text" class="form-control"
                      (input)="validateItem()"
                        placeholder="Remark" name="remark" [(ngModel)]="Remark">
                    </td>
                    <td>
                      <input type="text" readonly="true" class="form-control"
                        placeholder="SubTotal" name="SubTotal"
                        appIncludeDecimal
                        (keydown.enter)="enterPressItem($event)"
                        [(ngModel)]="SubTotal">
                    </td>
                  </tr>
                  <tr>
                    <td *ngFor="let item of categories" ></td>
                    <td *ngFor="let item of attributeKeys" ></td>
                    <td colspan="3" *ngIf="industryId === 3" ></td>
                    <td colspan="3" *ngIf="industryId === 5" ></td>
                    <td colspan="8"></td>
                    <td>
                        <input type="text" readonly="true" class="form-control"
                        tabindex="-1"
                        placeholder="Total Discount" name="TotalDiscount" 
                        [(ngModel)]="TotalDiscount">
                    </td>
                    <td colspan="2"></td>
                    <td>
                      <input type="text" readonly="true" class="form-control"
                      placeholder="Total Tax Amount" name="TotalTaxAmount" 
                      tabindex="-1"
                      [(ngModel)]="TotalTaxAmount"></td>
                    <td colspan="1"></td>
                    <td>
                      <input type="text" readonly="true" class="form-control"
                      placeholder="Total Gross Amount" name="SubTotalAmount" 
                      tabindex="-1"
                      [(ngModel)]="SubTotalAmount">
                    </td>
                  </tr>
                </tfoot>
              </table>
            </div>
          </div>
          <div class="form-row mt-4">
            <div class="col-md-12 card p-3" >
              <div class="form-row">
                <div class="table-responsive parent" id="parent">
                  <table class="table editable_tbl charge-table" id="fixTable">
                    <thead>
                      <tr>
                        <th >#</th>
                        <th >Charge</th>
                        <th >Amount</th>
                        <th >Tax</th>
                        <th>Tax Type</th>
                        <th >Tax Amount</th>
                        <th >Total</th>
                      </tr>
                    </thead>
                    <tbody>
                      <tr class="default_row" *ngFor="let charge of AdditionalCharges; index as i;" >
                        <td  class="profile-pic1" >
                          <div class="edit1">
                            <a (click)="deleteItem(i, 'charge', charge.Sno)" *ngIf="AdditionalCharges.length > 0" >
                              <i class="fa fa-trash fa-1x" aria-hidden="true"></i>
                            </a>
                            <a (click)="editItem(i+1, charge.Id, 'charge', charge.Sno)"
                              *ngIf="AdditionalCharges.length > 0" ><i class="fas fa-pen fa-1x"></i>
                            </a>
                          </div>
                        </td>
                        <td>
                          {{charge.LedgerName}}
                        </td>
                        <td>
                          {{charge.AmountCharge}}
                        </td>
                        <td>
                          {{charge.TaxChargeName}}
                        </td>
                        <td>
                          {{charge.taxTypeChargeName}}
                        </td>
                        <td>
                          {{charge.TaxAmountCharge}}
                        </td>
                        <td>
                          {{charge.TotalAmountCharge}}
                        </td>
                      </tr>
                    </tbody>
                    <tfoot>
                      <tr class="selected_row active" >
                        <td>
                          <div class="action_btn">
                            <button (click)="validateCharge();addCharge()" type="submit"
                              class="btn btn-primary btn_add_more">+</button>
                          </div>
                        </td>
                        <td>
                          <div class="input-group adw_select">
                            <select2 [disabled]="AddressId <= 0" name="chargeselect" #charge_select2 [data]="chargesData"
                              class="control_select"
                              (valueChanged)="onChargeSelect($event)"
                              (keydown.esc)="moveToPayment()"
                              autocomplete="true" [options]="{placeholder: 'Select Charge'}"
                              [ngClass]="{'errorSelecto': invalidObj?.LedgerChargeId && (submitSave || !clickCharge)  }"
                              [value]="ledgerChargeValue" ></select2>
                          </div>
                        </td>
                        <td><input type="text" [disabled]="AddressId <= 0" appIncludeDecimal name="AmountCharge" class="form-control"
                          [ngClass]="{'errorSelecto': invalidObj?.AmountCharge && (submitSave || !clickCharge)}"
                          (input)="validateCharge();calculate();"
                          id="AmountCharge" [(ngModel)]="AmountCharge" placeholder="Enter Amount">
                        </td>
                        <td>
                          <div class="input-group adw_select">
                            <select2 #taxSlabCharge_select2 [data]="taxSlabsData" class="control_select"
                            (valueChanged)="onTaxSlabChargeSelect($event)"
                            autocomplete="true"
                            [ngClass]="{'errorSelecto': (submitSave || !clickCharge) && invalidObj?.TaxSlabChargeId }"
                            [options]="{ placeholder: 'Select Tax Slab' }"
                            [value]="taxSlabChargeValue" ></select2>
                          </div>
                        </td>
                        <td>
                          <select2 #taxTypecharge_select2 [data]="taxTypeData" class="control_select"
                          (valueChanged)="onTaxTypeChargeSelect($event)" autocomplete="true"
                          [options]="{ placeholder: 'Select Tax Type' }" 
                          [value]="taxTypeChargeValue" ></select2>
                        </td>
                        <td ><input type="text" appIncludeDecimal readonly="true" name="TaxAmountCharge" class="form-control"
                          [ngClass]="{'errorSelecto': invalidObj?.TaxAmountCharge && (submitSave || !clickCharge)}"
                          (input)="validateCharge()"
                          id="TaxAmountCharge" [(ngModel)]="TaxAmountCharge" placeholder="Tax Amount">
                        </td>
                        <td ><input type="text" appIncludeDecimal readonly="true" name="TotalAmountCharge" class="form-control"
                          [ngClass]="{'errorSelecto': invalidObj?.TotalAmountCharge && (submitSave || !clickCharge)}"
                          (input)="validateCharge()"
                          (keyup.enter)="enterPressCharge($event)"
                          id="TotalAmountCharge" [(ngModel)]="TotalAmountCharge" placeholder="Total Amount">
                        </td>
                      </tr>
                    </tfoot>
                  </table>
                </div>
              </div>
              <div class="form-row mt-2" >
                <div class="col-md-6" >
                  <div class=" card p-2">
                    <div class="form-row" >
                      <div class="form-group col-md-3">
                        <label class="">Location To</label>
                        <input type="text" class="form-control" id="Location"
                          #loc_ref
                          placeholder="Location" class="form-control" name="Location"
                          [(ngModel)]="LocationTo">
                      </div>
                      <div class="form-group col-md-3">
                        <label>Vehicle Number</label>
                        <input type="text" class="form-control" id="VehicleNo" placeholder="Vehicle No" class="form-control" name="VehicleNo" [(ngModel)]="VehicleNo">
                      </div>
                      <div class="form-group col-md-3">
                        <label>Driver Name</label>
                        <input type="text" class="form-control" id="Drivername" placeholder="Driver name"
                          class="form-control" name="Drivername" [(ngModel)]="Drivername">
                      </div>
                      <div class="form-group col-md-3">
                        <label>Transportation</label>
                        <input type="text" class="form-control" id="Transportation" placeholder="Transportation"
                          class="form-control" name="Transportation" [(ngModel)]="Transportation">
                      </div>
                      <div class="form-group col-md-4">
                        <label>Reference By</label>
                        <div class="input-group adw_select">
                          <select2 #referral_select2 [data]="referralData" class="control_select"
                            (valueChanged)="onRefferalPartnerSelect($event)" [options]="{placeholder: 'Select Referral Partner'}"
                            autocomplete="true" [value]="referralPartner" ></select2>
                        </div>
                      </div>
                      <div class="form-group col-md-4">
                        <label>ReferenceBy Type</label>
                        <div class="input-group adw_select">
                          <select2 #referraltype_select2 [data]="referralTypesData" 
                          class="control_select" (valueChanged)="onReferralTypeSelect($event)"
                            [options]="{ placeholder: 'Select Referral Type' }" 
                            autocomplete="true" [value]="referralTypesValue"></select2>
                        </div>
                      </div>
                      <div class="form-group col-md-3">
                        <label>Auto Round Off</label>
                        <input type="number" readonly="true" class="form-control"
                         id="RoundOff" placeholder="Round Off"
                          class="form-control" name="RoundOff"
                          (input)="calculate()"
                          [(ngModel)]="RoundOff">
                      </div>
                      <div class="form-group col-md-3">
                        <label>Manual Round Off</label>
                        <input type="number" class="form-control"
                         id="RoundOffManual" placeholder="Round Off Manual"
                          class="form-control" name="RoundOffManual"
                          (input)="calculate()"
                          [(ngModel)]="RoundOffManual">
                      </div>
                    </div>
                  </div>
                </div>
                <div class="col-md-6">
                  <div class=" card pt-2 pr-2 pl-2 " *ngIf="!loadingSummary" >
                    <h5 class="summery_text">Bill Summary</h5>
                      <div class="form-row">
                        <div class="col-md-6 text-left">
                          <div class="form-row">
                            <ng-container *ngIf="TaxableValue > 0" >
                              <div class="col-md-6 labal_text">Taxable Value</div>
                              <div class="col-md-6 value_text">{{TaxableValue.toFixed(noOfDecimal)}}</div>
                            </ng-container>
                            <ng-container *ngFor="let charge of AdditionalChargesToShow" >
                              <div class="col-md-6 labal_text">{{charge.LedgerName}}</div>
                              <div class="col-md-6 value_text">{{charge.TaxableAmountCharge}}</div>
                            </ng-container>
                          </div>
                        </div>
                        <div class="col-md-6 text-right" *ngIf="billSummary && billSummary.length > 0" >
                          <div class="form-row" *ngFor="let tax of billSummary" >
                            <div class="col-md-6 labal_text">{{tax.name}}</div>
                            <div class="col-md-6 value_text">{{tax.total.toFixed(4)}}</div>
                          </div>
                        </div>
                      </div>
                      <div class="form-row border-top pt-2">
                        <div class="col-md-6"></div>
                        <div class="col-md-3 labal_text font-weight-bold">Total Bill Amount</div>
                        <div class="col-md-3 text-right font-weight-bold value_text">{{BillAmount}}</div>
                      </div>
                    </div>
                    <div class="card pt-2 pr-2 pl-2" *ngIf="loadingSummary" >
                      <div class="modal-body" style="height:inherit;" >
                        <img src="assets/img/spinner-blue-circle.gif" alt="loading screen" style="width: 25px;height: 25px;position: absolute;left: 49%;top:49%;" />
                      </div>
                    </div>
                  </div>
                </div>
              </div>
              <div class="col-md-12 card p-3">
                <div class="form-row">
                  <div class="table-responsive parent" id="parent">
                    <table class="table editable_tbl trans-table" id="fixTable">
                      <thead>
                        <tr>
                          <th>#</th>
                          <th>Mode</th>
                          <th>Ledger Name</th>
                          <th>Amount</th>
                          <th>PayDate</th>
                          <th>Ref. No.</th>
                        </tr>
                      </thead>
                      <tbody>
                        <tr class="default_row" *ngFor="let transaction of PaymentDetail; index as i" >
                          <td class="profile-pic1" >
                            <div class="edit1">
                              <a (click)="deleteItem(i, 'trans', transaction.Sno)" *ngIf="PaymentDetail.length > 0" >
                                <i class="fa fa-trash fa-1x" aria-hidden="true"></i>
                              </a>
                            <a (click)="editItem(i+1, transaction.Id, 'trans')" 
                              *ngIf="PaymentDetail.length > 0" ><i class="fas fa-pen fa-1x"></i>
                            </a>
                          </div>
                        </td>
                        <!-- <td>{{transaction.Sno}}</td> -->
                        <td style="min-width:180px;">
                          <div class="input-group adw_select">
                            {{transaction.Paymode}}
                          </div>
                        </td>
                        <td>
                          <div class="input-group adw_select">
                            {{transaction.BankLedgerName}}
                          </div>
                        </td>
                        <td>
                          <div class="input-group adw_select">
                            {{transaction.Amount}}
                          </div>
                        </td>
                        <td>
                          <div class="input-group adw_select">
                            {{transaction.PayDate}}
                          </div>
                        </td>
                        <td>
                          <div class="input-group adw_select">
                            {{transaction.ChequeNo}}
                          </div>
                        </td>
                      </tr>
                      </tbody>
                      <tfoot>
                        <tr class="selected_row active" >
                          <td>
                            <div class="action_btn">
                              <button (click)="validateTransaction();addTransactions()" type="submit"
                                class="btn btn-primary btn_add_more">+</button>
                            </div>
                          </td>
                          <!-- <td></td> -->
                          <td style="min-width:180px;">
                            <div class="input-group adw_select">
                              <div class="input-group adw_select">
                                <div class="input-group adw_select">
                                  <select2 name="Paymode" #payment_select2 [data]="paymentModesData" id="PayModeId"
                                    class="control_select"
                                    (valueChanged)="onPaymentModeSelect($event)"
                                    autocomplete="true" [options]="{placeholder: 'Select Payment Modes'}"
                                    [ngClass]="{'errorSelecto': invalidObj?.PayModeId && (submitSave || !clickTrans)  }"
                                    [value]="paymode" ></select2>
                                </div>
                              </div>
                            </div>
                          </td>
                          <td>
                            <div class="input-group adw_select">
                              <div class="input-group adw_select">
                                <div class="input-group adw_select">
                                  <select2 name="LedgerId" #ledger_select2 [data]="paymentLedgerselect2" id="LedgerId"
                                    class="control_select" (valueChanged)="onPaymentLedgerSelect($event)"
                                  autocomplete="true" [options]="{placeholder: 'Select Ledger'}"
                                  [ngClass]="{'errorSelecto': invalidObj?.LedgerId && (submitSave || !clickTrans)  }" 
                                  [value]="ledger" ></select2>
                                </div>
                              </div>
                            </div>
                          </td>
                          <td><input type="text" appIncludeDecimal name="Amount" class="form-control"
                            [ngClass]="{'errorSelecto': invalidObj?.Amount && (submitSave || !clickTrans)}"
                            (input)="validateTransaction()"
                            id="Amount" [(ngModel)]="Amount" placeholder="Enter Amount"></td>
                          <td><input type="text" name="PayDate" id="pay-date" class="form-control flatpickr" 
                            [ngClass]="{'errorSelecto': invalidObj?.PayDate && (submitSave || !clickTrans)}"
                            (input)="validateTransaction()"
                            [(ngModel)]="PayDate" placeholder="Select Date"></td>
                          <td><input type="text" id="ChequeNo" class="form-control" name="ChequeNo"
                            [(ngModel)]="ChequeNo"
                            (input)="validateTransaction()"
                            (keyup.enter)="enterPressTrans($event)"
                            [ngClass]="{'errorSelecto': invalidObj?.ChequeNo && (submitSave || !clickTrans)}"
                            placeholder="Enter Reference No.">
                          </td>
                        </tr>
                      </tfoot>
                    </table>
                  </div>
                </div>
              </div>
            </div>
          </form>
        </div>
      </div>
    </div>
  </div>























/* File created by Dolly Garg*/

import { Component,
  ViewChild,
  QueryList,
  ViewChildren,
  Renderer2,
  ElementRef
 } from '@angular/core'
import { Subscription } from 'rxjs/Subscription'
import { UIConstant } from 'src/app/shared/constants/ui-constant'
import { Select2OptionData, Select2Component } from 'ng2-select2'
import { PurchaseService } from '../purchase.service'
import { Subject, forkJoin } from 'rxjs';
import { PurchaseAttribute, AddCust, PurchaseAdd, PurchaseTransaction, PurchaseItem } from '../../../model/sales-tracker.model'
import { CommonService } from '../../../commonServices/commanmaster/common.services'
import { ToastrCustomService } from '../../../commonServices/toastr.service'
import { Settings } from '../../../shared/constants/settings.constant'
import { GlobalService } from '../../../commonServices/global.service'
import { SetUpIds } from 'src/app/shared/constants/setupIds.constant'
import { AdditionalCharges, ItemTaxTrans } from '../../../model/sales-tracker.model';
import { FormConstants } from 'src/app/shared/constants/forms.constant';

declare const flatpickr: any
declare const $: any
declare const _: any
@Component({
  selector: 'app-purchase',
  templateUrl: './purchase-add.component.html',
  styleUrls: ['./purchase-add.component.css']
})
export class PurchaseAddComponent {
  onDestroy$
  modalSub: Subscription
  loading: boolean = true
  catLevel: number = 1
  categories: Array<{ placeholder: string, value: string, data: Array<Select2OptionData>, level: number }> = []
  attr$: Subscription
  item$: Subscription
  vendorData$: Subscription
  taxProcessesData$: Subscription
  paymentModesData$: Subscription
  organisationsData$: Subscription
  godownsData$: Subscription
  referralTypesData$: Subscription
  category$: Subscription

  referralsData$: Subscription
  taxSlabsData$: Subscription
  currencyData$: Subscription
  addressData$: Subscription

  attributesData: Array<Select2OptionData>
  taxProcessesData: Array<Select2OptionData>
  paymentModesData: Array<Select2OptionData>
  organisationsData: Array<Select2OptionData>
  godownsData: Array<Select2OptionData>
  referralTypesData: Array<Select2OptionData>
  referralData: Array<Select2OptionData>
  paymentModeSelect2: Array<Select2OptionData>
  currenciesSelect2: Array<Select2OptionData>
  taxTypeData: Array<Select2OptionData>
  currencyData: Array<Select2OptionData>
  convertToCurrencyData: Array<Select2OptionData>
  vendorData: Array<Select2OptionData>
  AddressData: Array<Select2OptionData>
  subUnitsData: Array<Select2OptionData>
  itemData: Array<Select2OptionData>
  paymentLedgerselect2: Array<Select2OptionData>
  taxSlabsData: Array<Select2OptionData>
  chargesData: Array<Select2OptionData>

  subUnitsValue: number
  attributeValue: number
  itemValue: number
  vendorValue: number
  taxProcessValue: number
  paymentModeValue: number
  organisationValue: number
  godownValue: number
  referralTypesValue: number
  referralValue: number
  taxSlabValue: number
  currencyValue: number
  convertToCurrencyValue: number
  addressValue: number
  LedgerChargeValue: number
  LedgerNameValue: string
  AmountChargeValue: number
  TaxSlabChargeValue: number
  TaxAmountChargeValue: number
  TotalAmountChargeValue: number

  ledgerChargeValue: number
  taxSlabChargeValue: number

  clientDateFormat: string = ''
  currency: any
  defaultCurrency: string
  setupModules: any
  currencyValues: Array < { id: string, symbol: string } > = [{ id: '0', symbol: '%' }]
  freightData: Array<Select2OptionData>

  LedgerChargeId: number
  LedgerName: string
  AmountCharge: number
  TaxableAmountCharge: number
  TaxSlabChargeId: number
  TaxChargeName: string
  TaxAmountCharge: number
  TotalAmountCharge: number
  taxChargeSlabType: number
  taxChargeRates: Array<any> = []
  TaxTypeCharge: number = 0
  itemTaxTrans: Array<ItemTaxTrans> = []
  taxTypeChargeName: string

  Paymode: string
  PayModeId: number
  LedgerId: number
  Amount: number
  BankLedgerName: string
  ChequeNo: string
  PayDate: string
  paymode: number
  ledger: number

  ItemTransId: number
  AttributeId: number
  ParentTypeId: number
  name: string

  TaxTypeTax: number
  AmountTax: number
  ItemTransTaxId: number
  ParentTaxId: number
  ParentTypeTaxId: number
  ItemTransTypeTax: number
  TaxRateNameTax: string
  TaxRateId: number
  TaxRate: number
  ValueType: number
  TaxSlabName: string
  editChargeSno: number = 0

  ItemTaxTrans: Array<ItemTaxTrans> = []

  TransType: number
  TransId: number
  ChallanId: number = 0
  ItemId: number
  UnitId: number
  Length: number
  Height: number
  Width: number
  Quantity: number
  SaleRate: number
  MrpRate: number
  PurchaseRate: number
  TaxSlabId: number
  TaxType: number
  TaxAmount: number
  DiscountType: number
  Discount: number
  DiscountAmt: number
  ExpiryDate: string
  MfdDate: string
  BatchNo: string
  Remark: string
  itemName: string
  categoryName: string
  unitName: string
  taxSlabName: string
  taxTypeName: string
  AmountItem: number
  SubTotal: number
  taxSlabType: number
  taxRates: Array<any> = []
  attributeKeys: any = []
  BillAmount: number
  BillDate: string
  PartyBillDate: string
  PartyBillNo: string
  BillNo: string
  ConvertedAmount: number
  CurrencyRate: number
  TotalDiscount: number
  Freight: number
  FreightMode: number
  Id: number
  PartyId: number
  ReferralId: number
  ReferralTypeId: number
  ReferralComission: number
  ReferralComissionTypeId: number
  ReverseCharge: number
  ReverseTax: number
  Cess: number
  CessAmount: number
  RoundOff: number
  RoundOffManual: number
  SubTotalAmount: number
  TotalTaxAmount: number
  TotalChallan: number
  VehicleNo: string
  Drivername: string
  Transportation: string
  TotalQty: number
  OtherCharge: number
  GodownId: number
  CurrencyId: number
  OrgId: number
  InterestRate: number
  InterestAmount: number
  InterestType: number
  DueDate: string
  OrderId: number
  Advanceamount: number
  NetAmount: number
  LocationTo: string
  itemAttributeTrans: Array<PurchaseAttribute> = []
  ItemAttributeTrans: Array<PurchaseAttribute> = []
  PaymentDetail: Array<PurchaseTransaction> = []
  AdditionalCharges: Array<AdditionalCharges> = []
  Items: Array<PurchaseItem> = []
  categoryId: number
  AddressId: number
  editTransId: number = -1
  editItemId: number = -1
  editItemSno: number = 0
  editChargeId: number = -1
  validItem: boolean = true
  validDiscount: boolean = true
  validTransaction: boolean = true
  validCharge: boolean = true
  clickItem = false
  clickTrans = false
  clickCharge = false

  CreditLimit: number
  CreditDays: number

  allItems: any = []
  ReferralCommissionTypeId: number
  ReferralCommission: number
  CommissionAmount: number

  categorySelected: any = []
  settingData: any = []
  clientStateId: number = 0
  allAddressData: Array<any> = []
  isOtherState: boolean = true
  editMode: boolean = false
  parentMostCategory: number = 0
  submitSave: boolean = false
  industryId: number = 0


  formReadySub = new Subject<boolean>()
  fromReady$ = this.formReadySub.asObservable()
  form$: Subscription
  newAttributeAdd$: Subscription
  newVendAdd$: Subscription
  addressAdd$: Subscription
  itemAdd$: Subscription
  taxAdd$: Subscription
  unitAdd$: Subscription
  ledgerAdd$: Subscription
  settingData$: Subscription
  freightData$: Subscription
  chargestData$: Subscription
  subUnitsData$: Subscription
  newLedgerCreationAdd$: Subscription
  invalidObj: any = {}
  previousBillNo: string = ''
  keepOpen: boolean = false
  isAddNew: boolean = false

  creatingForm: boolean = false

  TransactionNoSetups: any
  loadingSummary: boolean = false
  constructor (private commonService: CommonService,
    private purchaseService: PurchaseService,
    private toastrService: ToastrCustomService,
    private settings: Settings,
    private renderer: Renderer2,
    private gs: GlobalService) {
    this.getFormDependency()
    this.modalSub = this.commonService.getPurchaseStatus().subscribe(
      (status: AddCust) => {
        if (status.open) {
          if (status.editId !== '') {
            this.creatingForm = true
            this.editMode = true
            this.Id = +status.editId
          } else {
            this.Id = UIConstant.ZERO
            this.editMode = false
            this.creatingForm = false
          }
          this.openModal()
        } else {
          this.closeModal()
        }
      }
    )
    this.newAttributeAdd$ = this.commonService.getAttributeStatus().subscribe(
      data => {
        if (data.id && data.name && data.AttributeId) {
          let indexOfAttr = -1
          for (let i = 0; i < this.attributesData.length; i++) { if (this.attributesData[i]['attributeId'] === data.AttributeId) { indexOfAttr = i; break; }}
          if (indexOfAttr >= 0) {
            let itemAttributeTrans = JSON.parse(JSON.stringify(this.itemAttributeTrans))
            let newData = Object.assign([], this.attributesData[indexOfAttr]['data'])
            newData.push({ id: +data.id, text: data.name });
            this.attributesData[indexOfAttr]['data'] = Object.assign([], newData)
            console.log('this.attributesData : ', this.attributesData)
            setTimeout(() => {
              this.attrSelect2.forEach((attr: Select2Component, index: number, array: Select2Component[]) => {
                if (index === indexOfAttr) {
                  attr.setElementValue(data.id)
                  $('#' + $('.attr')[index].id).removeClass('errorSelecto')
                } else if (itemAttributeTrans[index].AttributeId) {
                  attr.setElementValue(itemAttributeTrans[index].AttributeId)
                  $('#' + $('.attr')[index].id).removeClass('errorSelecto')
                } else {
                  $('#' + $('.attr')[index].id).addClass('errorSelecto')
                }
              })
            }, 100)
          }
        }
      }
    )

    this.newLedgerCreationAdd$ = this.commonService.getledgerCretionStatus().subscribe(
      data => {
        if (data.id && data.name) {
          let newData = Object.assign([], this.chargesData)
          newData.push({ id: +data.id, text: data.name })
          this.chargesData = newData
          this.LedgerChargeId = +data.id
          this.ledgerChargeValue = data.id
          setTimeout(() => {
            if (this.chargeSelect2) {
              const element = this.renderer.selectRootElement(this.chargeSelect2.selector.nativeElement, true)
              element.focus({ preventScroll: false })
            }
          }, 2000)
        }
      }
    )

    this.category$ = this.commonService.getCategoryStatus().subscribe(
      (data: AddCust) => {
        if (data.id && data.name) {
          let categoryId = data.id
          let categoryName = data.name
          this.isAddNew = true
          this.getAllCategories(categoryName, categoryId, this.isAddNew)
        }
      }
    )

    this.form$ = this.fromReady$.subscribe(
      (formReady) => {
        if (formReady) {
          this.loading = false
          if (this.editMode) {
            this.vendorSelect2.setElementValue(this.PartyId)
            this.organisationSelect2.setElementValue(this.OrgId)
            this.godownSelect2.setElementValue(this.GodownId)
            this.addressSelect2.setElementValue(this.AddressId)
            this.currencySelect2.setElementValue(this.CurrencyId)
            this.convertToSelect2.setElementValue(this.ConvertToCurrencyId)
            this.referralSelect2.setElementValue(this.ReferralId)
            this.referraltypeSelect2.setElementValue(this.ReferralTypeId)
            this.setDueDate(this.CreditDays)
          }
        }
      }
    )

    this.vendorData$ = this.purchaseService.vendorData$.subscribe(
      data => {
        if (data.data) {
          this.vendorData = data.data
        }
      }
    )

    this.taxProcessesData$ = this.purchaseService.taxProcessesData$.subscribe(
      data => {
        if (data.data) {
          this.taxProcessesData = data.data
        }
      }
    )
    this.paymentModesData$ = this.purchaseService.paymentModesData$.subscribe(
      data => {
        if (data.data) {
          this.paymentModesData = data.data
        }
      }
    )
    this.organisationsData$ = this.purchaseService.organisationsData$.subscribe(
      data => {
        if (data.data) {
          this.organisationsData = data.data
          if (this.organisationsData.length >= 1) {
            this.OrgId = +this.organisationsData[0].id
            this.organisationValue = +this.organisationsData[0].id
            if (this.isBillNoManuall) {
              this.BillDate = this.gs.getDefaultDate(this.clientDateFormat)
              this.getNewBillNo()
            }
          }
        }
      }
    )
    this.godownsData$ = this.purchaseService.godownsData$.subscribe(
      data => {
        if (data.data) {
          this.godownsData = data.data
          if (this.godownsData.length === 1) {
            this.GodownId = +this.godownsData[0].id
            this.godownValue = +this.godownsData[0].id
          }
        }
      }
    )
    this.referralTypesData$ = this.purchaseService.referralTypesData$.subscribe(
      data => {
        if (data.data) {
          this.referralTypesData = data.data
        }
      }
    )
    this.attr$ = this.purchaseService.attributesData$.subscribe(
      data => {
        if (data.attributeKeys && data.attributesData) {
          this.initAttribute()
          this.attributeKeys = data.attributeKeys
          this.attributesData = data.attributesData
        }
      }
    )

    this.item$ = this.purchaseService.itemData$.subscribe(
      data => {
        if (data.data) {
          this.itemData = Object.assign([], data.data)
        }
      }
    )
    this.subUnitsData$ = this.purchaseService.subUnitsData$.subscribe(
      data => {
        if (data.data) {
          this.subUnitsData = data.data
        }
      }
    )
    this.referralsData$ = this.purchaseService.referralData$.subscribe(
      data => {
        if (data.data) {
          this.referralData = data.data
        }
      }
    )
    this.taxSlabsData$ = this.purchaseService.taxSlabsData$.subscribe(
      data => {
        if (data.data) {
          this.taxSlabsData = data.data
        }
      }
    )

    this.currencyData$ = this.purchaseService.currencyData$.subscribe(
      data => {
        if (data.data) {
          this.currencyData = data.data
          this.defaultCurrency = this.currencyData[0].text
          this.currencyValues = [
            { id: '0', symbol: '%' },
            { id: '1', symbol: this.defaultCurrency }
          ]
          console.log('currencyValues : ', this.currencyValues)
          this.convertToCurrencyData = [ ...this.currencyData ]
          if (this.currencyData.length >= 1) {
            this.CurrencyId = +this.currencyData[0].id
            this.currencyValue = +this.currencyData[0].id
            this.ConvertToCurrencyId = +this.convertToCurrencyData[0].id
            this.convertToCurrencyValue = +this.convertToCurrencyData[0].id
          }
        }
      }
    )

    this.freightData$ = this.purchaseService.freightData$.subscribe(
      data => {
        if (data.data) {
          this.freightData = data.data
        }
      }
    )

    this.chargestData$ = this.purchaseService.chargestData$.subscribe(
      data => {
        if (data.data) {
          this.chargesData = data.data
        }
      }
    )

    let _self = this
    this.addressData$ = this.purchaseService.addressData$.subscribe(
      data => {
        if (data.data) {
          _self.AddressData = Object.assign([], data.data)
          let id = 0
          if (_self.AddressData.length > 2) {
            id = +_self.AddressData[2].id
          }
          _self.AddressId = id
          _self.addressValue = id
          _self.addressSelect2.setElementValue(id)
        }
      }
    )

    this.settingData$ = this.purchaseService.settingData$.subscribe(
      data => {
        if (data.data) {
          this.settingData = data.data
          this.getSetUpModules(this.settingData)
        }
      }
    )

    this.newVendAdd$ = this.commonService.getVendStatus().subscribe(
      (data: AddCust) => {
        if (data.id && data.name) {
          let newData = Object.assign([], this.vendorData)
          newData.push({ id: data.id, text: data.name })
          this.vendorData = newData
          this.PartyId = +data.id
          this.vendorValue = data.id
          this.CreditLimit = 0
          this.CreditDays = 0
          this.setDueDate(this.CreditDays)
          setTimeout(() => {
            if (this.vendorSelect2) {
              const element = this.renderer.selectRootElement(this.vendorSelect2.selector.nativeElement, true)
              element.focus({ preventScroll: false })
            }
          }, 2000)
        }
      }
    )

    this.addressAdd$ = this.commonService.getAddressStatus().subscribe(
      (data: AddCust) => {
        if (data.id && data.name) {
          let newData = Object.assign([], this.AddressData)
          newData.push({ id: data.id, text: data.name })
          this.AddressData = newData
          this.AddressId = +data.id
          this.addressValue = data.id
          this.loadingSummary = true
          this.checkForGST()
          setTimeout(() => {
            if (this.addressSelect2) {
              const element = this.renderer.selectRootElement(this.addressSelect2.selector.nativeElement, true)
              element.focus({ preventScroll: false })
            }
          }, 2000)
        }
      }
    )

    this.unitAdd$ = this.commonService.getCompositeUnitStatus().subscribe(
      (data: AddCust) => {
        if (data.id && data.name) {
          let newData = Object.assign([], this.subUnitsData)
          newData.push({ id: +data.id, text: data.name })
          this.subUnitsData = newData
          this.UnitId = +data.id
          this.subUnitsValue = data.id
          setTimeout(() => {
            if (this.unitSelect2) {
              const element = this.renderer.selectRootElement(this.unitSelect2.selector.nativeElement, true)
              element.focus({ preventScroll: false })
            }
          }, 2000)
        }
      }
    )

    this.unitAdd$ = this.commonService.getUnitStatus().subscribe(
      (data: AddCust) => {
        if (data.id && data.name) {
          let newData = Object.assign([], this.subUnitsData)
          newData.push({ id: +data.id, text: data.name })
          this.subUnitsData = newData
          this.UnitId = +data.id
          this.subUnitsValue = data.id
          setTimeout(() => {
            if (this.unitSelect2) {
              const element = this.renderer.selectRootElement(this.unitSelect2.selector.nativeElement, true)
              element.focus({ preventScroll: false })
            }
          }, 2000)
        }
      }
    )

    this.itemAdd$ = this.commonService.getItemMasterStatus().subscribe(
      (data: AddCust) => {
        if (data.id && data.name) {
          let newData = Object.assign([], this.itemData)
          newData.push({ id: data.id, text: data.name })
          this.itemData = newData
          this.ItemId = +data.id
          this.itemValue = data.id
          setTimeout(() => {
            if (this.itemselect2) {
              const element = this.renderer.selectRootElement(this.itemselect2.selector.nativeElement, true)
              element.focus({ preventScroll: false })
            }
          }, 2000)
        }
      }
    )

    this.ledgerAdd$ = this.commonService.getLedgerStatus().subscribe(
      (data: AddCust) => {
        if (data.id && data.name) {
          let newData = Object.assign([], this.paymentLedgerselect2)
          newData.push({ id: data.id, text: data.name })
          this.paymentLedgerselect2 = newData
          this.LedgerId = +data.id
          this.ledger = data.id
          setTimeout(() => {
            if (this.ledgerSelect2) {
              const element = this.renderer.selectRootElement(this.ledgerSelect2.selector.nativeElement, true)
              element.focus({ preventScroll: false })
            }
          }, 2000)
        }
      }
    )

    this.taxAdd$ = this.commonService.getTaxStatus().subscribe(
      (data: AddCust) => {
        if (data.id && data.name) {
          let newData = Object.assign([], this.taxSlabsData)
          newData.push({ id: data.id, text: data.name })
          this.taxSlabsData = newData
          if (this.TaxSlabId === -1) {
            this.TaxSlabId = +data.id
            this.taxSlabValue = data.id
            setTimeout(() => {
              if (this.taxSlabSelect2) {
                const element = this.renderer.selectRootElement(this.taxSlabSelect2.selector.nativeElement, true)
                element.focus({ preventScroll: false })
              }
            }, 2000)
          } else if (this.TaxSlabChargeId === -1) {
            this.TaxSlabChargeId = +data.id
            this.taxSlabChargeValue = data.id
            setTimeout(() => {
              if (this.taxSlabChargeSelect2) {
                const element = this.renderer.selectRootElement(this.taxSlabChargeSelect2.selector.nativeElement, true)
                element.focus({ preventScroll: false })
              }
            }, 2000)
          }
        }
      }
    )
  }

  getEditData () {
    console.log('edit id : ', this.Id)
    this.purchaseService.getPurchaseDetailById(this.Id).subscribe(
      data => {
        console.log('edit data : ', data)
        if (data.Code === UIConstant.THOUSAND && data.Data) {
          this.allAddressData = data.Data.AddressDetails
          this.purchaseService.createAddress(data.Data.AddressDetails)
          this.createForm(data.Data)
        } else {
          this.toastrService.showError(data.Message, '')
        }
      }
    )
  }

  dataForEdit: any
  taxRatesForEdit = []
  createForm (data) {
    this.dataForEdit = data
    this.other = {}
    this.Items = []
    this.ItemAttributeTrans = []
    this.ItemTaxTrans = []
    this.AdditionalCharges = []
    this.PaymentDetail = []
    this.taxRatesForEdit = data.TaxRates
    this.createOther(data.PurchaseTransactions[0])
    this.createAttributes(data.ItemAttributesTrans)
    this.createItemTaxTrans(data.ItemTaxTransDetails)
    this.createItems(data.ItemTransactions)
    this.createAdditionalCharges(data.AdditionalChargeDetails)
    this.createTransaction(data.PaymentDetails)
    this.loading = false
    this.getBillSummary()
    this.creatingForm = false
  }

  createItemTaxTrans (taxRates) {
    taxRates.forEach((element, index) => {
      this.ItemTaxTrans[index] = {
        TaxTypeTax: element.TaxTypeTax,
        AmountTax: +element.AmountTax,
        ItemTransTaxId: element.ItemTransTaxId,
        ParentTaxId: element.ParentTaxId,
        ParentTypeTaxId: element.ParentTypeTaxId,
        ItemTransTypeTax: element.ItemTransTypeTax,
        TaxRateId: element.TaxRateId,
        TaxRate: element.TaxRate,
        ValueType: element.ValueType,
        TaxSlabName: element.TaxSlabName,
        TaxRateNameTax: element.TaxRateName,
        id: element.Id,
        Sno: index + 1
      }
    })

    console.log('this.ItemTaxTrans : ', this.ItemTaxTrans)
  }

  createAdditionalCharges (charges) {
    charges.forEach(element => {
      let taxRates = this.taxRatesForEdit.filter(taxRate => taxRate.LedgerId === FormConstants.ChargeForm && taxRate.SlabId === element.TaxSlabChargeId)
      let itemTaxTrans = []
      itemTaxTrans = this.ItemTaxTrans.filter((taxRate) => {
        if (taxRate.ItemTransTaxId === element.Id) {
          return taxRate
        }
      })
      if (+element.TaxTypeCharge === 0) {
        this.taxTypeChargeName = 'Exclusive'
      } else {
        this.taxTypeChargeName = 'Inclusive'
      }
      console.log('itemTaxTrans : ', itemTaxTrans)

      this.LedgerChargeId = element.LedgerChargeId
      this.LedgerName = element.LedgerName
      this.AmountCharge = element.AmountCharge
      this.TaxSlabChargeId = element.TaxSlabChargeId
      this.TaxChargeName = element.TaxChargeName
      this.TaxAmountCharge = element.TaxAmountCharge
      this.TotalAmountCharge = element.TotalAmountCharge
      this.TaxTypeCharge = element.TaxTypeCharge
      this.taxTypeChargeName = this.taxTypeChargeName
      this.taxChargeSlabType = element.TaxSlabType
      this.taxChargeRates = taxRates
      this.TaxableAmountCharge = (+element.TaxTypeCharge === 0) ? this.AmountCharge : +this.TotalAmountCharge - this.TaxAmountCharge
      this.addCharge()
      if (this.AdditionalCharges[this.AdditionalCharges.length - 1]) {
        this.AdditionalCharges[this.AdditionalCharges.length - 1].Id = element.Id
        this.AdditionalCharges[this.AdditionalCharges.length - 1].itemTaxTrans = itemTaxTrans
      } else {
        this.toastrService.showError('Not getting enough data for edit', '')
      }
    })
    console.log('this.AdditionalCharges : ', this.AdditionalCharges)
  }

  itemAttributesOthers: any = []
  createAttributes (attributes) {
    attributes.forEach((element, index) => {
      this.itemAttributesOthers[index] = {
        ItemId: element.ItemId,
        ItemTransId: element.ItemTransId,
        AttributeId:  element.AttributeId,
        ParentTypeId: FormConstants.PurchaseForm,
        name: element.AttributeName,
        Id: element.Id,
        Sno: index + 1
      }
    })
    // console.log('this.itemAttributesOthers : ', this.itemAttributesOthers)
  }

  createItems (ItemTransactions) {
    ItemTransactions.forEach(element => {
      let taxRates = this.taxRatesForEdit.filter(taxRate => taxRate.LedgerId === FormConstants.PurchaseForm && taxRate.SlabId === element.TaxSlabId)
      let total = +(isNaN(+element.PurchaseRate) ? 0 : +element.PurchaseRate)
      * (isNaN(+element.Quantity) || +element.Quantity === 0 ? 1 : +element.Quantity)
      * (isNaN(+element.Length) || +element.Length === 0 ? 1 : +element.Length)
      * (isNaN(+element.Width) || +element.Width === 0 ? 1 : +element.Width)
      * (isNaN(+element.Height) || +element.Height === 0 ? 1 : +element.Height)
      this.AmountItem = total - element.DiscountAmt
      let itemTaxTrans = []
      itemTaxTrans = this.ItemTaxTrans.filter((taxRate) => {
        if (taxRate.ItemTransTaxId === element.Id) {
          return taxRate
        }
      })
      console.log('itemTaxTrans : ', itemTaxTrans)
      let itemAttributeTrans = []
      if (this.itemAttributesOthers.length > 0) {
        itemAttributeTrans = this.itemAttributesOthers.filter((attr) => {
          if (attr.ItemTransId === element.Id) {
            return attr
          }
        })
      }
      if (+element.TaxType === 0) {
        this.taxTypeName = 'Exclusive'
      } else {
        this.taxTypeName = 'Inclusive'
      }
      console.log('itemAttributeTrans : ', itemAttributeTrans)
      this.TransType = element.TransType
      this.TransId = element.TransId
      this.ChallanId = element.ChallanId
      this.categoryId = element.CategoryId
      this.ItemId = element.ItemId
      this.UnitId = element.UnitId
      this.Length = +element.Length
      this.Height = +element.Height
      this.Width = +element.Width
      this.Quantity = +element.Quantity
      this.SaleRate = element.SaleRate
      this.MrpRate = element.MrpRate
      this.PurchaseRate = +element.PurchaseRate
      this.TaxSlabId = element.TaxSlabId
      this.TaxType = element.TaxType
      this.TaxAmount = element.TaxAmount
      this.DiscountType = element.DiscountType
      this.Discount = element.Discount
      this.DiscountAmt = element.DiscountAmt
      this.ExpiryDate = (element.ExpiryDate) ? this.gs.utcToClientDateFormat(element.ExpiryDate, this.clientDateFormat) : ''
      this.MfdDate = (element.MfdDate) ? this.gs.utcToClientDateFormat(element.MfdDate, this.clientDateFormat) : ''
      this.BatchNo = element.BatchNo
      this.Remark = element.Remark
      this.itemName = element.ItemName
      this.categoryName = element.CategoryName
      this.unitName = element.UnitName
      this.taxSlabName = element.TaxSlabName
      this.taxTypeName = this.taxTypeName
      this.SubTotal = +element.SubTotal
      this.itemAttributeTrans = itemAttributeTrans
      this.taxSlabType = element.TaxSlabType
      this.taxRates = taxRates
      this.editItemId = element.Id
      this.AmountItem = (+element.TaxType === 0) ? this.calcTotal() : +this.SubTotal - this.TaxAmount
      if (this.taxCalInclusiveType === 2) {
        if ('' + this.DiscountType === '0') {
          if (+this.Discount < 100 && +this.Discount > 0) {
            this.DiscountAmt = +((+this.Discount / 100) * (this.AmountItem)).toFixed(this.noOfDecimalPoint)
          } else if (+this.Discount === 100 || +this.Discount === 0 ) {
            this.DiscountAmt = 0
          }
        }
        this.AmountItem = this.AmountItem - this.DiscountAmt
      }
      this.addItems()
      if (this.Items[this.Items.length - 1]) {
        this.Items[this.Items.length - 1].Id = element.Id
        this.Items[this.Items.length - 1].itemTaxTrans = itemTaxTrans
      } else {
        this.toastrService.showError('Not getting enough data for edit', '')
      }
    })
    console.log('items : ', this.Items)
  }

  calcTotal () {
    const totalAmount = ((isNaN(+this.PurchaseRate) ? 0 : +this.PurchaseRate)
      * (isNaN(+this.Quantity) || +this.Quantity === 0 ? 1 : +this.Quantity)
      * (isNaN(+this.Length) || +this.Length === 0 ? 1 : +this.Length)
      * (isNaN(+this.Width) || +this.Width === 0 ? 1 : +this.Width)
      * (isNaN(+this.Height) || +this.Height === 0 ? 1 : +this.Height)
    )
    - (isNaN(+this.DiscountAmt) ? 0 : +this.DiscountAmt)
    return totalAmount
  }

  createTransaction (paymentDetails) {
    paymentDetails.forEach(element => {
      this.Paymode = element.Paymode
      this.PayModeId = element.PayModeId
      this.LedgerId = element.LedgerId
      this.BankLedgerName = element.BankLedgerName
      this.Amount = element.Amount
      this.PayDate = this.gs.utcToClientDateFormat(element.PayDate, this.clientDateFormat)
      this.ChequeNo = element.ChequeNo
      this.addTransactions()
      if (this.PaymentDetail[this.PaymentDetail.length - 1]) {
        this.PaymentDetail[this.PaymentDetail.length - 1].Id = element.Id
      } else {
        this.toastrService.showError('Not getting enough data for edit', '')
      }
    })
    // console.log('this.PaymentDetail : ', this.PaymentDetail)
  }

  other: any = {}
  createOther (others) {
    // this.setBillDate()
    // this.setPartyBillDate()
    this.BillNo = others.BillNo
    this.ReferralCommissionTypeId = others.ReferralCommissionTypeId
    this.ReferralCommission = +others.ReferralCommission
    // this.BillAmount = +others.BillAmount
    this.BillDate = this.gs.utcToClientDateFormat(others.BillDate, this.clientDateFormat)
    this.PartyBillDate = this.gs.utcToClientDateFormat(others.PartyBillDate, this.clientDateFormat)
    this.DueDate = this.gs.utcToClientDateFormat(others.DueDate, this.clientDateFormat)
    this.PartyBillNo = others.PartyBillNo
    this.ConvertedAmount = +others.ConvertedAmount
    this.CurrencyRate = +others.CurrencyRate
    this.TotalDiscount = 0
    this.Freight = +others.Freight
    this.FreightMode = +others.FreightMode
    this.PartyId = +others.LedgerId
    this.ReferralId = others.ReferralId
    this.ReferralTypeId = others.ReferralTypeId
    this.ReverseCharge = 0
    this.ReverseTax = 0
    this.CessAmount = 0
    this.RoundOff = others.RoundOff
    this.SubTotalAmount = 0
    this.TotalTaxAmount = 0
    this.TotalChallan = 0
    this.VehicleNo = others.VehicleNo
    this.Drivername = others.Drivername
    this.Transportation = others.Transportation
    this.TotalQty = +others.TotalQty
    this.OtherCharge = +others.OtherCharge
    this.GodownId = +others.GodownId
    this.CurrencyId = +others.CurrencyId
    this.OrgId = +others.OrgId
    this.InterestRate = others.InterestRate
    this.InterestAmount = others.InterestAmount
    this.InterestType = others.InterestType
    this.OrderId = 0
    this.Advanceamount = 0
    this.NetAmount = 0
    this.AddressId = +others.AddressId
    this.CreditDays = +others.CreditDays
    this.CreditLimit = +others.CreditLimit
    this.ConvertToCurrencyId = +others.ConvertedCurrencyId
    this.LocationTo = others.LocationTo
    this.isOtherState = !!others.IsOtherStatemain
    this.defaultCurrency = others.Currency
    // console.log('currency values : ', this.currencyValues)
    this.setPayDate()
    this.setExpiryDate()
    this.setDueDate(0)
    this.setMfdDate()
    this.other = others
    this.formReadySub.next(true)
  }

  getAllCategories (categoryName, categoryId, isAddNew) {
    this.commonService.getAllCategories().subscribe(
      data => {
        // console.log('all categories : ', data)
        let levelNo = 0
        if (data.Code === UIConstant.THOUSAND && data.Data && data.Data.length > 0) {
          this.getCatagoryDetail(data.Data)
          data.Data.forEach(category => {
            if (+category.Id === +categoryId) {
              levelNo = +category.LevelNo
              return
            }
          })
          this.categoryName = categoryName
          this.categoryId = categoryId
          this.catSelect2.forEach((item: Select2Component, index: number, array: Select2Component[]) => {
            if ((index + 1) === levelNo) {
              item.setElementValue(this.categoryId)
            }
          })
          // this.updateCategories(categoryId)
          // console.log('categoryname : ', this.categoryName)
          let evt = { value: categoryId, data: [{ text: categoryName }] }
          this.onSelectCategory(evt, levelNo)
        }
      }
    )
  }

  @ViewChild('convertTo_select2') convertToSelect2: Select2Component

  noOfDecimalPoint: number = 0
  backDateEntry: boolean = false
  isBillNoManuall: boolean = false
  freightAndOtherChangeCalc: string
  taxCalInclusiveType: number = 2
  getSetUpModules (settings) {
    console.log('settings : ', settings)
    settings.forEach(element => {
      if (element.id === SetUpIds.catLevel) {
        this.catLevel = +element.val
      }
      if (element.id === SetUpIds.dateFormat) {
        this.clientDateFormat = element.val
      }
      if (element.id === SetUpIds.noOfDecimalPoint) {
        this.noOfDecimalPoint = +element.val
      }
      if (element.id === SetUpIds.unitType) {
        this.unitSettingType = +element.val
      }
      if (element.id === SetUpIds.gstCalculationOnFreightOrOtherChange) {
        this.freightAndOtherChangeCalc = 'Max'
      }
      if (element.id === SetUpIds.backDateEntry) {
        this.backDateEntry = element.val
      }
      if (element.id === SetUpIds.purchaseBillNoManually) {
        this.isBillNoManuall = !!(+element.val)
        console.log('isBillNoManuall : ', this.isBillNoManuall)
      }
      if (element.id === SetUpIds.taxCalInclusive) {
        this.taxCalInclusiveType = +element.val
      }
    })
    this.createModels(this.catLevel)
  }

  @ViewChild('vendor_select2') vendorSelect2: Select2Component
  onVendorSelect (event) {
    console.log('vendor select : ', event)
    if (event.value && event.data.length > 0) {
      if (event.value === '-1' && event.data[0] && event.data[0].text === UIConstant.ADD_NEW_OPTION) {
        this.vendorSelect2.selector.nativeElement.value = ''
        this.commonService.openVend('', true)
      } else if (+event.value === 0) {
        this.allAddressData = []
        this.AddressData = Object.assign([], this.allAddressData)
      } else {
        if (event.value > 0 && event.data[0] && event.data[0].text) {
          this.PartyId = +event.value
          this.getAllAddresses(this.PartyId)
        }
      }
      this.checkForValidation()
    }
  }

  getAllAddresses (vendorId) {
    this.purchaseService.getAllAddresses(vendorId).subscribe(data => {
      // console.log('addresses : ', data)
      if (data.Code === UIConstant.THOUSAND && data.Data) {
        if (data.Data.AddressDetails && data.Data.AddressDetails) {
          this.allAddressData = data.Data.AddressDetails
          console.log(this.allAddressData)
          this.purchaseService.createAddress(data.Data.AddressDetails)
        }
        if (data.Data.LedgerDetails && data.Data.LedgerDetails.length > 0) {
          const LedgerDetails = data.Data.LedgerDetails[0]
          this.CreditLimit = LedgerDetails.CreditLimit
          this.CreditDays = LedgerDetails.CreditDays
          this.setDueDate(this.CreditDays)
        }
      }
    })
  }

  getNewBillNo () {
    if (this.BillDate) {
      this.setPayDate()
    }
    if (+this.OrgId > 0 && this.BillDate) {
      let newBillDate = this.gs.clientToSqlDateFormat(this.BillDate, this.clientDateFormat)
      let type = (this.isBillNoManuall) ? 2 : 1
      this.purchaseService.getNewBillNoPurchase(+this.OrgId, newBillDate, type).subscribe(
        data => {
          console.log('new bill no : ', data)
          if (data.Code === UIConstant.THOUSAND && data.Data) {
            if (data.Data.length > 0) {
              if (!this.isBillNoManuall) {
                this.BillNo = data.Data[0].BillNo
              } else {
                this.previousBillNo = data.Data[0].BillNo
              }
            } else {
              this.previousBillNo = ''
              this.BillNo = ''
            }
          } else {
            this.toastrService.showError(data.Message, '')
          }
        }
      )
    }
  }

  @ViewChild('currency_select2') currencySelect2: Select2Component
  openModal () {
    setTimeout(() => {
      $('#purchase_modal').modal(UIConstant.MODEL_SHOW)
    }, 100)
    this.industryId = +this.settings.industryId
    this.taxTypeData = [
      { id: '0', text: 'Exclusive' },
      { id: '1', text: 'Inclusive' }
    ]
    this.initItem()
    this.initTransaction()
    this.initCharge()

    if (!this.editMode) {
      if (!this.isBillNoManuall) {
        this.setBillNo(this.TransactionNoSetups)
      }
      this.setBillDate()
      this.setPartyBillDate()
      this.setPayDate()
      this.setExpiryDate()
      this.setDueDate(0)
      this.setMfdDate()
      this.loading = false
      setTimeout(() => {
        if (this.vendorSelect2) {
          this.vendorSelect2.selector.nativeElement.focus()
        }
        this.commonService.fixTableHF('cat-table')
      }, 1000)
    } else {
      if (this.editMode) {
        this.getEditData()
      }
    }
  }

  checkForExistence: any = []
  getFormDependency () {
    this.commonService.getFormDependency(UIConstant.PURCHASE_TYPE).subscribe(
      data => {
        if (data.Code === UIConstant.THOUSAND && data.Data) {
          data.Data.forEach((element) => {
            if (element.IsIdentity) {
              element['FieldValue'] = this.Id
            }
          })
          this.checkForExistence = data.Data
          console.log('dependency : ', this.checkForExistence)
        }
      }
    )
  }

  closeModal () {
    if ($('#purchase_modal').length > 0) {
      $('#purchase_modal').modal(UIConstant.MODEL_HIDE)
    }
  }

  setBillNo (setups) {
    if (setups && setups.length > 0) {
      this.BillNo = setups[0].BillNo
    }
  }

  getCatLevel () {
    let _self = this
    this.commonService.getSettingById(SetUpIds.catLevel).subscribe(
      (data) => {
        if (data.Code === UIConstant.THOUSAND) {
          const setUpSettings = data.Data.SetupClients
          _self.catLevel = +setUpSettings[0].Val
        }
      }
    )
  }

  unitSettingType: number = 1
  setPayDate () {
    let _self = this
    if (this.backDateEntry) {
      jQuery(function ($) {
        flatpickr('#pay-date', {
          dateFormat: _self.clientDateFormat,
          defaultDate: [_self.BillDate]
        })
      })
    } else {
      jQuery(function ($) {
        flatpickr('#pay-date', {
          minDate: 'today',
          dateFormat: _self.clientDateFormat,
          defaultDate: [_self.BillDate]
        })
      })
    }
    _self.PayDate = _self.BillDate
  }

  setBillDate () {
    let _self = this
    if (this.backDateEntry) {
      jQuery(function ($) {
        flatpickr('#bill-date1', {
          dateFormat: _self.clientDateFormat,
          defaultDate: [_self.gs.getDefaultDate(_self.clientDateFormat)]
        })
      })
    } else {
      jQuery(function ($) {
        flatpickr('#bill-date1', {
          minDate: 'today',
          dateFormat: _self.clientDateFormat,
          defaultDate: [_self.gs.getDefaultDate(_self.clientDateFormat)]
        })
      })
    }
    this.BillDate = _self.gs.getDefaultDate(_self.clientDateFormat)
  }

  setPartyBillDate () {
    let _self = this
    if (this.backDateEntry) {
      jQuery(function ($) {
        flatpickr('#party-bill-date1', {
          dateFormat: _self.clientDateFormat,
          defaultDate: [_self.gs.getDefaultDate(_self.clientDateFormat)]
        })
      })
    } else {
      jQuery(function ($) {
        flatpickr('#party-bill-date1', {
          minDate: 'today',
          dateFormat: _self.clientDateFormat,
          defaultDate: [_self.gs.getDefaultDate(_self.clientDateFormat)]
        })
      })
    }
    this.PartyBillDate = _self.gs.getDefaultDate(_self.clientDateFormat)
  }

  setDueDate (creditDays) {
    let _self = this
    const date = _self.gs.setDueDate(creditDays, _self.clientDateFormat)
    jQuery(function ($) {
      flatpickr('#due-date1', {
        dateFormat: _self.clientDateFormat,
        defaultDate: [date]
      })
    })
    this.DueDate = date
  }

  setExpiryDate () {
    let _self = this
    jQuery(function ($) {
      flatpickr('#expiry-date', {
        minDate: 'today',
        dateFormat: _self.clientDateFormat
      })
    })
  }

  setMfdDate () {
    let _self = this
    jQuery(function ($) {
      flatpickr('#mfd-date', {
        dateFormat: _self.clientDateFormat
      })
    })
  }

  createModels (levels) {
    // console.log('levels : ', levels)
    this.categories = []
    let obj = { placeholder: 'Select Category',
      value: 'category',
      data: [{ id: '0', text: 'Select Category' }],
      level: 1
    }
    this.categories.push({ ...obj })
    if (levels > 1) {
      for (let i = 0; i < levels - 1; i++) {
        obj['value'] = 'sub' + this.categories[this.categories.length - 1].value
        obj['level'] = this.categories[this.categories.length - 1].level + 1
        obj['data'] = [{ id: '0', text: 'Select Category' }]
        this.categories.push({ ...obj })
      }
    }
    // console.log('categories : ', this.categories)
  }

  allCategories: any = []
  getCatagoryDetail (data) {
    // console.log('category data : ', data)
    for (let i = 0; i < this.catLevel; i++) {
      if (this.categories[i]) {
        this.categories[i].data = [{ id: '0', text: 'Select Category' }]
      }
    }
    this.allCategories = [ ...data ]
    let _self = this
    data.forEach(category => {
      // console.log('category.LevelNo : ', category.LevelNo)
      if (_self.categories[category.LevelNo - 1]) {
        _self.categories[category.LevelNo - 1].data.push({
          text: category.Name,
          id: category.Id
        })
      }
    })
    for (let i = 0; i < this.catLevel; i++) {
      if (this.categories[i]) {
        this.categories[i].data = Object.assign([], this.categories[i].data)
      }
    }
    // console.log('dynamic categories : ', this.categories)
    this.loading = false
  }

  catStr: string = ''
  onSelectCategory (evt, levelNo) {
    console.log('evt on change of category : ', evt, 'level : ', levelNo)
    if (this.catLevel > 1) {
      if (+evt.value > 0) {
        if (levelNo === this.catLevel) {
          if (this.categoryId !== +evt.value) {
            this.categoryId = +evt.value
            this.categoryName = evt.data[0].text
            this.checkForItems(+evt.value)
            this.validateItem()
          }
        } else {
          if (levelNo < this.catLevel) {
            let categoryId = +evt.value
            this.categoryName = evt.data[0].text
            let newData = []
            this.categories[levelNo].data = [{ id: '0', text: 'Select Category' }]
            this.allCategories.forEach(category => {
              if (category.LevelNo !== levelNo && category.LevelNo > levelNo) {
                if (category.ParentId === categoryId) {
                  newData.push({
                    text: category.Name,
                    id: category.Id
                  })
                }
              } else {
                this.categories[category.LevelNo - 1].data.push({
                  text: category.Name,
                  id: category.Id
                })
              }
            })
            this.categories[levelNo].data = Object.assign([], newData)
            this.loading = false
          }
        }
      }
      if (+evt.value === 0) {
        this.getCatagoryDetail(this.allCategories)
        this.checkForItems(+evt.value)
      }
    } else {
      if (levelNo === this.catLevel) {
        if (this.categoryId !== +evt.value) {
          this.categoryId = +evt.value
          this.categoryName = evt.data[0].text
          this.checkForItems(+evt.value)
          this.validateItem()
          this.updateCategories(+evt.value)
        }
      }
    }
  }

  checkForItems (categoryId) {
    let newItemsList = []
    if (categoryId > 0) {
      this.allItems.forEach(item => {
        if (item.CategoryId === categoryId) {
          newItemsList.push(item)
        }
      })
      if (this.editItemId === -1) {
        this.purchaseService.createItems(newItemsList)
      } else {
        let newData = [{ id: '0', text: 'Select Items' }, { id: '-1', text: UIConstant.ADD_NEW_OPTION }]
        newItemsList.forEach(item => {
          newData.push({
            id: item.Id,
            text: item.Name
          })
        })
        this.itemData = Object.assign([], newData)
      }
    } else if (categoryId === 0) {
      this.purchaseService.createItems(this.allItems)
    }
  }

  @ViewChild('item_select2') itemselect2: Select2Component
  onItemSelect (evt) {
    if (evt.value && evt.data.length > 0) {
      // console.log('evt on change of item : ', evt)
      if (+evt.value === 0) {
        this.ItemId = +evt.value
        this.validateItem()
        this.calculate()
      }
      if (+evt.value === -1) {
        if (this.categoryId > 0) {
          this.commonService.openItemMaster('', this.categoryId)
          this.itemselect2.selector.nativeElement.value = ''
        } else {
          this.toastrService.showInfo('Please select a category', '')
        }
        this.validateItem()
      } else {
        if (evt.value > 0 && evt.data[0] && evt.data[0].text) {
          this.ItemId = +evt.value
          this.itemName = evt.data[0].text
          this.getItemDetail(this.ItemId)
          this.updateAttributes()
        }
      }
    }
  }

  getItemDetail (id) {
    this.purchaseService.getItemDetail(id).subscribe(data => {
      console.log('item detail : ', data)
      if (data.Code === UIConstant.THOUSAND) {
        if (data.Data.length > 0) {
          this.categoryName = data.Data[0].CategoryName
          this.updateCategories(data.Data[0].CategoryId)
          // console.log('categoryname : ', this.categoryName)
          this.TaxSlabId = data.Data[0].TaxId
          this.UnitId = data.Data[0].UnitId
          this.unitSelect2.setElementValue(data.Data[0].UnitId)
          this.unitName = data.Data[0].UnitName
          this.taxSlabSelect2.setElementValue(data.Data[0].TaxId)
          this.taxSlabName = data.Data[0].TaxSlab
          this.SaleRate = data.Data[0].SaleRate
          this.PurchaseRate = data.Data[0].PurchaseRate
          this.MrpRate = data.Data[0].Mrprate
          if (+this.TaxSlabId > 0) {
            this.getTaxDetail(this.TaxSlabId)
          } else {
            this.validateItem()
            this.calculate()
          }
        }
      } else {
        throw new Error (data.Description)
      }
    },
    (error) => {
      this.toastrService.showError(error, '')
    })
  }

  onAttributeSelect (evt, index, attributeId) {
    // console.log('evt on change of attribute : ', evt)
    if (+evt.value > 0 && evt.data.length > 0) {
      let Sno = 0
      if (this.Items.length === 0) {
        Sno = 1
      } else {
        Sno = this.Items[this.Items.length - 1].Sno + 1
      }
      if (this.itemAttributeTrans[index]) {
        this.itemAttributeTrans[index]['ItemId'] = this.ItemId
        this.itemAttributeTrans[index]['AttributeId'] = +evt.value
        this.itemAttributeTrans[index]['ParentTypeId'] = FormConstants.PurchaseForm
        this.itemAttributeTrans[index]['name'] = evt.data[0].text
      } else {
        this.itemAttributeTrans[index] = {
          ItemId: this.ItemId,
          ItemTransId: Sno,
          AttributeId:  +evt.value,
          ParentTypeId: FormConstants.PurchaseForm,
          name: evt.data[0].text,
          id: 0,
          Sno: Sno
        }
      }
    } else if (+evt.value === -1) {
      let data = {
        addNewId: attributeId,
        attrNameId: attributeId,
        attrValue: attributeId,
        disabledAddButton: true
      }
      let item = this.attrSelect2.find((attr: Select2Component, i: number, array: Select2Component[]) => {
        return i === index
      })
      item.selector.nativeElement.value = ''
      this.commonService.openAttribute(data, true)
    }

    this.attrSelect2.forEach((attr: Select2Component, index: number, array: Select2Component[]) => {
      if (this.itemAttributeTrans[index] && this.itemAttributeTrans[index].AttributeId > 0) {
        $('#' + $('.attr')[index].id).removeClass('errorSelecto')
      } else {
        $('#' + $('.attr')[index].id).addClass('errorSelecto')
      }
    })
    // console.log('this.itemAttributeTrans : ', this.itemAttributeTrans)
    this.validateItem()
  }

  updateAttributes () {
    for (let i = 0; i < this.itemAttributeTrans.length; i++) {
      this.itemAttributeTrans[i].ItemId = this.ItemId
    }
  }

  getParentCatStr (id) {
    let name = ''
    this.allCategories.forEach(category => {
      if (id === category.Id) {
        name = category.Name
      }
    })
    return name
  }

  getPattern (): string {
    let childmostId = this.categoryId
    let pattern = [this.categoryId]
    this.catSelect2.forEach(() => {
      let parent = this.getParentCat(childmostId)
      if (parent !== 0) {
        pattern.push(parent)
        childmostId = parent
      }
    })
    pattern = pattern.reverse()

    let str = ''
    this.catSelect2.forEach((cat: Select2Component, index: number) => {
      if (index === (this.catLevel - 1)) {
        str += this.getParentCatStr(pattern[index])
      } else {
        str += this.getParentCatStr(pattern[index]) + ' => '
      }
    })

    return str
  }

   // console.log('id : ', id)
  // console.log('level : ', level)
   // console.log('parentMostCategory : ', parentMostCategory)
  getParentMostCat (id, level) {
    let parentMostCategory = 0
    while (level !== 0) {
      this.allCategories.forEach(category => {
        if (id === category.Id) {
          parentMostCategory = category.Id
          id = category.ParentId
          level--
        }
      })
    }
    this.parentMostCategory = parentMostCategory
  }

  getParentCat (id) {
    let parentId = 0
    this.allCategories.forEach(category => {
      if (id === category.Id) {
        parentId = category.ParentId
      }
    })
    return parentId
  }
// this.catSelect2.forEach((item: Select2Component, index: number) => {
      //   if (index !== 0) {
      //     this.updateCatArray(pattern[index - 1], index)
      //   }
      // })
    //console.log('new cateogries : ', this.categories)
  @ViewChildren('cat_select2') catSelect2: QueryList<Select2Component>
  updateCategories (childmostId) {
    console.log('childmostId id : ', childmostId)
    console.log('this.categoryId id : ', this.categoryId)
    if (this.categoryId !== childmostId || this.editItemId !== -1) {
      let pattern = [childmostId]
      this.catSelect2.forEach(() => {
        let parent = this.getParentCat(childmostId)
        if (parent !== 0) {
          pattern.push(parent)
          childmostId = parent
        }
      })
      pattern = pattern.reverse()
      setTimeout(() => {
        this.catSelect2.forEach((item: Select2Component, index: number) => {
          item.setElementValue(pattern[index])
        })
      }, 100)
    }
  }

  updateCatArray (id, levelNo) {
    console.log('evt on updateCatArray of category : ', id, 'level : ', levelNo)
    if (levelNo < this.catLevel) {
      let categoryId = +id
      let newData = []
      this.categories[levelNo].data = [{ id: '0', text: 'Select Category' }]
      this.allCategories.forEach(category => {
        if (category.LevelNo === levelNo + 1 && category.ParentId === categoryId) {
          newData.push({
            text: category.Name,
            id: category.Id
          })
        }
      })
      console.log('level no : ', levelNo, 'new data : ', newData)
      this.categories[levelNo].data = newData
      // this.categories = Object.assign([], this.categories)
    }
  }

  appliedTaxRatesItem: any = []
  appliedTaxRatesCharge: any = []
  calculate () {
    let total = +(isNaN(+this.PurchaseRate) ? 0 : +this.PurchaseRate)
    * (isNaN(+this.Quantity) || +this.Quantity === 0 ? 1 : +this.Quantity)
    * (isNaN(+this.Length) || +this.Length === 0 ? 1 : +this.Length)
    * (isNaN(+this.Width) || +this.Width === 0 ? 1 : +this.Width)
    * (isNaN(+this.Height) || +this.Height === 0 ? 1 : +this.Height)
    if (this.validDiscount) {
      if ('' + this.DiscountType === '0') {
        if (+this.Discount < 100 && +this.Discount > 0) {
          this.DiscountAmt = +((+this.Discount / 100) * (total)).toFixed(this.noOfDecimalPoint)
        } else if (+this.Discount === 100 || +this.Discount === 0 ) {
          this.DiscountAmt = 0
        }
      } else {
        this.DiscountAmt = isNaN(+this.Discount) ? 0 : +this.Discount
      }
      if (this.taxRates.length > 0 && total > 0) {
        let discountedAmount = total - this.DiscountAmt
        this.AmountItem = discountedAmount
        if (this.TaxType === 0) {
          let returnTax = this.purchaseService.taxCalculation(this.taxRates,
            this.taxSlabType,
            discountedAmount,
            this.isOtherState, FormConstants.PurchaseForm, this.taxSlabName)
          this.TaxAmount = +(returnTax.taxAmount).toFixed(4)
          this.appliedTaxRatesItem = returnTax.appliedTaxRates
        } else {
          if (this.taxCalInclusiveType === 1) {
            let AmountItem = +(this.purchaseService.calcTaxableAmountType1(this.taxRates,
              this.taxSlabType,
              discountedAmount,
              this.isOtherState)).toFixed(4)
            this.AmountItem = AmountItem
            let returnTax = this.purchaseService.taxCalCulationForInclusive(this.taxRates,
              this.taxSlabType,
              this.AmountItem,
              this.isOtherState, FormConstants.PurchaseForm, this.taxSlabName)
            this.TaxAmount = +(returnTax.taxAmount).toFixed(4)
            this.appliedTaxRatesItem = returnTax.appliedTaxRates
          } else {
            let AmountItem = +(this.purchaseService.calcTaxableAmountType2(this.taxRates,
              this.taxSlabType,
              total,
              this.isOtherState)).toFixed(4)
            if ('' + this.DiscountType === '0') {
              if (+this.Discount < 100 && +this.Discount > 0) {
                this.DiscountAmt = +((+this.Discount / 100) * (AmountItem)).toFixed(this.noOfDecimalPoint)
              } else if (+this.Discount === 100 || +this.Discount === 0 ) {
                this.DiscountAmt = 0
              }
            }
            this.AmountItem = AmountItem - this.DiscountAmt
            let returnTax = this.purchaseService.taxCalCulationForInclusiveType2(this.taxRates,
              this.taxSlabType,
              this.AmountItem,
              this.isOtherState, FormConstants.PurchaseForm, this.taxSlabName)
            this.TaxAmount = +(returnTax.taxAmount).toFixed(4)
            this.appliedTaxRatesItem = returnTax.appliedTaxRates
          }
        }
      } else {
        if (this.editItemId === -1) {
          this.TaxAmount = 0
        }
      }
    } else {
      this.DiscountAmt = 0
      this.TaxAmount = 0
    }
    // this.Freight = isNaN(+this.Freight) ? 0 : +this.Freight
    // console.log('tax taxChargeRates : ', this.taxChargeRates)
    this.TaxableAmountCharge = +this.AmountCharge
    if (this.taxChargeRates.length > 0 && +this.AmountCharge > 0) {
      if (this.TaxTypeCharge === 0) {
        let returnTax = this.purchaseService.taxCalculation(this.taxChargeRates,
          this.taxChargeSlabType,
          +this.AmountCharge,
          this.isOtherState, FormConstants.ChargeForm, this.TaxChargeName)
        this.TaxAmountCharge = +(returnTax.taxAmount).toFixed(4)
        this.appliedTaxRatesCharge = returnTax.appliedTaxRates
      } else {
        if (this.TaxTypeCharge === 1) {
          let AmountCharge = this.purchaseService.calcTaxableAmountType1 (this.taxChargeRates,
            this.taxChargeSlabType, +this.AmountCharge, this.isOtherState)
          console.log('amount charge : ', AmountCharge)
          this.TaxableAmountCharge = +AmountCharge.toFixed(this.noOfDecimalPoint)
          let returnTax = this.purchaseService.taxCalCulationForInclusive(this.taxChargeRates,
            this.taxChargeSlabType,
            +AmountCharge,
            this.isOtherState, FormConstants.ChargeForm, this.TaxChargeName)
          this.TaxAmountCharge = +(returnTax.taxAmount).toFixed(4)
          this.appliedTaxRatesCharge = returnTax.appliedTaxRates
        }
      }
    } else if (this.editChargeId === -1) {
      this.TaxAmountCharge = 0
    }
    // console.log('TaxAmountCharge : ', this.TaxAmountCharge)
    if (+this.AmountCharge > 0) {
      this.TotalAmountCharge = +(+this.AmountCharge +  + ((this.TaxTypeCharge === 0) ? (isNaN(+this.TaxAmountCharge) ? 0 : +this.TaxAmountCharge) : 0)).toFixed(this.noOfDecimalPoint)
    } else {
      this.TotalAmountCharge = 0
    }
    this.TotalAmountCharge = +this.TotalAmountCharge.toFixed(4)
    this.InterestAmount = 0
    this.SubTotal = +(this.calculateTotalOfRow()).toFixed(this.noOfDecimalPoint)
    if (+this.ItemId > 0 || +this.LedgerChargeId > 0) {
      this.calculateAllTotal()
    } else {
      this.backtrackCalc()
    }
    this.getBillSummary()
  }

  calculateTotalOfRow () {
    let totalAmount = this.AmountItem + (isNaN(+this.TaxAmount) ? 0 : +this.TaxAmount)
    return isNaN(totalAmount) ? 0 : totalAmount
  }

  calculatePaymentAmount () {
    let paymentTotal = 0
    for (let i = 0; i <= this.PaymentDetail.length - 1; i++) {
      paymentTotal = paymentTotal + +this.PaymentDetail[i].Amount
    }
    if (this.BillAmount > 0 && paymentTotal >= 0 && paymentTotal < this.BillAmount) {
      this.Amount = +(this.BillAmount - paymentTotal).toFixed(this.noOfDecimalPoint)
    } else if (paymentTotal > this.BillAmount) {
      this.Amount = 0
    }
    // console.log('amount : ', this.Amount)
  }

  backtrackCalc () {
    let totalDiscount = 0
    let totalTax = 0
    let totalQuantity = 0
    let totalAmount = 0
    for (let i = 0; i < this.Items.length; i++) {
      totalDiscount = totalDiscount + +this.Items[i].DiscountAmt
      totalTax = totalTax + +this.Items[i].TaxAmount
      totalQuantity = totalQuantity + +this.Items[i].Quantity
      totalAmount = +totalAmount + +this.Items[i].SubTotal
    }
    this.TotalDiscount = +totalDiscount.toFixed(this.noOfDecimalPoint)
    this.TotalTaxAmount = +totalTax.toFixed(this.noOfDecimalPoint)
    this.TotalQty = +totalQuantity.toFixed(this.noOfDecimalPoint)
    this.SubTotalAmount = +totalAmount.toFixed(this.noOfDecimalPoint)
    for (let i = 0; i < this.AdditionalCharges.length; i++) {
      totalAmount = +totalAmount + +this.AdditionalCharges[i].TotalAmountCharge
    }
    if (!isNaN(totalAmount)) {
      // totalAmount = totalAmount + +this.OtherCharge
      // if (this.FreightMode === 1) {
      //   totalAmount = totalAmount + +this.Freight
      // }
      // this.RoundOff = +(Math.round(totalAmount) - totalAmount).toFixed(this.noOfDecimalPoint)
      this.CessAmount = 0
      this.BillAmount = totalAmount
      this.calculatePaymentAmount()
    }
  }

  @ViewChild('unit_select2') unitSelect2: Select2Component
  onUnitSelect (evt) {
    // console.log('on evt select : ', evt)
    if (evt.value && evt.data.length > 0) {
      if (+evt.value === -1) {
        this.unitSelect2.selector.nativeElement.value = ''
        // console.log(this.unitSettingType)
        if (+this.unitSettingType === 1) {
          this.commonService.openUnit('')
        }
        if (+this.unitSettingType === 2) {
          this.commonService.openCompositeUnit('')
        }
      } else {
        if (evt.value > 0 && evt.data[0] && evt.data[0].text) {
          this.UnitId = +evt.value
          this.unitName = evt.data[0].text
        }
      }
      this.validateItem()
    }
  }

  @ViewChild('organisation_select2') organisationSelect2: Select2Component
  onChangeOrganisationId (evt) {
    // console.log('on org select : ', evt)
    if (evt.value && evt.data.length > 0) {
      if (evt.value > 0 && evt.data[0] && evt.data[0].text) {
        this.OrgId = +evt.value
        this.getNewBillNo()
      }
      this.checkForValidation()
    }
  }

  @ViewChild('godown_select2') godownSelect2: Select2Component
  onGodownSelect (evt) {
    // console.log(evt)
    if (evt.value && evt.data.length > 0) {
      if (evt.value > 0 && evt.data[0] && evt.data[0].text) {
        this.GodownId = +evt.value
      }
      this.checkForValidation()
    }
  }

  @ViewChild('address_select2') addressSelect2: Select2Component
  onAddressSelect (evt) {
    // console.log('onAddressSelect : ', evt)
    if (evt.value && evt.data.length > 0) {
      if (+evt.value === -1) {
        this.addressSelect2.selector.nativeElement.value = ''
        if (this.PartyId) {
          this.commonService.openAddress(this.PartyId)
        } else {
          this.toastrService.showError('Please select Vendor', '')
        }
      } else {
        if (evt.value > 0 && evt.data[0] && evt.data[0].text) {
          this.AddressId = +evt.value
          this.checkForGST()
        }
      }
      this.checkForValidation()
    }
  }

  needToCheckItem: boolean = false
  needToCheckCharge: boolean = false
  checkForGST () {
    console.log('check for gst')
    let isOtherState = true
    this.allAddressData.forEach(element => {
      if (element.Id === this.AddressId && element.StateId === this.clientStateId) {
        isOtherState = false
      }
    })
    if (this.isOtherState !== isOtherState) {
      this.isOtherState = isOtherState
      this.updateItemTax()
      // this.updateChargeTax()
      // this.getBillSummary()
    } else {
      this.loadingSummary = false
    }
  }

  updateChargeTax () {
    if (this.AdditionalCharges.length > 0) {
      const observables = [];
      for (const charge of this.AdditionalCharges) {
        if (charge.TaxSlabChargeId !== 0) {
          observables.push(this.purchaseService.getSlabData(charge.TaxSlabChargeId));
        }
      }
      forkJoin(...observables).subscribe(
        data => {
          // console.log(data)
          data.forEach((element, index) => {
            let appliedTaxRatesCharge = []
            let taxChargeSlabType = (element.Data.TaxSlabs[0]) ? element.Data.TaxSlabs[0].Type : 0
            if (element.Data.TaxRates.length > 0 && +this.AdditionalCharges[index].AmountCharge > 0) {
              if (this.AdditionalCharges[index].TaxTypeCharge === 1) {
                let returnTax = this.purchaseService.taxCalCulationForInclusive(element.Data.TaxRates,
                  taxChargeSlabType,
                  +this.AdditionalCharges[index].AmountCharge,
                  this.isOtherState, FormConstants.ChargeForm, element.Data.TaxSlabs[0].Slab)
                this.AdditionalCharges[index]['TaxAmountCharge'] = +returnTax.taxAmount
                appliedTaxRatesCharge = returnTax.appliedTaxRates
              } else if (this.AdditionalCharges[index].TaxTypeCharge === 0) {
                let returnTax = this.purchaseService.taxCalculation(element.Data.TaxRates,
                  taxChargeSlabType,
                  +this.AdditionalCharges[index].AmountCharge,
                  this.isOtherState, FormConstants.ChargeForm, element.Data.TaxSlabs[0].Slab)
                this.AdditionalCharges[index]['TaxAmountCharge'] = returnTax.taxAmount
                appliedTaxRatesCharge = returnTax.appliedTaxRates
              }

              if (appliedTaxRatesCharge.length > 0) {
                appliedTaxRatesCharge.forEach((taxRate) => {
                  if (this.AdditionalCharges[index].Id !== 0) {
                    taxRate['ItemTransTaxId'] = this.AdditionalCharges[index].Id
                  } else {
                    taxRate['ItemTransTaxId'] = this.AdditionalCharges[index].Sno
                  }
                })
              }
              this.AdditionalCharges[index].itemTaxTrans = appliedTaxRatesCharge
            }
            this.AdditionalCharges[index]['TotalAmountCharge'] = +this.AdditionalCharges[index].AmountCharge + +this.AdditionalCharges[index]['TaxAmountCharge']
          });
          this.calculateAllTotal()
        },
        (error) => {

        }, 
        () => {
          setTimeout(() => {
            // this.updateTax()
            this.getBillSummary()
          }, 100)
        }
      )
    } else {
      this.getBillSummary()
    }
  }

  updateItemTax () {
    if (this.Items.length > 0) {
      const observables = [];
      for (const item of this.Items) {
        if (item.TaxSlabId !== 0) {
          observables.push(this.purchaseService.getSlabData(item.TaxSlabId));
        }
      }
      forkJoin(...observables).subscribe(
        data => {
          // console.log(data)
          data.forEach((element, index) => {
            let appliedTaxRatesItem = []
            let taxSlabType = (element.Data.TaxSlabs[0]) ? element.Data.TaxSlabs[0].Type : 0
            if (element.Data.TaxRates.length > 0 && +this.Items[index].AmountItem > 0) {
              if (this.Items[index].TaxType === 1) {
                let returnTax = this.purchaseService.taxCalCulationForInclusive(element.Data.TaxRates,
                  taxSlabType,
                  +this.Items[index].AmountItem,
                  this.isOtherState, FormConstants.PurchaseForm, element.Data.TaxSlabs[0].Slab)
                this.Items[index]['TaxAmount'] = returnTax.taxAmount
                appliedTaxRatesItem = returnTax.appliedTaxRates
              } else if (this.Items[index].TaxType === 0) {
                let returnTax = this.purchaseService.taxCalculation(element.Data.TaxRates,
                  taxSlabType,
                  +this.Items[index].AmountItem,
                  this.isOtherState, FormConstants.PurchaseForm, element.Data.TaxSlabs[0].Slab)
                this.Items[index]['TaxAmount'] = returnTax.taxAmount
                appliedTaxRatesItem = returnTax.appliedTaxRates
              }

              if (appliedTaxRatesItem.length > 0) {
                appliedTaxRatesItem.forEach((taxRate) => {
                  if (this.Items[index].Id !== 0) {
                    taxRate['ItemTransTaxId'] = this.Items[index].Id
                  } else {
                    taxRate['ItemTransTaxId'] = this.Items[index].Sno
                  }
                })
              }
              this.Items[index].itemTaxTrans = appliedTaxRatesItem
            }
            this.Items[index]['SubTotal'] = +this.Items[index].AmountItem + +this.Items[index]['TaxAmount']
          });
          this.calculateAllTotal()
        },
        (error) => {
          console.log(error)
        },
        () => {
          if (this.AdditionalCharges.length === 0) {
            setTimeout(() => {
              // this.updateTax()
              this.getBillSummary()
            }, 100)
          } else {
            this.updateChargeTax()
          }
        }
      )
    } else {
      this.updateChargeTax()
    }
  }

  // updateTax () {
  //   this.ItemTaxTrans = []
  //   this.Items.forEach(element => {
  //     this.ItemTaxTrans = this.ItemTaxTrans.concat(element['itemTaxTrans'])
  //   });
  //   this.AdditionalCharges.forEach(element => {
  //     this.ItemTaxTrans = this.ItemTaxTrans.concat(element['itemTaxTrans'])
  //   })
  //   console.log('updates itemtaxtrans : ', this.ItemTaxTrans)

  // }

  onCurrencySelect (evt) {
    // console.log('selected currency : ', evt)
    if (evt.value > 0 && evt.data && evt.data.length > 0 && evt.data[0].text) {
      this.CurrencyId = +evt.value
      this.defaultCurrency = evt.data[0].text
      this.currencyValues[1] = { id: '1', symbol: evt.data[0].text }
      // console.log('currencyValues : ', this.currencyValues)
    }
    this.checkForValidation()
  }

  @ViewChild('referraltype_select2') referraltypeSelect2: Select2Component
  onReferralTypeSelect (evt) {
    // console.log(evt)
    if (evt.value > 0 && evt.data[0] && evt.data[0].text) {
      this.ReferralTypeId = +evt.value
    }
  }

  ConvertToCurrencyId: number
  onConvertToCurrencySelect (evt) {
    // console.log(evt)
    if (evt.value > 0 && evt.data[0] && evt.data[0].text) {
      this.ConvertToCurrencyId = +evt.value
    }
  }

  @ViewChild('referral_select2') referralSelect2: Select2Component
  onRefferalPartnerSelect (evt) {
    // console.log(evt)
    if (evt.value > 0 && evt.data[0] && evt.data[0].text) {
      this.ReferralId = +evt.value
    }
  }

  @ViewChild('freight_By') freightBySelect2: Select2Component
  onFreightSelect (evt) {
    console.log(evt)
    if (evt.value > 0 && evt.data[0] && evt.data[0].text) {
      this.FreightMode = +evt.value
    }
  }

  @ViewChild('payment_select2') paymentSelect2: Select2Component
  onPaymentModeSelect (event) {
    // console.log('payment method select: ', event)
    if (+event.value > 0 && event.data[0] && event.data[0].text) {
      this.Paymode = event.data[0].text
      this.PayModeId = +event.value
      if (+event.value === 3) {
        this.BankLedgerName = ''
        this.LedgerId = 0
        this.setpaymentLedgerSelect2(0)
      } else if (+event.value === 1) {
        this.paymentLedgerselect2 = Object.assign([], [{ id: '1', text: 'Cash' }])
        this.BankLedgerName = 'Cash'
        this.LedgerId = 1
        this.paymentSelect2.setElementValue(this.LedgerId)
      }
    }
    this.validateTransaction()
  }

  enterPressItem (e: KeyboardEvent) {
    this.addItems()
    setTimeout(() => {
      let item = this.catSelect2.find((item: Select2Component, index: number, array: Select2Component[]) => {
        return index === 0
      })
      item.selector.nativeElement.focus()
    }, 10)
  }

  @ViewChild('savebutton') savebutton: ElementRef
  enterPressTrans (e: KeyboardEvent) {
    let paymentTotal = this.getPaymentTotal()
    if (this.BillAmount === paymentTotal) {
      // const element = this.renderer.selectRootElement(this.savebutton.nativeElement, true)
      // setTimeout(() => element.focus({ preventScroll: false }), 0)
      e.preventDefault()
      this.manipulateData()
    } else {
      this.addTransactions()
      setTimeout(() => {
        this.paymentSelect2.selector.nativeElement.focus()
      }, 10)
    }
  }

  setpaymentLedgerSelect2 (i) {
    let _self = this
    let newData = [{ id: '0', text: 'Select Ledger' }, { id: '-1', text: UIConstant.ADD_NEW_OPTION }]
    this.commonService.getPaymentLedgerDetail(9).subscribe(data => {
      // console.log('PaymentModeData : ', data)
      if (data.Code === UIConstant.THOUSAND && data.Data) {
        data.Data.forEach(element => {
          newData.push({
            id: element.Id,
            text: element.Name
          })
        })
      }
      _self.paymentLedgerselect2 = newData
      this.validateTransaction()
    },
    (error) => console.log(error),
    () => {
      if (this.editTransId !== -1 && this.PaymentDetail[i]) {
        this.Paymode = this.PaymentDetail[i].Paymode
        this.PayModeId = this.PaymentDetail[i].PayModeId
        this.LedgerId = this.PaymentDetail[i].LedgerId
        this.BankLedgerName = this.PaymentDetail[i].BankLedgerName
        this.Amount = this.PaymentDetail[i].Amount
        this.PayDate = this.PaymentDetail[i].PayDate
        this.ChequeNo = this.PaymentDetail[i].ChequeNo
        this.paymentSelect2.setElementValue(this.PayModeId)
        this.ledgerSelect2.setElementValue(this.LedgerId)
        this.deleteItem(i, 'trans')
      }
    })
  }

  @ViewChild('ledger_select2') ledgerSelect2: Select2Component
  onPaymentLedgerSelect (event) {
    // console.log('payment ledger id : ', event)
    if (+event.value === -1) {
      this.commonService.openLedger('')
      this.ledgerSelect2.selector.nativeElement.value = ''
    } else {
      if (event.value > 0 && event.data[0] && event.data[0].text) {
        this.LedgerId = +event.value
        this.BankLedgerName = event.data[0].text
      }
    }
    this.validateTransaction()
  }

  getPaymentTotal (): number {
    let paymentTotal = 0
    for (let i = 0; i <= this.PaymentDetail.length - 1; i++) {
      paymentTotal = paymentTotal + +this.PaymentDetail[i].Amount
    }
    if (!this.clickTrans) {
      if (+this.Amount > 0 && +this.PayModeId > 0 && +this.LedgerId > 0) {
        paymentTotal += +this.Amount
      }
    }
    return paymentTotal
  }
  isValidAmount = true
  checkValidationForAmount () {
    let paymentTotal = this.getPaymentTotal()
    paymentTotal = (isNaN(+paymentTotal)) ? 0 : +paymentTotal
    this.BillAmount = (isNaN(+this.BillAmount)) ? 0 : +this.BillAmount
    if (this.BillAmount !== 0) {
      if (paymentTotal > this.BillAmount) {
        this.toastrService.showError('Error', 'Payment can\'t be more than bill amount')
        this.isValidAmount = false
        return false
      } else {
        this.isValidAmount = true
        return true
      }
    } else {
      return true
    }
  }

  initialiseTransaction () {
    this.Paymode = ''
    this.PayModeId = 0
    this.LedgerId = 0
    this.Amount = 0
    this.PayDate = this.BillDate
    this.ChequeNo = ''
    this.Paymode = ''
    this.BankLedgerName = ''
    if (this.paymentSelect2 && this.paymentSelect2.selector.nativeElement.value) {
      this.paymentSelect2.setElementValue('')
    }
    if (this.ledgerSelect2 && this.ledgerSelect2.selector.nativeElement.value) {
      this.ledgerSelect2.setElementValue('')
    }
  }

  addTransactions () {
    if (this.Paymode && this.PayModeId && this.LedgerId && this.BankLedgerName && this.Amount && this.PayDate) {
      if ((+this.PayModeId === 3 && this.ChequeNo) || (+this.PayModeId === 1)) {
        if (this.checkValidationForAmount()) {
          this.addTransaction()
          this.clickTrans = true
          this.initialiseTransaction()
          // console.log('transactions : ', this.PaymentDetail)
          this.setPayDate()
          this.calculatePaymentAmount()
        }
      } else {
        this.clickTrans = false
        if (+this.PayModeId === 3) {
          if (this.ChequeNo) {
            this.invalidObj['ChequeNo'] = false
          } else {
            this.invalidObj['ChequeNo'] = true
          }
        } else {
          this.invalidObj['ChequeNo'] = false
        }
      }
    }
  }

  addTransaction () {
    if (this.PaymentDetail.length === 0) {
      this.PaymentDetail.push({
        Id: 0,
        Sno: 1,
        Paymode: this.Paymode,
        PayModeId: this.PayModeId,
        LedgerId: this.LedgerId,
        BankLedgerName: this.BankLedgerName,
        Amount: +this.Amount,
        PayDate: this.PayDate,
        ChequeNo: this.ChequeNo
      })
    } else {
      let index = +this.PaymentDetail[this.PaymentDetail.length - 1].Sno + 1
      this.PaymentDetail.push({
        Id: 0,
        Sno: index,
        Paymode: this.Paymode,
        PayModeId: this.PayModeId,
        LedgerId: this.LedgerId,
        BankLedgerName: this.BankLedgerName,
        Amount: this.Amount,
        PayDate: this.PayDate,
        ChequeNo: this.ChequeNo
      })
    }
    setTimeout(() => {
      this.commonService.fixTableHFL('trans-table')
    }, 1)
    if (this.editTransId !== -1) {
      this.PaymentDetail[this.PaymentDetail.length - 1].Id = this.editTransId
    }
  }

  addItems () {
    if (this.validDiscount && +this.ItemId > 0 && this.validateAttribute() && +this.UnitId > 0 && +this.TaxSlabId > 0 && this.PurchaseRate > 0) {
      if ((this.industryId === 5 && this.BatchNo && this.ExpiryDate && this.MfdDate)
       || (this.industryId === 3 && this.Length && this.Width && this.Height)
       || (this.industryId === 2 || this.industryId === 6)) {
        this.addItem()
        this.clickItem = true
        console.log('items : ', this.Items)
        if (!this.editMode) {
          this.calculateAllTotal()
        }
        this.initItem()
        if (this.industryId === 5) {
          this.setExpiryDate()
          this.setMfdDate()
        }
      }
    }
  }

  addItem () {
    this.addItemBasedOnIndustry()
    this.ItemAttributeTrans = this.ItemAttributeTrans.concat(this.itemAttributeTrans)
    if (this.appliedTaxRatesItem.length > 0) {
      this.ItemTaxTrans = this.ItemTaxTrans.concat(this.appliedTaxRatesItem)
    }
    console.log('ItemTaxTrans : ', this.ItemTaxTrans)
  }

  addItemBasedOnIndustry () {
    let Sno = 0
    if (this.Items.length === 0) {
      Sno = 1
    } else if (this.Items.length > 0) {
      Sno = +this.Items[this.Items.length - 1].Sno + 1
    }
    this.appliedTaxRatesItem.forEach(element => {
      element['Sno'] = Sno
      element['ItemTransTaxId'] = Sno
    })
    this.itemAttributeTrans.forEach(element => {
      element['Sno'] = Sno
      element['ItemTransId'] = Sno
    })
    this.Items.push({
      Id: 0,
      Sno: Sno,
      TransType: this.TransType,
      TransId: this.TransId,
      ChallanId: this.ChallanId,
      CategoryId: +this.categoryId,
      ItemId: +this.ItemId,
      UnitId: +this.UnitId,
      Length: +this.Length,
      Height: +this.Height,
      Width: +this.Width,
      Quantity: +this.Quantity,
      SaleRate: +this.SaleRate,
      MrpRate: +this.MrpRate,
      PurchaseRate: +this.PurchaseRate,
      TaxSlabId: +this.TaxSlabId,
      TaxType: +this.TaxType,
      TaxAmount: +this.TaxAmount,
      DiscountType: +this.DiscountType,
      Discount: +this.Discount,
      DiscountAmt: +this.DiscountAmt,
      ExpiryDate: this.ExpiryDate,
      MfdDate: this.MfdDate,
      BatchNo: this.BatchNo,
      Remark: this.Remark,
      itemName: this.itemName,
      categoryName: this.getPattern(),
      unitName: this.unitName,
      taxSlabName: this.taxSlabName,
      taxTypeName: this.taxTypeName,
      SubTotal: this.SubTotal,
      itemAttributeTrans: this.itemAttributeTrans,
      AmountItem: this.AmountItem,
      taxSlabType: this.taxSlabType,
      taxRates: this.taxRates,
      itemTaxTrans: this.appliedTaxRatesItem
    })

    setTimeout(() => {
      this.commonService.fixTableHFL('item-table')
    }, 1)

    if (this.editItemId !== -1) {
      this.Items[this.Items.length - 1].Id = this.editItemId
    }
  }

  @ViewChildren('attr_select2') attrSelect2: QueryList<Select2Component>
  editItem (i, editId, type, sno) {
    console.log('editId : ', editId)
    if (type === 'charge' && this.editChargeId === -1) {
      this.editChargeId = editId
      this.editChargeSno = sno
      i = i - 1
      this.LedgerName = this.AdditionalCharges[i].LedgerName
      this.LedgerChargeId = this.AdditionalCharges[i].LedgerChargeId
      this.alreadySelectCharge(this.LedgerChargeId, this.LedgerName, false)
      this.AmountCharge = this.AdditionalCharges[i].AmountCharge
      this.TaxSlabChargeId = this.AdditionalCharges[i].TaxSlabChargeId
      this.TaxChargeName = this.AdditionalCharges[i].TaxChargeName
      this.TaxAmountCharge = this.AdditionalCharges[i].TaxAmountCharge
      this.TotalAmountCharge = this.AdditionalCharges[i].TotalAmountCharge
      this.TaxTypeCharge = this.AdditionalCharges[i].TaxTypeCharge
      this.taxTypeChargeName = this.AdditionalCharges[i].taxTypeChargeName
      this.appliedTaxRatesCharge = this.AdditionalCharges[i].itemTaxTrans
      this.taxChargeRates = this.AdditionalCharges[i].taxChargeRates
      this.taxChargeSlabType = this.AdditionalCharges[i].taxChargeSlabType
      let LedgerChargeId = this.LedgerChargeId
      setTimeout(() => {
        this.LedgerChargeId = LedgerChargeId
        this.chargeSelect2.setElementValue(LedgerChargeId)
        this.taxSlabChargeSelect2.setElementValue(this.TaxSlabChargeId)
        this.taxTypeChargeSelect2.setElementValue(this.TaxTypeCharge)
        this.deleteItem(i, type)
        this.validateCharge()
      }, 100)
    } else if (type === 'charge' && this.editChargeId !== -1) {
      this.toastrService.showInfo('', 'There is already one transaction to edit, please update it this first in order to edit others')
    }
    if (type === 'trans' && this.editTransId === -1) {
      this.editTransId = editId
      i = i - 1
      if (+this.PaymentDetail[i].PayModeId === 3) {
        this.paymentSelect2.setElementValue('')
        this.ledgerSelect2.setElementValue('')
        this.setpaymentLedgerSelect2(i)
      } else if (+this.PaymentDetail[i].PayModeId === 1) {
        this.paymentLedgerselect2 = [{ id: '1', text: 'Cash' }]
        this.Paymode = this.PaymentDetail[i].Paymode
        this.PayModeId = this.PaymentDetail[i].PayModeId
        this.LedgerId = this.PaymentDetail[i].LedgerId
        this.BankLedgerName = this.PaymentDetail[i].BankLedgerName
        this.Amount = this.PaymentDetail[i].Amount
        this.PayDate = this.PaymentDetail[i].PayDate
        this.ChequeNo = this.PaymentDetail[i].ChequeNo
        this.paymentSelect2.setElementValue(this.PayModeId)
        this.ledgerSelect2.setElementValue(this.LedgerId)
        this.deleteItem(i, type)
      }
    } else if (type === 'trans' && this.editTransId !== -1) {
      this.toastrService.showInfo('', 'There is already one transaction to edit, please update it this first in order to edit others')
    }
    if (type === 'items' && this.editItemId === -1) {
      this.editItemId = editId
      this.editItemSno = sno
      i = i - 1
      this.TransType = 0
      this.TransId = 0
      this.ChallanId = 0
      this.categoryName = this.Items[i].categoryName
      this.itemName = this.Items[i].itemName
      this.unitName = this.Items[i].unitName
      this.taxSlabName = this.Items[i].taxSlabName
      this.taxTypeName = this.Items[i].taxTypeName
      this.categoryId = this.Items[i].CategoryId
      this.ItemId = this.Items[i].ItemId
      this.UnitId = this.Items[i].UnitId
      this.Length = this.Items[i].Length
      this.Height = this.Items[i].Height
      this.Width = this.Items[i].Width
      this.Quantity = this.Items[i].Quantity
      this.SaleRate = this.Items[i].SaleRate
      this.MrpRate = this.Items[i].MrpRate
      this.PurchaseRate = this.Items[i].PurchaseRate
      this.TaxSlabId = this.Items[i].TaxSlabId
      this.TaxType = this.Items[i].TaxType
      this.TaxAmount = this.Items[i].TaxAmount
      this.DiscountType = this.Items[i].DiscountType
      this.Discount = this.Items[i].Discount
      this.DiscountAmt = this.Items[i].DiscountAmt
      this.ExpiryDate = this.Items[i].ExpiryDate
      this.MfdDate = this.Items[i].MfdDate
      this.BatchNo = this.Items[i].BatchNo
      this.Remark = this.Items[i].Remark
      this.SubTotal = this.Items[i].SubTotal
      this.AmountItem = this.Items[i].AmountItem
      this.taxSlabType = this.Items[i].taxSlabType
      this.itemAttributeTrans = this.Items[i].itemAttributeTrans
      this.appliedTaxRatesItem = this.Items[i].itemTaxTrans
      this.taxRates = this.Items[i].taxRates
      this.unitSelect2.setElementValue(this.UnitId)
      this.taxSlabSelect2.setElementValue(this.TaxSlabId)
      this.taxTypeSelect2.setElementValue(this.TaxType)
      // console.log('attrSelect2 : ', this.attrSelect2)
      if (this.attrSelect2.length > 0) {
        this.attrSelect2.forEach((item: Select2Component, index: number, array: Select2Component[]) => {
          // console.log('attr : ', item)
          item.setElementValue(this.itemAttributeTrans[index].AttributeId)
        })
      }
      // console.log('before TaxAmount : ', this.Items[i].TaxAmount)
      let ItemId = this.Items[i].ItemId
      this.updateCategories(this.categoryId)
      this.checkForItems(this.categoryId)
      let _self = this
      setTimeout(() => {
        _self.itemselect2.setElementValue(ItemId)
        _self.ItemId = ItemId
        _self.deleteItem(i, type)
      }, 1)
    } else if (type === 'items' && this.editItemId !== -1) {
      this.toastrService.showInfo('', 'There is already one item to edit, please update it this first in order to edit others')
    }
  }

  deleteItem (i, forArr) {
    if (forArr === 'trans') {
      this.PaymentDetail.splice(i,1)
      this.checkValidationForAmount()
    }
    if (forArr === 'items') {
      this.Items.splice(i,1)
      this.ItemAttributeTrans = []
      this.Items.forEach(item => {
        this.ItemAttributeTrans = this.ItemAttributeTrans.concat([], item.itemAttributeTrans)
      })
      console.log('after TaxAmount : ', this.TaxAmount)
    }
    if (forArr === 'charge') {
      if (this.chargesData[i].disabled) {
        this.alreadySelectCharge(this.AdditionalCharges[i].LedgerChargeId, this.AdditionalCharges[i].LedgerName, false)
      }
      this.AdditionalCharges.splice(i,1)
    }
    this.calculate()
  }

  closePurchase () {
    this.commonService.closePurchase()
  }

  initItem () {
    this.TransType = 0
    this.TransId = 0
    this.ChallanId = 0
    this.ItemId = 0
    this.itemName = ''
    this.UnitId = 0
    this.unitName = ''
    this.categoryName = ''
    this.Length = 1
    this.Height = 1
    this.Width = 1
    this.Quantity = 1
    this.SaleRate = 0
    this.MrpRate = 0
    this.PurchaseRate = 0
    this.DiscountType = 0
    this.Discount = 0
    this.DiscountAmt = 0
    this.TaxSlabId = 0
    this.taxSlabName = ''
    this.TaxType = 0
    this.TaxAmount = 0
    this.ExpiryDate = ''
    this.MfdDate = ''
    this.BatchNo = ''
    this.Remark = ''
    this.categoryId = 0
    this.SubTotal = 0
    this.AmountItem = 0
    this.editItemId = -1
    this.clickItem = false
    // console.log('categories : ', this.categories)
    if (this.allCategories && this.allCategories.length > 0) {
      this.getCatagoryDetail(this.allCategories)
    }
    if (this.allItems && this.allItems.length > 0) {
      this.purchaseService.createItems(this.allItems)
    }
    if (this.taxTypeSelect2) {
      this.taxTypeSelect2.setElementValue(this.TaxType)
    }
    if (this.unitSelect2) {
      this.unitSelect2.setElementValue(this.UnitId)
    }
    if (this.itemselect2) {
      this.itemselect2.setElementValue(this.ItemId)
    }
    if (this.taxSlabSelect2) {
      this.taxSlabSelect2.setElementValue(this.TaxSlabId)
    }
    this.taxTypeName = 'Exclusive'
    this.itemAttributeTrans = []
    this.appliedTaxRatesItem = []
    // console.log('catSelect2 : ', this.catSelect2)
    this.taxRates = []
    this.taxSlabType = 0
    if (this.catSelect2.length > 0) {
      this.catSelect2.forEach((item: Select2Component, index: number, array: Select2Component[]) => {
        // console.log('catSelect2 : ', item)
        item.setElementValue(0)
        item.selector.nativeElement.value = ''
      })
    }
    this.initAttribute()
  }

  initAttribute () {
    this.ItemId = 0
    this.ItemTransId = 0
    this.AttributeId = 0
    this.ParentTypeId = 0
    this.name = ''
    // console.log('attrSelect2 : ', this.attrSelect2)
    if (this.attrSelect2.length > 0) {
      this.attrSelect2.forEach((item: Select2Component, index: number, array: Select2Component[]) => {
        // console.log('attr : ', item)
        if ($('.attr') && $('.attr')[index]) {
          $('#' + $('.attr')[index].id).removeClass('errorSelecto')
        }
        item.setElementValue(0)
      })
    }
  }

  @ViewChild('taxSlabCharge_select2') taxSlabChargeSelect2: Select2Component
  @ViewChild('charge_select2') chargeSelect2: Select2Component
  initCharge () {
    this.LedgerChargeId = 0
    this.LedgerName = ''
    this.AmountCharge = 0
    this.TaxTypeCharge = 0
    this.TaxSlabChargeId = 0
    this.TaxChargeName = ''
    this.TaxAmountCharge = 0
    this.TotalAmountCharge = 0
    this.editChargeSno = 0
    this.clickCharge = false
    this.taxChargeRates = []
    this.appliedTaxRatesCharge = []
    this.editChargeId = -1
    if (this.taxSlabChargeSelect2) {
      this.taxSlabChargeSelect2.setElementValue('')
    }
    if (this.chargeSelect2) {
      this.chargeSelect2.setElementValue('')
    }
    if (this.taxTypeChargeSelect2) {
      this.taxTypeChargeSelect2.setElementValue(0)
    }
    this.taxTypeChargeName = 'Exclusive'
  }


  initTransaction () {
    this.Paymode = ''
    this.PayModeId = 0
    this.LedgerId = 0
    this.Amount = 0
    this.BankLedgerName = ''
    this.ChequeNo = ''
    this.PayDate = ''
    this.ledger = 0
    this.paymode = 0
    this.clickTrans = false
    this.editTransId = -1
    if (this.ledgerSelect2) {
      this.ledgerSelect2.setElementValue('')
    }
    if (this.paymentSelect2) {
      this.paymentSelect2.setElementValue('')
    }
  }

  initComp () {
    this.BillAmount = 0
    this.BillDate = ''
    this.PartyBillDate = ''
    this.PartyBillNo = ''
    this.BillNo = ''
    this.AddressId = 0
    this.ConvertedAmount = 0
    this.CurrencyRate = 0
    this.TotalDiscount = 0
    this.Freight = 0
    this.FreightMode = 1
    this.PartyId = 0
    this.ReferralId = 0
    this.ReferralTypeId = 0
    this.ReferralComission = 0
    this.ReferralComissionTypeId = 0
    this.ReverseCharge = 0
    this.ReverseTax = 0
    this.Cess = 0
    this.CessAmount = 0
    this.RoundOff = 0
    this.RoundOffManual = 0
    this.SubTotalAmount = 0
    this.TotalTaxAmount = 0
    this.TotalChallan = 0
    this.VehicleNo = ''
    this.LocationTo = ''
    this.Drivername = ''
    this.Transportation = ''
    this.TotalQty = 0
    this.OtherCharge = 0
    this.GodownId = 0
    this.CurrencyId = 0
    this.ConvertToCurrencyId = 0
    this.OrgId = 0
    this.InterestRate = 0
    this.InterestAmount = 0
    this.InterestType = 0
    this.DueDate = ''
    this.OrderId = 0
    this.Advanceamount = 0
    this.NetAmount = 0
    this.ReferralCommission = 0
    this.ReferralCommissionTypeId = 0
    this.CreditLimit = 0
    this.CreditDays = 0
    this.ItemAttributeTrans = []
    this.PaymentDetail = []
    this.Items = []
    this.AdditionalCharges = []
    this.ItemTaxTrans = []
    this.clickTrans = false
    this.clickItem = false
    this.clickCharge = false
    this.submitSave = false
    this.isValidAmount = true
    this.NetBillAmount = 0
    this.TaxableValue = 0
    this.billSummary = []
    this.invalidObj = {}
    // if (this.currencyData.length >= 1) {
    //   this.CurrencyId = +this.currencyData[0].id
    //   this.currencyValue = +this.currencyData[0].id
    //   this.ConvertToCurrencyId = +this.convertToCurrencyData[0].id
    //   this.convertToCurrencyValue = +this.convertToCurrencyData[0].id
    // }
    if (this.addressSelect2) {
      this.addressSelect2.setElementValue(0)
    }
    if (this.referraltypeSelect2) {
      this.referraltypeSelect2.setElementValue(0)
    }
    if (this.referralSelect2) {
      this.referralSelect2.setElementValue(0)
    }
    if (this.vendorSelect2) {
      this.vendorSelect2.setElementValue(0)
    }
    if (this.convertToSelect2) {
      this.convertToSelect2.setElementValue(0)
    }
    if (this.currencySelect2) {
      this.currencySelect2.setElementValue(0)
    }
  }

  initialiseExtras () {
    this.BillAmount = 0
    this.PartyBillNo = ''
    this.BillNo = ''
    this.AddressId = 0
    this.ConvertedAmount = 0
    this.CurrencyRate = 0
    this.TotalDiscount = 0
    this.PartyId = 0
    this.ReferralId = 0
    this.ReferralTypeId = 0
    this.ReferralComission = 0
    this.ReferralComissionTypeId = 0
    this.ReverseCharge = 0
    this.ReverseTax = 0
    this.Cess = 0
    this.CessAmount = 0
    this.SubTotalAmount = 0
    this.TotalTaxAmount = 0
    this.TotalChallan = 0
    this.VehicleNo = ''
    this.LocationTo = ''
    this.Drivername = ''
    this.Transportation = ''
    this.TotalQty = 0
    this.InterestRate = 0
    this.InterestAmount = 0
    this.InterestType = 0
    this.DueDate = ''
    this.OrderId = 0
    this.Advanceamount = 0
    this.NetAmount = 0
    this.ReferralCommission = 0
    this.ReferralCommissionTypeId = 0
    this.CreditLimit = 0
    this.CreditDays = 0
    this.ItemAttributeTrans = []
    this.PaymentDetail = []
    this.Items = []
    this.AdditionalCharges = []
    this.ItemTaxTrans = []
    this.clickTrans = false
    this.clickItem = false
    this.clickCharge = false
    this.submitSave = false
    this.isValidAmount = true
    this.NetBillAmount = 0
    this.TaxableValue = 0
    this.billSummary = []
    this.invalidObj = {}
    this.AdditionalChargesToShow = []
    this.TaxableValue = 0
    if (this.organisationsData && this.organisationsData.length > 0) {
      this.OrgId = +this.organisationsData[0].id
      this.organisationValue = +this.organisationsData[0].id
      if (this.organisationSelect2) {
        this.organisationSelect2.setElementValue(this.OrgId)
      }
    }
    if (this.godownsData && this.godownsData.length === 1) {
      this.GodownId = +this.godownsData[0].id
      this.godownValue = +this.godownsData[0].id
      if (this.godownSelect2) {
        this.godownSelect2.setElementValue(this.GodownId)
      }
    }
    if (this.currencyData && this.currencyData.length >= 1) {
      this.CurrencyId = +this.currencyData[0].id
      this.currencyValue = +this.currencyData[0].id
      if (this.currencySelect2) {
        this.currencySelect2.setElementValue(this.CurrencyId)
      }
    }
    if (this.convertToCurrencyData && this.convertToCurrencyData.length >= 1) {
      this.ConvertToCurrencyId = +this.convertToCurrencyData[0].id
      this.convertToCurrencyValue = +this.convertToCurrencyData[0].id
      if (this.convertToSelect2) {
        this.convertToSelect2.setElementValue(this.ConvertToCurrencyId)
      }
    }
    if (this.vendorSelect2) {
      this.vendorSelect2.setElementValue(0)
    }
    if (this.chargeSelect2) {
      this.chargeSelect2.setElementValue(0)
    }
    if (this.taxSlabChargeSelect2) {
      this.taxSlabChargeSelect2.setElementValue(0)
    }
    if (this.referralSelect2) {
      this.referralSelect2.setElementValue(0)
    }
    if (this.referraltypeSelect2) {
      this.referraltypeSelect2.setElementValue(0)
    }
    this.RoundOff = 0
    this.RoundOffManual = 0
    this.billSummary = []
    this.AddressData = []
    this.setBillDate()
    this.setPartyBillDate()
    this.setPayDate()
    this.setExpiryDate()
    this.setDueDate(0)
    this.setMfdDate()
    this.getNewBillNo()
  }

  private purchaseAddParams (): PurchaseAdd {
    let BillDate = this.gs.clientToSqlDateFormat(this.BillDate, this.clientDateFormat)
    let PartyBillDate = this.gs.clientToSqlDateFormat(this.PartyBillDate, this.clientDateFormat)
    let DueDate = this.gs.clientToSqlDateFormat(this.DueDate, this.clientDateFormat)
    let Items = JSON.parse(JSON.stringify(this.Items))
    let PaymentDetail = JSON.parse(JSON.stringify(this.PaymentDetail))
    Items.forEach(item => {
      item.ExpiryDate = (item.ExpiryDate) ? this.gs.clientToSqlDateFormat(item.ExpiryDate, this.clientDateFormat) : ''
      item.MfdDate = (item.MfdDate) ? this.gs.clientToSqlDateFormat(item.MfdDate, this.clientDateFormat) : ''
    })
    PaymentDetail.forEach(transaction => {
      transaction.PayDate = this.gs.clientToSqlDateFormat(transaction.PayDate, this.clientDateFormat)
    })

    const purchaseAddParams = {
      obj: {
        Id: this.Id ? this.Id : UIConstant.ZERO,
        ReferralCommissionTypeId : +this.ReferralCommissionTypeId,
        ReferralCommission: +this.ReferralCommission,
        PaymentDetail: PaymentDetail,
        Items: Items,
        BillAmount: this.BillAmount,
        BillDate: BillDate,
        PartyBillDate: PartyBillDate,
        PartyBillNo: this.PartyBillNo,
        BillNo: this.BillNo,
        ConvertedAmount: 0,
        CurrencyRate: 0,
        TotalDiscount: +this.TotalDiscount,
        Freight: +this.Freight,
        FreightMode: +this.FreightMode,
        PartyId: +this.PartyId,
        ReferralId: this.ReferralId,
        ReferralTypeId: this.ReferralTypeId,
        ReferralComission: 0,
        ReferralComissionTypeId: 0,
        ReverseCharge: 0,
        ReverseTax: 0,
        CessAmount: +this.CessAmount,
        RoundOff: this.RoundOffManual !== 0 ? this.RoundOffManual : this.RoundOff,
        SubTotalAmount: +this.SubTotalAmount,
        TotalTaxAmount: +this.TotalTaxAmount,
        TotalChallan: 0,
        VehicleNo: this.VehicleNo,
        LocationTo: this.LocationTo,
        Drivername: this.Drivername,
        Transportation: this.Transportation,
        TotalQty: +this.TotalQty,
        OtherCharge: +this.OtherCharge,
        GodownId: +this.GodownId,
        CurrencyId: +this.CurrencyId,
        OrgId: +this.OrgId,
        InterestRate: this.InterestRate,
        InterestAmount: 0,
        InterestType: this.InterestType,
        DueDate: DueDate,
        OrderId: 0,
        Advanceamount: 0,
        NetAmount: 0,
        AddressId: this.AddressId,
        ConvertedCurrencyId: this.ConvertToCurrencyId,
        ItemAttributeTrans: this.ItemAttributeTrans,
        ItemTaxTrans: this.ItemTaxTrans,
        AdditionalCharges: this.AdditionalCharges
      } as PurchaseAdd
    }
    console.log('obj : ', JSON.stringify(purchaseAddParams.obj))
    return purchaseAddParams.obj
  }

  validateTransaction () {
    if (this.Paymode || +this.PayModeId > 0 || +this.LedgerId > 0 || this.BankLedgerName || this.ChequeNo) {
      let isValid = 1
      if (+this.PayModeId > 0) {
        this.invalidObj['PayModeId'] = false
      } else {
        isValid = 0
        this.invalidObj['PayModeId'] = true
      }
      if (+this.LedgerId > 0) {
        this.invalidObj['LedgerId'] = false
      } else {
        isValid = 0
        this.invalidObj['LedgerId'] = true
      }
      if (this.BankLedgerName) {
        this.invalidObj['ledgerName'] = false
      } else {
        isValid = 0
        this.invalidObj['ledgerName'] = true
      }
      if (+this.Amount > 0) {
        this.invalidObj['Amount'] = false
      } else {
        isValid = 0
        this.invalidObj['Amount'] = true
      }
      if (this.PayDate) {
        this.invalidObj['PayDate'] = false
      } else {
        isValid = 0
        this.invalidObj['PayDate'] = true
      }
      if (+this.PayModeId === 3) {
        if (this.ChequeNo) {
          this.invalidObj['ChequeNo'] = false
        } else {
          isValid = 0
          this.invalidObj['ChequeNo'] = true
        }
      } else {
        this.invalidObj['ChequeNo'] = false
      }
      this.validTransaction = !!isValid
    } else {
      this.validTransaction = true
      this.invalidObj['PayModeId'] = false
      this.invalidObj['LedgerId'] = false
      this.invalidObj['ledgerName'] = false
      this.invalidObj['Amount'] = false
      this.invalidObj['PayDate'] = false
      this.invalidObj['ChequeNo'] = false
    }
    this.clickTrans = false
  }

  checkForValidation () {
    if (this.PartyId || this.OrgId || this.BillDate || this.BillNo
      || this.PartyBillDate || this.PartyBillNo || this.CurrencyId
      || this.GodownId || this.AddressId || this.FreightMode
      || this.ItemId || this.UnitId || this.TaxSlabId
      || this.PurchaseRate
      || this.BatchNo || this.ExpiryDate || this.MfdDate
      || this.Length || this.Width || this.Height
      ) {
      let isValid = 1
      if (+this.PartyId > 0) {
        this.invalidObj['PartyId'] = false
      } else {
        this.invalidObj['PartyId'] = true
        isValid = 0
      }
      if (+this.OrgId > 0) {
        this.invalidObj['OrgId'] = false
      } else {
        this.invalidObj['OrgId'] = true
        isValid = 0
      }
      if (this.BillDate) {
        this.invalidObj['BillDate'] = false
      } else {
        this.invalidObj['BillDate'] = true
        isValid = 0
      }
      if (this.BillNo) {
        this.invalidObj['BillNo'] = false
      } else {
        this.invalidObj['BillNo'] = true
        isValid = 0
      }
      if (this.PartyBillDate) {
        this.invalidObj['PartyBillDate'] = false
      } else {
        this.invalidObj['PartyBillDate'] = true
        isValid = 0
      }
      if (this.PartyBillNo) {
        this.invalidObj['PartyBillNo'] = false
      } else {
        this.invalidObj['PartyBillNo'] = true
        isValid = 0
      }
      if (this.CurrencyId) {
        this.invalidObj['CurrencyId'] = false
      } else {
        this.invalidObj['CurrencyId'] = true
        isValid = 0
      }
      if (this.GodownId) {
        this.invalidObj['GodownId'] = false
      } else {
        this.invalidObj['GodownId'] = true
        isValid = 0
      }
      if (this.AddressId) {
        this.invalidObj['AddressId'] = false
      } else {
        this.invalidObj['AddressId'] = true
        isValid = 0
      }
      if (+this.FreightMode > 0) {
        this.invalidObj['FreightMode'] = false
      } else {
        this.invalidObj['FreightMode'] = true
        isValid = 0
      }
      if (this.Items.length === 0 && this.submitSave) {
        isValid = 0
        if (+this.ItemId > 0) {
          this.invalidObj['ItemId'] = false
        } else {
          isValid = 0
          this.invalidObj['ItemId'] = true
        }
        if (+this.UnitId > 0) {
          this.invalidObj['UnitId'] = false
        } else {
          isValid = 0
          this.invalidObj['UnitId'] = true
        }
        if (+this.TaxSlabId > 0) {
          this.invalidObj['TaxSlabId'] = false
        } else {
          isValid = 0
          this.invalidObj['TaxSlabId'] = true
        }
        if (+this.PurchaseRate > 0) {
          this.invalidObj['PurchaseRate'] = false
        } else {
          isValid = 0
          this.invalidObj['PurchaseRate'] = true
        }
        if (+this.Quantity > 0) {
          this.invalidObj['Quantity'] = false
        } else {
          isValid = 0
          this.invalidObj['Quantity'] = true
        }
        if (this.industryId === 5) {
          if (this.BatchNo) {
            this.invalidObj['BatchNo'] = false
          } else {
            isValid = 0
            this.invalidObj['BatchNo'] = true
          }
          if (this.MfdDate) {
            this.invalidObj['MfdDate'] = false
          } else {
            isValid = 0
            this.invalidObj['MfdDate'] = true
          }
          if (this.ExpiryDate) {
            this.invalidObj['ExpiryDate'] = false
          } else {
            isValid = 0
            this.invalidObj['ExpiryDate'] = true
          }
        }
        if (this.industryId === 3) {
          if (+this.Length > 0) {
            this.invalidObj['Length'] = false
          } else {
            isValid = 0
            this.invalidObj['Length'] = true
          }
          if (+this.Height > 0) {
            this.invalidObj['Height'] = false
          } else {
            isValid = 0
            this.invalidObj['Height'] = true
          }
          if (+this.Width > 0) {
            this.invalidObj['Width'] = false
          } else {
            isValid = 0
            this.invalidObj['Width'] = true
          }
        }
        this.attrSelect2.forEach((attr: Select2Component, index: number, array: Select2Component[]) => {
          if (this.itemAttributeTrans[index] && this.itemAttributeTrans[index].AttributeId > 0) {
            $('#' + $('.attr')[index].id).removeClass('errorSelecto')
          } else {
            isValid = 0
            $('#' + $('.attr')[index].id).addClass('errorSelecto')
          }
        })
      }
      return !!isValid
    }
  }

  validateItem () {
    if (+this.ItemId > 0) {
      let isValid = 1
      if (+this.DiscountType === 0) {
        this.validDiscount = (+this.Discount >= 0 && +this.Discount < 100) ? true : false
      } else {
        this.validDiscount = true
      }
      if (this.validDiscount) {
        this.invalidObj['Discount'] = false
      } else {
        isValid = 0
        this.invalidObj['Discount'] = true
      }
      if (+this.ItemId > 0) {
        this.invalidObj['ItemId'] = false
      } else {
        isValid = 0
        this.invalidObj['ItemId'] = true
      }
      if (+this.UnitId > 0) {
        this.invalidObj['UnitId'] = false
      } else {
        isValid = 0
        this.invalidObj['UnitId'] = true
      }
      if (+this.TaxSlabId > 0) {
        this.invalidObj['TaxSlabId'] = false
      } else {
        isValid = 0
        this.invalidObj['TaxSlabId'] = true
      }
      if (+this.PurchaseRate > 0) {
        this.invalidObj['PurchaseRate'] = false
      } else {
        isValid = 0
        this.invalidObj['PurchaseRate'] = true
      }
      if (+this.Quantity > 0) {
        this.invalidObj['Quantity'] = false
      } else {
        isValid = 0
        this.invalidObj['Quantity'] = true
      }
      if (this.industryId === 5) {
        if (this.BatchNo) {
          this.invalidObj['BatchNo'] = false
        } else {
          isValid = 0
          this.invalidObj['BatchNo'] = true
        }
        if (this.MfdDate) {
          this.invalidObj['MfdDate'] = false
        } else {
          isValid = 0
          this.invalidObj['MfdDate'] = true
        }
        if (this.ExpiryDate) {
          this.invalidObj['ExpiryDate'] = false
        } else {
          isValid = 0
          this.invalidObj['ExpiryDate'] = true
        }
      }
      if (this.industryId === 3) {
        if (+this.Length > 0) {
          this.invalidObj['Length'] = false
        } else {
          isValid = 0
          this.invalidObj['Length'] = true
        }
        if (+this.Height > 0) {
          this.invalidObj['Height'] = false
        } else {
          isValid = 0
          this.invalidObj['Height'] = true
        }
        if (+this.Width > 0) {
          this.invalidObj['Width'] = false
        } else {
          isValid = 0
          this.invalidObj['Width'] = true
        }
      }
      this.attrSelect2.forEach((attr: Select2Component, index: number, array: Select2Component[]) => {
        if (this.itemAttributeTrans[index] && this.itemAttributeTrans[index].AttributeId > 0) {
          $('#' + $('.attr')[index].id).removeClass('errorSelecto')
        } else {
          isValid = 0
          $('#' + $('.attr')[index].id).addClass('errorSelecto')
        }
      })
      this.validItem = !!isValid
    } else {
      this.validItem = true
      this.invalidObj['Height'] = false
      this.invalidObj['Width'] = false
      this.invalidObj['Length'] = false
      this.invalidObj['ExpiryDate'] = false
      this.invalidObj['MfdDate'] = false
      this.invalidObj['BatchNo'] = false
      this.invalidObj['Quantity'] = false
      this.invalidObj['PurchaseRate'] = false
      this.invalidObj['TaxSlabId'] = false
      this.invalidObj['UnitId'] = false
      this.invalidObj['ItemId'] = false
      this.invalidObj['Discount'] = false
      this.attrSelect2.forEach((attr: Select2Component, index: number, array: Select2Component[]) => {
        if (this.itemAttributeTrans[index] && this.itemAttributeTrans[index].AttributeId > 0) {
          $('#' + $('.attr')[index].id).removeClass('errorSelecto')
        }
      })
    }
  }

  validateAttribute () {
    let isValid = true
    this.attrSelect2.forEach((attr: Select2Component, index: number, array: Select2Component[]) => {
      if (this.itemAttributeTrans[index] && this.itemAttributeTrans[index].AttributeId > 0) {
        //
      } else {
        isValid = false
      }
    })
    return isValid
  }

  manipulateData () {
    let _self = this
    this.submitSave = true
    let dataToSend = this.purchaseAddParams()
    let valid = 1
    this.commonService.checkForExistence(this.checkForExistence, dataToSend).subscribe(
      (data) => {
        console.log('existence : ', data)
        if (data.Code === UIConstant.THOUSAND && data.Data) {
          data.Data.forEach(element => {
            if (+element.Status === 1) {
              this.invalidObj[element.FormKeyName] = true
              valid = 0
            }
          })
        }
      },
      (error) => {
        console.log(error)
      },
      () => {
        this.addItems()
        this.addTransactions()
        this.addCharge()
        this.getBillSummary()
        this.calculateAllTotal()
        this.validateItem()
        this.validateTransaction()
        this.checkValidationForAmount()
        if (valid) {
          if (this.checkForValidation() && this.isValidAmount && this.validItem && this.validTransaction) {
            this.purchaseService.postPurchase(this.purchaseAddParams()).subscribe(
              data => {
                console.log('data : ', data)
                if (data.Code === UIConstant.THOUSAND && data.Data) {
                  _self.toastrService.showSuccess('Saved Successfully', '')
                  _self.commonService.newPurchaseAdd()
                  if (!this.keepOpen) {
                    _self.commonService.closePurchase()
                  } else {
                    _self.initItem()
                    _self.initTransaction()
                    _self.initCharge()
                    _self.initComp()
                    _self.initialiseExtras()
                  }
                } else if (data.Code === UIConstant.THOUSANDONE) {
                  _self.toastrService.showError(data.Message, 'Please change Bill No.')
                } else {
                  _self.toastrService.showError(data.Description, '')
                }
              },
              (error) => {
                _self.toastrService.showError(error, '')
              }
            )
          }
        } else {
          this.toastrService.showError('The following are not unique', '')
        }
      }
    )
  }

  ngOnDestroy () {
    this.unitAdd$.unsubscribe(); this.attr$.unsubscribe(); this.item$.unsubscribe(); this.vendorData$.unsubscribe(); this.taxProcessesData$.unsubscribe(); this.paymentModesData$.unsubscribe(); this.organisationsData$.unsubscribe(); this.godownsData$.unsubscribe(); this.referralTypesData$.unsubscribe(); this.referralsData$.unsubscribe(); this.taxSlabsData$.unsubscribe(); this.currencyData$.unsubscribe(); this.addressData$.unsubscribe(); this.newVendAdd$.unsubscribe(); this.addressAdd$.unsubscribe(); this.itemAdd$.unsubscribe(); this.taxAdd$.unsubscribe(); this.unitAdd$.unsubscribe(); this.ledgerAdd$.unsubscribe(); this.settingData$.unsubscribe(); this.freightData$.unsubscribe(); this.subUnitsData$.unsubscribe(); this.newLedgerCreationAdd$.unsubscribe();
  }

  @ViewChild('loc_ref') locRef: ElementRef
  moveToCharge () {
    this.chargeSelect2.selector.nativeElement.focus({ preventScroll: false })
  }

  moveToPayment () {
    this.paymentSelect2.selector.nativeElement.focus({ preventScroll: false })
  }

  validateCharge () {
    if (this.LedgerName || +this.LedgerChargeId > 0 || +this.AmountCharge > 0) {
      let isValid = 1
      if (+this.LedgerChargeId > 0) { this.invalidObj['LedgerChargeId'] = false } else { isValid = 0; this.invalidObj['LedgerChargeId'] = true; }
      if (+this.AmountCharge > 0) { this.invalidObj['AmountCharge'] = false; } else { isValid = 0; this.invalidObj['AmountCharge'] = true; }
      this.validCharge = !!isValid
    } else {
      this.validCharge = true; this.invalidObj['LedgerChargeId'] = false; this.invalidObj['TaxSlabChargeId'] = false; this.invalidObj['AmountCharge'] = false;
    }
    this.clickCharge = false
  }

  addCharge () {
    if (this.LedgerName && +this.LedgerChargeId > 0 && +this.AmountCharge > 0) {
      this.alreadySelectCharge(this.LedgerChargeId, this.LedgerName, true)
      this.addCustomCharge()
      this.clickCharge = true
      this.initCharge()
      console.log('charge : ', this.AdditionalCharges)
    }
  }

  alreadySelectCharge (chargeId,name,enableflag) {
    this.chargesData.forEach(data=>{
      let index = this.chargesData.findIndex(
        selectedItem =>selectedItem.id  === chargeId)
       if(index !== -1){
        this.chargesData.splice(index,1)
        let newData = Object.assign([], this.chargesData)
        newData.push({ id: chargeId, text:name ,disabled: enableflag})
        this.chargesData = newData
       }
    })
   }

  addCustomCharge () {
    if (this.appliedTaxRatesCharge.length > 0) {
      this.ItemTaxTrans = this.ItemTaxTrans.concat(this.appliedTaxRatesCharge)
    }
    console.log('ItemTaxTrans : ', this.ItemTaxTrans)
    let index = 0
    if (this.AdditionalCharges.length === 0) {
     index = 1
    } else {
      index = +this.AdditionalCharges[this.AdditionalCharges.length - 1].Sno + 1
    }
    this.appliedTaxRatesCharge.forEach(element => {
      element['Sno'] = index
      element['ItemTransTaxId'] = index
    })
    this.AdditionalCharges.push({
      Id: 0,
      Sno: index,
      LedgerChargeId: this.LedgerChargeId,
      LedgerName: this.LedgerName,
      AmountCharge: this.AmountCharge,
      TaxSlabChargeId: this.TaxSlabChargeId,
      TaxChargeName: this.TaxChargeName,
      TaxAmountCharge: this.TaxAmountCharge,
      TotalAmountCharge: this.TotalAmountCharge,
      TaxTypeCharge: this.TaxTypeCharge,
      taxTypeChargeName: this.taxTypeChargeName,
      taxChargeSlabType: this.taxChargeSlabType,
      taxChargeRates: this.taxChargeRates,
      itemTaxTrans: this.appliedTaxRatesCharge,
      TaxableAmountCharge: this.TaxableAmountCharge
    })
    setTimeout(() => {
      this.commonService.fixTableHFL('charge-table')
    }, 1)
    if (this.editChargeId !== -1) {
      this.AdditionalCharges[this.AdditionalCharges.length - 1].Id = this.editChargeId
    }
  }

  onChargeSelect (evt) {
    // console.log('on change of charge : ', evt)
    if (+evt.value === -1) {
      this.commonService.openledgerCretion('', FormConstants.PurchaseForm)
      this.taxSlabChargeSelect2.selector.nativeElement.value = ''
    } else {
      this.LedgerChargeId = +evt.value
      if (evt.value > 0) {
        this.LedgerName = evt.data[0].text
        // this.getTaxDetail(this.TaxSlabId)
      }
    }
    this.validateCharge()
    this.calculate()
  }

  onTaxSlabChargeSelect (evt) {
    // console.log('on change of tax slab : ', evt)
    if (+evt.value === -1) {
      this.commonService.openTax('')
      this.taxSlabChargeSelect2.selector.nativeElement.value = ''
    } else {
      if (evt.value > 0 && evt.data[0] && evt.data[0].text) {
        this.TaxSlabChargeId = +evt.value
        this.TaxChargeName = evt.data[0].text
        this.getTaxChargeDetail(this.TaxSlabChargeId)
      }
    }
    this.validateCharge()
  }

  getTaxChargeDetail (TaxSlabId) {
    this.purchaseService.getSlabData(TaxSlabId).subscribe(
      data => {
        console.log('tax slab data : ', data)
        if (data.Code === UIConstant.THOUSAND && data.Data) {
          this.taxChargeSlabType = (data.Data.TaxSlabs[0]) ? data.Data.TaxSlabs[0].Type : 0
          this.taxChargeRates = data.Data.TaxRates
          this.calculate()
          this.createTaxes(FormConstants.ChargeForm)
          this.getBillSummary()
        }
      }
    )
  }

  createTaxes (parentType) {
    let Sno = 0
    if (parentType === FormConstants.ChargeForm) {
      if (this.editChargeId !== -1) {
        Sno = this.editChargeSno
      } else {
        if (this.AdditionalCharges.length === 0) {
          Sno = 1
        } else {
          Sno = this.AdditionalCharges[this.AdditionalCharges.length - 1].Sno + 1
        }
      }
      if (this.appliedTaxRatesCharge.length > 0) {
        this.appliedTaxRatesCharge.forEach((taxRate) => {
          taxRate['ItemTransTaxId'] = Sno
          taxRate['Sno'] = Sno
        })
      }
      let charge = this.AdditionalCharges.find((charge) => charge.Sno === Sno)
      if (charge) {
        charge['itemTaxTrans'] = this.appliedTaxRatesCharge
      }
      console.log('tax rates applied : ', this.appliedTaxRatesCharge)
    } else if (parentType === FormConstants.PurchaseForm) {
      if (this.editItemId !== -1) {
        Sno = this.editItemSno
      } else {
        if (this.Items.length === 0) {
          Sno = 1
        } else {
          Sno = this.Items[this.Items.length - 1].Sno + 1
        }
      }
      if (this.appliedTaxRatesItem.length > 0) {
        this.appliedTaxRatesItem.forEach((taxRate) => {
          taxRate['ItemTransTaxId'] = Sno
          taxRate['Sno'] = Sno
        })
      }
      let item = this.Items.find((item) => item.Sno === Sno)
      if (item) {
        item['itemTaxTrans'] = this.appliedTaxRatesItem
      }
      console.log('tax rates applied : ', this.appliedTaxRatesItem)
    }
  }

  @ViewChild('taxTypecharge_select2') taxTypeChargeSelect2: Select2Component
  onTaxTypeChargeSelect (evt) {
    // console.log('on change of tax Type charge : ', evt)
    if (+evt.value >= 0 && evt.data[0] && evt.data[0].text) {
      this.TaxTypeCharge = +evt.value
      this.taxTypeChargeName = evt.data[0].text
      this.calculate()
    }
  }

  @ViewChild('taxSlab_select2') taxSlabSelect2: Select2Component
  onTaxSlabSelect (evt) {
    // console.log('on change of tax slab : ', evt)
    if (+evt.value === -1) {
      this.commonService.openTax('')
      this.taxSlabSelect2.selector.nativeElement.value = ''
    } else {
      if (evt.value > 0 && evt.data[0] && evt.data[0].text) {
        this.TaxSlabId = +evt.value
        this.taxSlabName = evt.data[0].text
        this.TaxSlabName = evt.data[0].text
        this.getTaxDetail(this.TaxSlabId)
      }
    }
    this.validateItem()
  }

  getTaxDetail (TaxSlabId) {
    this.purchaseService.getSlabData(TaxSlabId).subscribe(
      data => {
        console.log('tax slab data : ', data)
        if (data.Code === UIConstant.THOUSAND && data.Data) {
          this.taxSlabType = (data.Data.TaxSlabs[0]) ? data.Data.TaxSlabs[0].Type : 0
          this.taxRates = data.Data.TaxRates
          this.validateItem()
          this.calculate()
          this.createTaxes(FormConstants.PurchaseForm)
          this.getBillSummary()
        }
      }
    )
  }

  @ViewChild('taxType_select2') taxTypeSelect2: Select2Component
  onTaxTypeSelect (evt) {
    // console.log('on change of tax Type : ', evt)
    if (+evt.value >= 0 && evt.data[0] && evt.data[0].text) {
      this.TaxType = +evt.value
      this.taxTypeName = evt.data[0].text
      this.calculate()
    }
    this.validateItem()
  }

  NetBillAmount = 0
  TaxableValue = 0
  billSummary: Array<any> = []
  AdditionalChargesToShow: any = []
  getBillSummary () {
    let taxableValue = 0
    let ItemTaxTrans = []
    // console.log('item tax trans before bill sumarry : ', ItemTaxTrans)
    this.Items.forEach(element => {
      ItemTaxTrans = ItemTaxTrans.concat(element.itemTaxTrans)
      taxableValue += +element.AmountItem
    });
    if (!this.clickItem && +this.ItemId > 0 && +this.AmountItem > 0) {
      taxableValue += +this.AmountItem
      if (this.appliedTaxRatesItem.length > 0) {
        ItemTaxTrans = ItemTaxTrans.concat(this.appliedTaxRatesItem)
      }
    }
    this.AdditionalChargesToShow = JSON.parse(JSON.stringify(this.AdditionalCharges))
    this.AdditionalCharges.forEach(element => {
      ItemTaxTrans = ItemTaxTrans.concat(element.itemTaxTrans)
    });
    if (!this.clickCharge && +this.AmountCharge > 0 && +this.LedgerChargeId > 0) {
      if (this.appliedTaxRatesCharge.length > 0) {
        ItemTaxTrans = ItemTaxTrans.concat(this.appliedTaxRatesCharge)
      }
      if (!this.creatingForm) {
        this.AdditionalChargesToShow.push({
          'LedgerName': this.LedgerName,
          'TaxableAmountCharge': +this.TaxableAmountCharge
        })
      }
    }
    this.TaxableValue = taxableValue
    this.billSummary = []
    if (!this.creatingForm) {
      this.ItemTaxTrans = JSON.parse(JSON.stringify(ItemTaxTrans))
    }
    let groupOnId = _.groupBy(ItemTaxTrans, (tax) => {
      return tax.TaxRateId
    })
    // console.log(groupOnId)
    for (const rateId in groupOnId) {
      if (groupOnId.hasOwnProperty(rateId)) {
        const element = groupOnId[rateId];
        let obj = {}
        obj['name'] = element[0]['TaxRateNameTax']
        let sum = 0
        element.forEach(tax => {
          sum += +tax.AmountTax
        })
        obj['total'] = sum
        this.billSummary.push(obj)
      }
    }
    // console.log('bill summary : ', this.billSummary)
    this.loadingSummary = false
    this.calculateBillTotal()
  }
  calculateBillTotal () {
    this.BillAmount = 0
    this.billSummary.forEach(element => {
      this.BillAmount += +element.total
    })
    this.AdditionalChargesToShow.forEach(charge => {
      this.BillAmount += +charge.TaxableAmountCharge
    })
    this.BillAmount += +this.TaxableValue
    let billAmount = this.BillAmount
    if (this.RoundOffManual) {
      billAmount = billAmount + this.RoundOffManual
      this.BillAmount = billAmount
    } else {
      this.RoundOff = +(Math.round(billAmount) - billAmount).toFixed(this.noOfDecimalPoint)
      this.BillAmount = Math.round(billAmount)
    }
    this.CessAmount = 0
    this.calculatePaymentAmount()
  }

  calculateAllTotal () {
    let totalDiscount = 0
    let totalTax = 0
    let totalQuantity = 0
    let totalAmount = 0
    for (let i = 0; i < this.Items.length; i++) {
      totalDiscount = totalDiscount + +this.Items[i].DiscountAmt
      totalTax = totalTax + +this.Items[i].TaxAmount
      totalQuantity = totalQuantity + +this.Items[i].Quantity
      totalAmount = +totalAmount + +this.Items[i].SubTotal
    }
    if (!this.clickItem && this.ItemId > 0) {
      if (+this.DiscountAmt > 0) {
        totalDiscount += +this.DiscountAmt
      }
      if (+this.TaxAmount > 0) {
        totalTax += +this.TaxAmount
      }
      if (+this.Quantity > 0) {
        totalQuantity += +this.Quantity
      }
      if (+this.SubTotal > 0) {
        totalAmount += +this.SubTotal
      }
    }
    this.TotalDiscount = +totalDiscount.toFixed(this.noOfDecimalPoint)
    this.TotalTaxAmount = +totalTax.toFixed(4)
    this.TotalQty = +totalQuantity.toFixed(this.noOfDecimalPoint)
    this.SubTotalAmount = +totalAmount.toFixed(this.noOfDecimalPoint)
  }

  enterPressCharge (evt: KeyboardEvent) {
    this.addCharge()
    setTimeout(() => {
      this.chargeSelect2.selector.nativeElement.focus()
    }, 10)
  }
}


  removeByAttr (arr, attr, value) {
    var i = arr.length;
    while(i--){
      if( arr[i] 
          && arr[i].hasOwnProperty(attr) 
          && (arguments.length > 2 && arr[i][attr] === value ) ){ 
          arr.splice(i,1);
      }
    }
    return arr;
  }